{
  "root": {
    "id": "root",
    "name": "root",
    "displayName": "Root",
    "type": "directory",
    "path": "",
    "urlPath": "/",
    "include": true,
    "children": [
      {
        "id": "claude",
        "name": "claude",
        "displayName": "CLAUDE",
        "type": "file",
        "order": 7,
        "path": "claude",
        "urlPath": "/claude",
        "content": "# CLAUDE.md\n\nThis file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.\n\n## Core Technologies\n\n<!-- section-1 -->\n\n## Database & Authentication\n\n<!-- section-2 -->\n\n## Deployment Platform\n\n<!-- section-3 -->\n\n## Authentication Methods\n\n<!-- section-4 -->\n\n## Additional Features\n\n<!-- section-5 -->\n\n## Testing Framework\n\n<!-- section-6 -->\n\n# General rules:\n\n- Don't include any comments in any files.\n- All errors should be thrown - no \"fallback\" functionality\n- Import \"cn\" from \"@/lib/utils\" to concatenate classes.\n- Always use \\`@/lib/env.utils\\` for environment variables and browser APIs to ensure unit test compatibility.\n\n# File Organization and Naming Conventions\n\n- Types and store files alongside ancestor files\n- Actions and hooks files alongside descendent files\n\n\\`\\`\\`txt\nsrc/\n├── components/\n│   ├── Component.tsx\n│   └── Component.types.ts\n├── pages/\n│   ├── Page.tsx\n│   ├── Page.hooks.tsx\n│   └── Page.types.ts\n├── hooks/\n│   └── useFeature.tsx\n└── lib/\n    ├── utils.ts\n    └── log.utils.ts\n\n    key:\n    ◄─── = defined\n    ───► = imported\n\\`\\`\\`\n\n# Hook, action, store and type patterns\n\nDB <-> Supabase Client <-> hook <-> store\n\n- Supabase client queries are called directly in react-query hooks.\n- Data returned in the onSuccess function of react-query hooks is used to update the corresponding zustand store (if applicable).\n- Loading and error state is managed via the react-query hooks, NOT the zustand store.\n- All db types should be defined from \\`@/integrations/supabase/types\\`.\n\n## Example of file patterns - [\\`docs/util.md\\`](docs/util.md)\n\nFollow the examples outlined in [\\`docs/util.md\\`](docs/util.md) when working on hook, store or type files.\n\n# Testing\n\nAll tests should be performed with Jest or Playwright and documented in the \\`Tests.md\\` document\n\n## Test rules:\n\n- The test should find elements in the DOM via data-attributes. Add corresponding data-attributes to the elements in the components. Import the data-attribute values from an enum exported from \\`@/test.types.ts\\`\n- Do not use wait in the tests. Only use timeouts.\n\n## Tests.md\n\nThe test document should list all tests in the repo, with each test case listed in a single line with an indented line below with the pass condition.\nTest document should begin with an index and number each test as demonstrated below:\n\n# Tests.md file example:\n\n\\`\\`\\`md\n# Tests Documentation\n\n## Run All Tests\n\n**Command:** \\`npm run test\\`\n✓ Runs the complete test suite across all test files\n\n## Test Index\n\n1. [Name](#1-name-tests) - \\`npm run test:name\\`\n\n## 1. Name Tests\n\n**File:** \\`__tests__/name.test.ts\\`\n**Command:** \\`npm run test:name\\`\n\n### Name Test\n\n- should do something\n  ✓ Validates expected results\n\n- should do something else\n  ✓ Validates expected results\n\\`\\`\\`\n\n# Environment Variables and Browser APIs\n\nAll environment variable access and browser API usage must use the centralized utilities from \\`@/lib/env.utils\\`:\n\n\\`\\`\\`typescript\nimport { ENV, getBrowserAPI } from \"@/lib/env.utils\";\n\nconst apiUrl = ENV.SUPABASE_URL;\nconst storage = getBrowserAPI(() => localStorage);\n\\`\\`\\`\n\n# Console.logging\n\nAll logging should be performed using the \\`conditionalLog\\` function exported from \\`lib/log.utils.ts\\`\nThe \\`VITE_LOG_LABELS\\` variable in \\`.env.local\\` stores a comma separated string of log labels. Logs are returned if \\`VITE_LOG_LABELS=\"all\"\\`, or if \\`VITE_LOG_LABELS\\` includes the label arg in \\`conditionalLog\\`.\n",
        "components": [],
        "sections": {
          "section1": {
            "option1": {
              "content": "## Core Technologies Stack\n\n**When to use**: This is the default configuration for all projects\n\n**Technologies**:\n- **Next.js 15** with App Router architecture\n- **TypeScript** for type safety\n- **TailwindCSS v4** for styling\n- **Shadcn** for UI components\n- **Zustand** for state management\n- **React Query** for server state management\n\n**Import patterns**:\n```typescript\nimport { create } from \"zustand\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { cn } from \"@/lib/shadcn.utils\";\n```\n\n**Example component**:\n```typescript\nimport { cn } from \"@/lib/shadcn.utils\";\n\nexport function Button({ className, ...props }) {\n  return (\n    <button\n      className={cn(\"px-4 py-2 rounded\", className)}\n      {...props}\n    />\n  );\n}\n```",
              "include": true
            }
          },
          "section2": {
            "option1": {
              "content": "## No Database\n\n**When to use**: Selected when \"No database\" is chosen in InitialConfiguration\n\n**Technologies**:\n- Next.js 15\n- TypeScript\n- Client-side only state management\n\n**Example state**:\n```typescript\nexport interface AppState {\n  theme: 'light' | 'dark';\n  setTheme: (theme: 'light' | 'dark') => void;\n}\n```",
              "include": true
            },
            "option2": {
              "content": "## NeonDB with Better-Auth\n\n**When to use**: Selected when \"NeonDB\" database is chosen in InitialConfiguration\n\n**Technologies**:\n- **NeonDB** (serverless PostgreSQL)\n- **Prisma** ORM\n- **Better-Auth** for authentication\n- **PostgreSQL** database\n\n**Dependencies**:\n```json\n{\n  \"dependencies\": {\n    \"@prisma/client\": \"latest\",\n    \"better-auth\": \"latest\",\n    \"postgres\": \"latest\"\n  }\n}\n```\n\n**Environment Variables**:\n```env\nDATABASE_URL=\"postgresql://...\"\nBETTER_AUTH_SECRET=\"your-secret\"\nBETTER_AUTH_URL=\"http://localhost:3000\"\n```\n\n**Import patterns**:\n```typescript\nimport { User } from \"@prisma/client\";\nimport { auth } from \"@/lib/auth\";\nimport { getAuthenticatedClient } from \"@/lib/auth.utils\";\n```\n\n**Example usage**:\n```typescript\nconst session = await auth.api.getSession({\n  headers: await headers(),\n});\n\nconst { db } = await getAuthenticatedClient();\nconst user = await db.user.findUnique({\n  where: { id: session.user.id },\n});\n```",
              "include": true
            },
            "option3": {
              "content": "## Supabase with Better-Auth\n\n**When to use**: Selected when \"Supabase with Better-Auth\" is chosen in InitialConfiguration\n\n**Technologies**:\n- **Supabase** (PostgreSQL + additional services)\n- **Prisma** ORM\n- **Better-Auth** for authentication\n- **PostgreSQL** database with RLS support\n\n**Dependencies**:\n```json\n{\n  \"dependencies\": {\n    \"@prisma/client\": \"latest\",\n    \"better-auth\": \"latest\",\n    \"@supabase/supabase-js\": \"latest\"\n  }\n}\n```\n\n**Environment Variables**:\n```env\nDATABASE_URL=\"postgresql://...\"\nSUPABASE_URL=\"https://your-project.supabase.co\"\nSUPABASE_ANON_KEY=\"your-anon-key\"\nSUPABASE_JWT_SECRET=\"your-jwt-secret\"\nBETTER_AUTH_SECRET=\"your-secret\"\nBETTER_AUTH_URL=\"http://localhost:3000\"\n```\n\n**Import patterns**:\n```typescript\nimport { User } from \"@prisma/client\";\nimport { auth } from \"@/lib/auth\";\nimport { getAuthenticatedClient } from \"@/lib/auth.utils\";\nimport { createClient } from \"@/lib/supabase/server\";\n```\n\n**Example with RLS**:\n```typescript\nconst { db } = await getAuthenticatedClient();\nconst data = await db.post.findMany({\n  where: { published: true },\n});\n```",
              "include": true
            },
            "option4": {
              "content": "## Supabase Only\n\n**When to use**: Selected when \"Supabase Only\" is chosen in InitialConfiguration\n\n**Technologies**:\n- **Supabase** (PostgreSQL + Auth + Storage + Realtime)\n- **Prisma** ORM (optional)\n- **PostgreSQL** database\n\n**Dependencies**:\n```json\n{\n  \"dependencies\": {\n    \"@supabase/supabase-js\": \"latest\",\n    \"@supabase/ssr\": \"latest\"\n  }\n}\n```\n\n**Environment Variables**:\n```env\nNEXT_PUBLIC_SUPABASE_URL=\"https://your-project.supabase.co\"\nNEXT_PUBLIC_SUPABASE_ANON_KEY=\"your-anon-key\"\n```\n\n**Import patterns**:\n```typescript\nimport { createClient } from \"@/lib/supabase/server\";\nimport { createClient as createBrowserClient } from \"@/lib/supabase/client\";\n```\n\n**Example usage**:\n```typescript\nconst supabase = createClient();\nconst { data, error } = await supabase\n  .from('users')\n  .select('*')\n  .eq('id', userId);\n```",
              "include": true
            }
          },
          "section3": {
            "option1": {
              "content": "## Serverless Deployment (Vercel)\n\n**When to use**: Selected when \"Serverless (Vercel)\" deployment is chosen in InitialConfiguration\n\n**Technologies**:\n- **Vercel** for serverless deployment\n- Edge Runtime support\n- Automatic scaling\n\n**Configuration**:\n```json\n{\n  \"buildCommand\": \"npm run build\",\n  \"outputDirectory\": \".next\",\n  \"framework\": \"nextjs\"\n}\n```\n\n**Environment setup**:\n- Set environment variables in Vercel dashboard\n- Use `NEXT_PUBLIC_` prefix for client-side variables\n- Database connections should use connection pooling\n\n**Best practices**:\n- Use serverless-friendly database (NeonDB, Supabase)\n- Keep function execution under 10 seconds\n- Optimize bundle size for faster cold starts",
              "include": true
            },
            "option2": {
              "content": "## Always-on Deployment (Railway)\n\n**When to use**: Selected when \"Always-on (Railway)\" deployment is chosen in InitialConfiguration\n\n**Technologies**:\n- **Railway** for persistent deployment\n- Long-running processes supported\n- Direct database connections\n\n**Configuration**:\n```json\n{\n  \"build\": {\n    \"builder\": \"NIXPACKS\"\n  },\n  \"deploy\": {\n    \"startCommand\": \"npm run start\",\n    \"restartPolicyType\": \"ON_FAILURE\"\n  }\n}\n```\n\n**Environment setup**:\n- Set environment variables in Railway dashboard\n- Database connections can use direct connections\n- No timeout restrictions\n\n**Best practices**:\n- Suitable for WebSocket servers\n- Good for background jobs and cron tasks\n- Use for applications requiring persistent connections",
              "include": true
            }
          },
          "section4": {
            "option1": {
              "content": "## No Authentication\n\n**When to use**: Application doesn't require user authentication\n\n**Configuration**: No auth-related dependencies or setup required",
              "include": true
            },
            "option2": {
              "content": "## Magic Link Authentication\n\n**When to use**: Selected when \"Magic Link\" is chosen in InitialConfiguration\n\n**Technologies**:\n- **Better-Auth** with magic link plugin\n- **Resend** for email delivery\n\n**Dependencies**:\n```json\n{\n  \"dependencies\": {\n    \"better-auth\": \"latest\",\n    \"resend\": \"latest\"\n  }\n}\n```\n\n**Environment Variables**:\n```env\nRESEND_API_KEY=\"your-resend-key\"\nBETTER_AUTH_SECRET=\"your-secret\"\n```\n\n**Configuration**:\n```typescript\nimport { betterAuth } from \"better-auth\";\nimport { magicLink } from \"better-auth/plugins\";\n\nexport const auth = betterAuth({\n  plugins: [\n    magicLink({\n      sendMagicLink: async ({ email, url }) => {\n      },\n    }),\n  ],\n});\n```",
              "include": true
            },
            "option3": {
              "content": "## Email & Password Authentication\n\n**When to use**: Selected when \"Email & Password\" is chosen in InitialConfiguration\n\n**Technologies**:\n- **Better-Auth** with email/password\n- **Resend** for verification emails\n\n**Dependencies**:\n```json\n{\n  \"dependencies\": {\n    \"better-auth\": \"latest\",\n    \"resend\": \"latest\"\n  }\n}\n```\n\n**Client usage**:\n```typescript\nimport { signIn, signUp } from \"@/lib/auth-client\";\n\nawait signUp.email({\n  email: \"user@example.com\",\n  password: \"securePassword123\",\n  name: \"User Name\",\n});\n\nawait signIn.email({\n  email: \"user@example.com\",\n  password: \"securePassword123\",\n});\n```",
              "include": true
            },
            "option4": {
              "content": "## OTP Authentication\n\n**When to use**: Selected when \"OTP\" is chosen in InitialConfiguration\n\n**Technologies**:\n- **Better-Auth** with OTP plugin\n- **Resend** for OTP delivery\n\n**Configuration**:\n```typescript\nimport { otp } from \"better-auth/plugins\";\n\nexport const auth = betterAuth({\n  plugins: [\n    otp({\n      sendOTP: async ({ email, otp }) => {\n      },\n    }),\n  ],\n});\n```",
              "include": true
            },
            "option5": {
              "content": "## Two-Factor Authentication (2FA)\n\n**When to use**: Selected when \"2FA\" is chosen in InitialConfiguration\n\n**Technologies**:\n- **Better-Auth** with twoFactor plugin\n\n**Configuration**:\n```typescript\nimport { twoFactor } from \"better-auth/plugins\";\n\nexport const auth = betterAuth({\n  plugins: [twoFactor()],\n});\n```\n\n**Client usage**:\n```typescript\nimport { twoFactor } from \"@/lib/auth-client\";\n\nawait twoFactor.enable({\n  password: \"userPassword\",\n});\n\nawait twoFactor.verifyTotp({\n  code: \"123456\",\n});\n```",
              "include": true
            },
            "option6": {
              "content": "## Passkey Authentication\n\n**When to use**: Selected when \"Passkey\" is chosen in InitialConfiguration\n\n**Technologies**:\n- **Better-Auth** with passkey plugin\n- WebAuthn API\n\n**Configuration**:\n```typescript\nimport { passkey } from \"better-auth/plugins\";\n\nexport const auth = betterAuth({\n  plugins: [\n    passkey({\n      rpName: \"Your App Name\",\n      rpID: \"yourdomain.com\",\n    }),\n  ],\n});\n```",
              "include": true
            },
            "option7": {
              "content": "## Anonymous Sessions\n\n**When to use**: Selected when \"Anonymous Sessions\" is chosen in InitialConfiguration\n\n**Technologies**:\n- **Better-Auth** with anonymous plugin\n\n**Configuration**:\n```typescript\nimport { anonymous } from \"better-auth/plugins\";\n\nexport const auth = betterAuth({\n  plugins: [anonymous()],\n});\n```\n\n**Client usage**:\n```typescript\nimport { signIn } from \"@/lib/auth-client\";\n\nawait signIn.anonymous();\n```",
              "include": true
            },
            "option8": {
              "content": "## Google OAuth\n\n**When to use**: Selected when \"Google OAuth\" is chosen in InitialConfiguration\n\n**Environment Variables**:\n```env\nGOOGLE_CLIENT_ID=\"your-client-id\"\nGOOGLE_CLIENT_SECRET=\"your-client-secret\"\n```\n\n**Configuration**:\n```typescript\nexport const auth = betterAuth({\n  socialProviders: {\n    google: {\n      clientId: process.env.GOOGLE_CLIENT_ID!,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n    },\n  },\n});\n```\n\n**Client usage**:\n```typescript\nimport { signIn } from \"@/lib/auth-client\";\n\nawait signIn.social({\n  provider: \"google\",\n  callbackURL: \"/dashboard\",\n});\n```",
              "include": true
            },
            "option9": {
              "content": "## GitHub OAuth\n\n**When to use**: Selected when \"GitHub OAuth\" is chosen in InitialConfiguration\n\n**Environment Variables**:\n```env\nGITHUB_CLIENT_ID=\"your-client-id\"\nGITHUB_CLIENT_SECRET=\"your-client-secret\"\n```\n\n**Configuration**:\n```typescript\nexport const auth = betterAuth({\n  socialProviders: {\n    github: {\n      clientId: process.env.GITHUB_CLIENT_ID!,\n      clientSecret: process.env.GITHUB_CLIENT_SECRET!,\n    },\n  },\n});\n```",
              "include": true
            },
            "option10": {
              "content": "## Apple Sign In\n\n**When to use**: Selected when \"Apple Sign In\" is chosen in InitialConfiguration\n\n**Environment Variables**:\n```env\nAPPLE_CLIENT_ID=\"your-client-id\"\nAPPLE_CLIENT_SECRET=\"your-client-secret\"\n```\n\n**Configuration**:\n```typescript\nexport const auth = betterAuth({\n  socialProviders: {\n    apple: {\n      clientId: process.env.APPLE_CLIENT_ID!,\n      clientSecret: process.env.APPLE_CLIENT_SECRET!,\n    },\n  },\n});\n```",
              "include": true
            },
            "option11": {
              "content": "## Password Only\n\n**When to use**: Selected when \"Password Only\" is chosen in InitialConfiguration (no email verification)\n\n**Configuration**:\n```typescript\nexport const auth = betterAuth({\n  emailAndPassword: {\n    enabled: true,\n    requireEmailVerification: false,\n  },\n});\n```",
              "include": true
            }
          },
          "section5": {
            "option1": {
              "content": "## File Storage (Supabase)\n\n**When to use**: Selected when \"File Storage\" is enabled in InitialConfiguration (requires Supabase)\n\n**Technologies**:\n- **Supabase Storage**\n\n**Import patterns**:\n```typescript\nimport { createClient } from \"@/lib/supabase/server\";\n```\n\n**Server-side upload**:\n```typescript\nconst supabase = createClient();\nconst { data, error } = await supabase.storage\n  .from('bucket-name')\n  .upload('path/to/file', file);\n```\n\n**Client-side upload**:\n```typescript\nimport { createClient } from \"@/lib/supabase/client\";\n\nconst supabase = createClient();\nconst { data, error } = await supabase.storage\n  .from('bucket-name')\n  .upload('path/to/file', file);\n```\n\n**Get public URL**:\n```typescript\nconst { data } = supabase.storage\n  .from('bucket-name')\n  .getPublicUrl('path/to/file');\n```",
              "include": true
            },
            "option2": {
              "content": "## PayPal Payments\n\n**When to use**: Selected when \"PayPal payments\" is enabled in InitialConfiguration\n\n**Dependencies**:\n```json\n{\n  \"dependencies\": {\n    \"@paypal/checkout-server-sdk\": \"latest\"\n  }\n}\n```\n\n**Environment Variables**:\n```env\nPAYPAL_CLIENT_ID=\"your-client-id\"\nPAYPAL_CLIENT_SECRET=\"your-client-secret\"\nPAYPAL_MODE=\"sandbox\"\n```\n\n**Server action example**:\n```typescript\nimport paypal from \"@paypal/checkout-server-sdk\";\n\nconst environment = new paypal.core.SandboxEnvironment(\n  process.env.PAYPAL_CLIENT_ID!,\n  process.env.PAYPAL_CLIENT_SECRET!\n);\nconst client = new paypal.core.PayPalHttpClient(environment);\n```",
              "include": true
            },
            "option3": {
              "content": "## Stripe Payments\n\n**When to use**: Selected when \"Stripe payments\" is enabled in InitialConfiguration\n\n**Dependencies**:\n```json\n{\n  \"dependencies\": {\n    \"stripe\": \"latest\",\n    \"@stripe/stripe-js\": \"latest\"\n  }\n}\n```\n\n**Environment Variables**:\n```env\nSTRIPE_SECRET_KEY=\"sk_test_...\"\nNEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=\"pk_test_...\"\n```\n\n**Server-side setup**:\n```typescript\nimport Stripe from \"stripe\";\n\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\n  apiVersion: \"2024-10-28.acacia\",\n});\n```\n\n**Client-side setup**:\n```typescript\nimport { loadStripe } from \"@stripe/stripe-js\";\n\nconst stripePromise = loadStripe(\n  process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY!\n);\n```\n\n**Create payment intent**:\n```typescript\nconst paymentIntent = await stripe.paymentIntents.create({\n  amount: 1000,\n  currency: \"usd\",\n});\n```",
              "include": true
            },
            "option4": {
              "content": "## Stripe Subscriptions\n\n**When to use**: Selected when \"Stripe subscriptions\" is enabled in InitialConfiguration\n\n**Dependencies**:\n```json\n{\n  \"dependencies\": {\n    \"stripe\": \"latest\",\n    \"@stripe/stripe-js\": \"latest\"\n  }\n}\n```\n\n**Create subscription**:\n```typescript\nconst subscription = await stripe.subscriptions.create({\n  customer: customerId,\n  items: [{ price: priceId }],\n});\n```\n\n**Webhook handling**:\n```typescript\nimport { headers } from \"next/headers\";\n\nexport async function POST(req: Request) {\n  const body = await req.text();\n  const signature = headers().get(\"stripe-signature\")!;\n\n  const event = stripe.webhooks.constructEvent(\n    body,\n    signature,\n    process.env.STRIPE_WEBHOOK_SECRET!\n  );\n\n  if (event.type === \"customer.subscription.updated\") {\n  }\n\n  return new Response(JSON.stringify({ received: true }));\n}\n```",
              "include": true
            },
            "option5": {
              "content": "## AI Image Generation (OpenRouter)\n\n**When to use**: Selected when \"Image generation\" is enabled in InitialConfiguration\n\n**Dependencies**:\n```json\n{\n  \"dependencies\": {\n    \"openai\": \"latest\"\n  }\n}\n```\n\n**Environment Variables**:\n```env\nOPENROUTER_API_KEY=\"your-api-key\"\n```\n\n**Server action example**:\n```typescript\nimport OpenAI from \"openai\";\n\nconst openai = new OpenAI({\n  baseURL: \"https://openrouter.ai/api/v1\",\n  apiKey: process.env.OPENROUTER_API_KEY,\n});\n\nconst response = await openai.images.generate({\n  model: \"dall-e-3\",\n  prompt: \"A beautiful landscape\",\n  n: 1,\n  size: \"1024x1024\",\n});\n```",
              "include": true
            },
            "option6": {
              "content": "## AI Text Generation/Analysis (OpenRouter)\n\n**When to use**: Selected when \"Text generation/analysis\" is enabled in InitialConfiguration\n\n**Dependencies**:\n```json\n{\n  \"dependencies\": {\n    \"openai\": \"latest\"\n  }\n}\n```\n\n**Server action example**:\n```typescript\nimport OpenAI from \"openai\";\n\nconst openai = new OpenAI({\n  baseURL: \"https://openrouter.ai/api/v1\",\n  apiKey: process.env.OPENROUTER_API_KEY,\n});\n\nconst completion = await openai.chat.completions.create({\n  model: \"anthropic/claude-3.5-sonnet\",\n  messages: [\n    { role: \"user\", content: \"Hello!\" }\n  ],\n});\n```\n\n**Streaming response**:\n```typescript\nconst stream = await openai.chat.completions.create({\n  model: \"anthropic/claude-3.5-sonnet\",\n  messages: [{ role: \"user\", content: \"Tell me a story\" }],\n  stream: true,\n});\n\nfor await (const chunk of stream) {\n  const content = chunk.choices[0]?.delta?.content || \"\";\n  process.stdout.write(content);\n}\n```",
              "include": true
            },
            "option7": {
              "content": "## Email Notifications (Resend)\n\n**When to use**: Selected when \"Email notifications\" is enabled in InitialConfiguration\n\n**Dependencies**:\n```json\n{\n  \"dependencies\": {\n    \"resend\": \"latest\"\n  }\n}\n```\n\n**Environment Variables**:\n```env\nRESEND_API_KEY=\"re_...\"\n```\n\n**Server action example**:\n```typescript\nimport { Resend } from \"resend\";\n\nconst resend = new Resend(process.env.RESEND_API_KEY);\n\nawait resend.emails.send({\n  from: \"noreply@yourdomain.com\",\n  to: \"user@example.com\",\n  subject: \"Welcome\",\n  html: \"<p>Welcome to our app!</p>\",\n});\n```",
              "include": true
            },
            "option8": {
              "content": "## In-App Notifications\n\n**When to use**: Selected when \"In-app notifications\" is enabled in InitialConfiguration\n\n**Database schema**:\n```prisma\nmodel Notification {\n  id        String   @id @default(cuid())\n  userId    String\n  title     String\n  message   String\n  read      Boolean  @default(false)\n  createdAt DateTime @default(now())\n  user      User     @relation(fields: [userId], references: [id])\n}\n```\n\n**Create notification action**:\n```typescript\nconst notification = await db.notification.create({\n  data: {\n    userId: userId,\n    title: \"New Message\",\n    message: \"You have a new message\",\n  },\n});\n```\n\n**Query notifications hook**:\n```typescript\nexport const useNotifications = () => {\n  return useQuery({\n    queryKey: [\"notifications\"],\n    queryFn: async () => {\n      const { data } = await getNotificationsAction();\n      return data;\n    },\n  });\n};\n```",
              "include": true
            }
          },
          "section6": {
            "option1": {
              "content": "## Testing with Jest & Playwright\n\n**When to use**: All projects should include testing\n\n**Technologies**:\n- **Jest** for unit and integration tests\n- **Playwright** for end-to-end tests\n\n**Dependencies**:\n```json\n{\n  \"devDependencies\": {\n    \"jest\": \"latest\",\n    \"@playwright/test\": \"latest\",\n    \"@testing-library/react\": \"latest\",\n    \"@testing-library/jest-dom\": \"latest\"\n  }\n}\n```\n\n**Jest configuration** (`jest.config.js`):\n```javascript\nmodule.exports = {\n  preset: \"next\",\n  testEnvironment: \"jest-environment-jsdom\",\n  setupFilesAfterEnv: [\"<rootDir>/jest.setup.js\"],\n};\n```\n\n**Playwright configuration** (`playwright.config.ts`):\n```typescript\nimport { defineConfig } from \"@playwright/test\";\n\nexport default defineConfig({\n  testDir: \"./e2e\",\n  use: {\n    baseURL: \"http://localhost:3000\",\n  },\n});\n```\n\n**Test file pattern**:\n```typescript\nimport { test, expect } from \"@playwright/test\";\n\ntest(\"should navigate to home page\", async ({ page }) => {\n  await page.goto(\"/\");\n  await expect(page).toHaveTitle(/Home/);\n});\n```",
              "include": true
            }
          }
        },
        "include": true
      },
      {
        "id": "util",
        "name": "util",
        "displayName": "util",
        "type": "file",
        "order": 8,
        "path": "util",
        "urlPath": "/util",
        "content": "# Utility File Patterns\n\n## Types File Examples\n\n<!-- section-1 -->\n\n## Stores File Examples\n\n<!-- section-2 -->\n\n## Actions File Examples\n\n<!-- section-3 -->\n\n## Hooks File Examples\n\n<!-- section-4 -->\n\n## Utility Files\n\n<!-- section-5 -->\n\n# Toast Component Example\n\n\\`\\`\\`typescript\nimport { toast } from \"sonner\";\nimport { Toast } from \"@/app/(components)/Toast\";\nimport { TestDataAttributes } from \"@/test.types\";\n\ntoast.custom(() => (\n  <Toast\n    variant=\"success\"\n    title=\"Success\"\n    message=\"Operation completed successfully\"\n    data-cy={TestDataAttributes.TOAST_SUCCESS}\n  />\n));\n\ntoast.custom(() => (\n  <Toast\n    variant=\"error\"\n    title=\"Error\"\n    message=\"An error occurred while processing your request\"\n    data-cy={TestDataAttributes.TOAST_ERROR}\n  />\n));\n\ntoast.custom(() => (\n  <Toast\n    variant=\"info\"\n    title=\"Information\"\n    message=\"Please review the details before proceeding\"\n    data-cy={TestDataAttributes.TOAST_INFO}\n  />\n));\n\\`\\`\\`\n\n# Better Auth Organization & Role Management\n\nThis section provides comprehensive examples for implementing organization and role management with Better-Auth.\n\n## Database Schema - \\`schema.prisma\\`\n\n\\`\\`\\`prisma\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n  schemas  = [\"auth\", \"public\"]\n}\n\nmodel user {\n  id               String       @id @default(cuid())\n  email            String       @unique\n  name             String?\n  role             String       @default(\"user\")\n  banned           Boolean      @default(false)\n  banReason        String?\n  banExpires       DateTime?\n  emailVerified    Boolean?\n  createdAt        DateTime     @default(now())\n  updatedAt        DateTime     @updatedAt\n  image            String?\n  MagicLink        MagicLink[]\n  account          account[]\n  invitation       invitation[]\n  member           member[]\n  session          session[]\n\n  @@schema(\"auth\")\n}\n\nmodel session {\n  id                   String   @id @default(cuid())\n  userId               String\n  expiresAt            DateTime\n  token                String   @unique\n  createdAt            DateTime @default(now())\n  updatedAt            DateTime @updatedAt\n  ipAddress            String?\n  userAgent            String?\n  impersonatedBy       String?\n  activeOrganizationId String?\n  user                 user     @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@schema(\"auth\")\n}\n\nmodel account {\n  id                    String    @id @default(cuid())\n  userId                String\n  accountId             String\n  providerId            String\n  accessToken           String?\n  refreshToken          String?\n  idToken               String?\n  accessTokenExpiresAt  DateTime?\n  refreshTokenExpiresAt DateTime?\n  scope                 String?\n  password              String?\n  createdAt             DateTime  @default(now())\n  updatedAt             DateTime  @updatedAt\n  user                  user      @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([providerId, accountId])\n  @@schema(\"auth\")\n}\n\nmodel verification {\n  id         String   @id @default(cuid())\n  identifier String\n  value      String\n  expiresAt  DateTime\n  createdAt  DateTime @default(now())\n  updatedAt  DateTime @updatedAt\n\n  @@unique([identifier, value])\n  @@schema(\"auth\")\n}\n\nmodel MagicLink {\n  id        String   @id @default(cuid())\n  userId    String\n  token     String   @unique\n  email     String\n  expiresAt DateTime\n  createdAt DateTime @default(now())\n  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@schema(\"auth\")\n}\n\nmodel organization {\n  id         String       @id @default(cuid())\n  name       String\n  slug       String       @unique\n  logo       String?\n  metadata   Json?\n  createdAt  DateTime     @default(now())\n  updatedAt  DateTime     @updatedAt\n  invitation invitation[]\n  member     member[]\n\n  @@schema(\"auth\")\n}\n\nmodel member {\n  id             String       @id @default(cuid())\n  userId         String\n  organizationId String\n  role           String       @default(\"member\")\n  createdAt      DateTime     @default(now())\n  updatedAt      DateTime     @updatedAt\n  organization   organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)\n  user           user         @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([userId, organizationId])\n  @@schema(\"auth\")\n}\n\nmodel invitation {\n  id             String       @id @default(cuid())\n  organizationId String\n  email          String\n  role           String       @default(\"member\")\n  inviterId      String\n  token          String?      @unique\n  status         String       @default(\"pending\")\n  expiresAt      DateTime\n  createdAt      DateTime     @default(now())\n  updatedAt      DateTime     @updatedAt\n  user           user         @relation(fields: [inviterId], references: [id], onDelete: Cascade)\n  organization   organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)\n\n  @@unique([email, organizationId])\n  @@schema(\"auth\")\n}\n\\`\\`\\`\n\n## Console Logging\n\nAll logging should be performed using the \\`conditionalLog\\` function exported from \\`lib/log.utils.ts\\`\n\nThe \\`NEXT_PUBLIC_LOG_LABELS\\` variable in \\`.env.local\\` stores a comma separated string of log labels. Logs are returned if \\`NEXT_PUBLIC_LOG_LABELS=\"all\"\\`, or if \\`NEXT_PUBLIC_LOG_LABELS\\` includes the label arg in \\`conditionalLog\\`.\n",
        "components": [],
        "sections": {
          "section1": {
            "option1": {
              "content": "## Basic Types (No Database)\n\n**When to use**: When no database is configured\n\n**Example**:\n```typescript\nexport interface AppState {\n  theme: 'light' | 'dark';\n  setTheme: (theme: 'light' | 'dark') => void;\n}\n\nexport interface FormData {\n  name: string;\n  email: string;\n}\n```",
              "include": true
            },
            "option2": {
              "content": "## Types with Prisma\n\n**When to use**: When using NeonDB or Supabase with Prisma\n\n**Import pattern**:\n```typescript\nimport { User, Post } from \"@prisma/client\";\n```\n\n**Example**:\n```typescript\nimport { User } from \"@prisma/client\";\n\nexport interface AppState {\n  user: User | null;\n  setUser: (user: User | null) => void;\n  tempEmail?: string;\n  setTempEmail: (tempEmail: string) => void;\n  reset: () => void;\n}\n\nexport interface SignInData {\n  email: string;\n  password: string;\n}\n```",
              "include": true
            },
            "option3": {
              "content": "## Types with Better-Auth Session\n\n**When to use**: When using Better-Auth for authentication\n\n**Import pattern**:\n```typescript\nimport { Session } from \"better-auth/types\";\nimport { User } from \"@prisma/client\";\n```\n\n**Example**:\n```typescript\nimport { User } from \"@prisma/client\";\n\nexport interface AppState {\n  user: User | null;\n  setUser: (user: User | null) => void;\n  reset: () => void;\n}\n\nexport interface ExtendedUser extends User {\n  profile?: {\n    isOnboardingComplete: boolean;\n  } | null;\n}\n```",
              "include": true
            },
            "option4": {
              "content": "## Types with File Storage\n\n**When to use**: When Supabase storage is enabled\n\n**Example**:\n```typescript\nexport interface FileUploadData {\n  file: File;\n  bucket: string;\n  path: string;\n}\n\nexport interface FileMetadata {\n  url: string;\n  path: string;\n  size: number;\n  mimeType: string;\n}\n```",
              "include": true
            },
            "option5": {
              "content": "## Types with Payment Data\n\n**When to use**: When Stripe or PayPal is enabled\n\n**Example**:\n```typescript\nexport interface PaymentIntentData {\n  amount: number;\n  currency: string;\n  customerId?: string;\n}\n\nexport interface SubscriptionData {\n  priceId: string;\n  customerId: string;\n  trialDays?: number;\n}\n```",
              "include": true
            },
            "option6": {
              "content": "## Types with AI Integration\n\n**When to use**: When OpenRouter AI is enabled\n\n**Example**:\n```typescript\nexport interface ImageGenerationRequest {\n  prompt: string;\n  size: \"1024x1024\" | \"1792x1024\" | \"1024x1792\";\n  model: string;\n}\n\nexport interface ChatCompletionRequest {\n  messages: Array<{\n    role: \"user\" | \"assistant\" | \"system\";\n    content: string;\n  }>;\n  model: string;\n  stream?: boolean;\n}\n```",
              "include": true
            }
          },
          "section2": {
            "option1": {
              "content": "## Basic Zustand Store\n\n**When to use**: Simple client-side state management\n\n**Example**:\n```typescript\nimport { create } from \"zustand\";\n\ninterface ThemeState {\n  theme: 'light' | 'dark';\n  setTheme: (theme: 'light' | 'dark') => void;\n}\n\nconst initialState = {\n  theme: 'light' as const,\n};\n\nexport const useThemeStore = create<ThemeState>()((set) => ({\n  ...initialState,\n  setTheme: (theme) => set({ theme }),\n}));\n```",
              "include": true
            },
            "option2": {
              "content": "## Persisted Store\n\n**When to use**: When state needs to persist across sessions\n\n**Example**:\n```typescript\nimport { create } from \"zustand\";\nimport { persist } from \"zustand/middleware\";\n\ninterface SettingsState {\n  notifications: boolean;\n  language: string;\n  setNotifications: (enabled: boolean) => void;\n  setLanguage: (lang: string) => void;\n}\n\nexport const useSettingsStore = create<SettingsState>()(\n  persist(\n    (set) => ({\n      notifications: true,\n      language: 'en',\n      setNotifications: (notifications) => set({ notifications }),\n      setLanguage: (language) => set({ language }),\n    }),\n    {\n      name: 'settings-storage',\n    }\n  )\n);\n```",
              "include": true
            },
            "option3": {
              "content": "## Store with Authentication State\n\n**When to use**: When using Better-Auth with user session\n\n**Example**:\n```typescript\nimport { User } from \"@prisma/client\";\nimport { create } from \"zustand\";\nimport { AppState } from \"./layout.types\";\n\nconst initialState = {\n  user: null,\n};\n\nexport const useAppStore = create<AppState>()((set) => ({\n  ...initialState,\n  setUser: (user) => set({ user }),\n  reset: () => set(initialState),\n}));\n```",
              "include": true
            },
            "option4": {
              "content": "## Store with Multi-Tenant Support\n\n**When to use**: When using Better-Auth organization plugin\n\n**Example**:\n```typescript\nimport { create } from \"zustand\";\n\ninterface OrganizationState {\n  activeOrganizationId: string | null;\n  setActiveOrganization: (id: string | null) => void;\n  reset: () => void;\n}\n\nconst initialState = {\n  activeOrganizationId: null,\n};\n\nexport const useOrganizationStore = create<OrganizationState>()((set) => ({\n  ...initialState,\n  setActiveOrganization: (activeOrganizationId) => set({ activeOrganizationId }),\n  reset: () => set(initialState),\n}));\n```",
              "include": true
            }
          },
          "section3": {
            "option1": {
              "content": "## Basic Server Actions (No Auth)\n\n**When to use**: Simple server actions without authentication\n\n**Example**:\n```typescript\n\"use server\";\n\nimport { ActionResponse, getActionResponse } from \"@/lib/action.utils\";\n\nexport const getDataAction = async (): Promise<ActionResponse<string[]>> => {\n  try {\n    const data = [\"item1\", \"item2\", \"item3\"];\n    return getActionResponse({ data });\n  } catch (error) {\n    return getActionResponse({ error });\n  }\n};\n```",
              "include": true
            },
            "option2": {
              "content": "## Actions with Better-Auth\n\n**When to use**: When using Better-Auth for authentication\n\n**Example**:\n```typescript\n\"use server\";\n\nimport { ActionResponse, getActionResponse } from \"@/lib/action.utils\";\nimport { auth } from \"@/lib/auth\";\nimport { User } from \"@prisma/client\";\nimport { headers } from \"next/headers\";\n\nexport const getUserAction = async (): Promise<ActionResponse<User | null>> => {\n  try {\n    const session = await auth.api.getSession({\n      headers: await headers(),\n    });\n\n    if (!session?.user) return getActionResponse();\n\n    return getActionResponse({ data: session.user as User });\n  } catch (error) {\n    return getActionResponse({ error });\n  }\n};\n```",
              "include": true
            },
            "option3": {
              "content": "## Actions with Prisma + RLS\n\n**When to use**: When using Prisma with Row Level Security\n\n**Example**:\n```typescript\n\"use server\";\n\nimport { ActionResponse, getActionResponse } from \"@/lib/action.utils\";\nimport { auth } from \"@/lib/auth\";\nimport { getAuthenticatedClient } from \"@/lib/auth.utils\";\nimport { User } from \"@prisma/client\";\nimport { headers } from \"next/headers\";\n\nexport const getUserAction = async (): Promise<ActionResponse<User | null>> => {\n  try {\n    const session = await auth.api.getSession({\n      headers: await headers(),\n    });\n\n    if (!session?.user) return getActionResponse();\n\n    const { db } = await getAuthenticatedClient();\n\n    const prismaUser = await db.user.findUnique({\n      where: { id: session.user.id },\n    });\n\n    return getActionResponse({ data: prismaUser });\n  } catch (error) {\n    return getActionResponse({ error });\n  }\n};\n```",
              "include": true
            },
            "option4": {
              "content": "## Actions with File Upload (Supabase)\n\n**When to use**: When Supabase storage is enabled\n\n**Example**:\n```typescript\n\"use server\";\n\nimport { ActionResponse, getActionResponse } from \"@/lib/action.utils\";\nimport { createClient } from \"@/lib/supabase/server\";\n\nexport const uploadFileAction = async (\n  formData: FormData\n): Promise<ActionResponse<{ url: string }>> => {\n  try {\n    const file = formData.get(\"file\") as File;\n    const bucket = formData.get(\"bucket\") as string;\n    const path = formData.get(\"path\") as string;\n\n    const supabase = createClient();\n    const { data, error } = await supabase.storage\n      .from(bucket)\n      .upload(path, file);\n\n    if (error) throw error;\n\n    const { data: urlData } = supabase.storage\n      .from(bucket)\n      .getPublicUrl(path);\n\n    return getActionResponse({ data: { url: urlData.publicUrl } });\n  } catch (error) {\n    return getActionResponse({ error });\n  }\n};\n```",
              "include": true
            },
            "option5": {
              "content": "## Actions with Payments (Stripe/PayPal)\n\n**When to use**: When Stripe or PayPal is enabled\n\n**Stripe Example**:\n```typescript\n\"use server\";\n\nimport { ActionResponse, getActionResponse } from \"@/lib/action.utils\";\nimport Stripe from \"stripe\";\n\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\n  apiVersion: \"2024-10-28.acacia\",\n});\n\nexport const createPaymentIntentAction = async (\n  amount: number\n): Promise<ActionResponse<{ clientSecret: string }>> => {\n  try {\n    const paymentIntent = await stripe.paymentIntents.create({\n      amount,\n      currency: \"usd\",\n    });\n\n    return getActionResponse({\n      data: { clientSecret: paymentIntent.client_secret! },\n    });\n  } catch (error) {\n    return getActionResponse({ error });\n  }\n};\n```",
              "include": true
            },
            "option6": {
              "content": "## Actions with AI Integration (OpenRouter)\n\n**When to use**: When OpenRouter AI is enabled\n\n**Example**:\n```typescript\n\"use server\";\n\nimport { ActionResponse, getActionResponse } from \"@/lib/action.utils\";\nimport OpenAI from \"openai\";\n\nconst openai = new OpenAI({\n  baseURL: \"https://openrouter.ai/api/v1\",\n  apiKey: process.env.OPENROUTER_API_KEY,\n});\n\nexport const generateTextAction = async (\n  prompt: string\n): Promise<ActionResponse<{ text: string }>> => {\n  try {\n    const completion = await openai.chat.completions.create({\n      model: \"anthropic/claude-3.5-sonnet\",\n      messages: [{ role: \"user\", content: prompt }],\n    });\n\n    const text = completion.choices[0]?.message?.content || \"\";\n\n    return getActionResponse({ data: { text } });\n  } catch (error) {\n    return getActionResponse({ error });\n  }\n};\n```",
              "include": true
            }
          },
          "section4": {
            "option1": {
              "content": "## Basic React Query Hooks\n\n**When to use**: Simple data fetching without authentication\n\n**Example**:\n```typescript\n\"use client\";\n\nimport { useQuery } from \"@tanstack/react-query\";\nimport { getDataAction } from \"./page.actions\";\n\nexport const useGetData = () => {\n  return useQuery({\n    queryKey: [\"data\"],\n    queryFn: async () => {\n      const { data, error } = await getDataAction();\n      if (error) throw error;\n      return data;\n    },\n  });\n};\n```",
              "include": true
            },
            "option2": {
              "content": "## Hooks with Better-Auth Client\n\n**When to use**: When using Better-Auth for authentication\n\n**Example**:\n```typescript\n\"use client\";\n\nimport { configuration, privatePaths } from \"@/configuration\";\nimport { signIn } from \"@/lib/auth-client\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { usePathname, useRouter } from \"next/navigation\";\nimport { toast } from \"sonner\";\nimport { Toast } from \"../(components)/Toast\";\nimport { TestDataAttributes } from \"@/test.types\";\nimport { useAppStore } from \"../layout.stores\";\nimport { SignInData } from \"../layout.types\";\nimport { getUserAction } from \"./layout.actions\";\n\nexport const useGetUser = () => {\n  const { setUser, reset } = useAppStore();\n  const pathname = usePathname();\n  const router = useRouter();\n\n  return useQuery({\n    queryKey: [\"user\"],\n    queryFn: async () => {\n      const { data, error } = await getUserAction();\n      if (!data || error) {\n        if (privatePaths.includes(pathname)) {\n          router.push(configuration.paths.signIn);\n        }\n        reset();\n      }\n      if (error) throw error;\n      setUser(data ?? null);\n      return data;\n    },\n    staleTime: 1000 * 60 * 5,\n  });\n};\n\nexport const useSignIn = () => {\n  const { setUser } = useAppStore();\n  const router = useRouter();\n\n  return useMutation({\n    mutationFn: async (signInData: SignInData) => {\n      const { error } = await signIn.email({\n        email: signInData.email,\n        password: signInData.password,\n      });\n\n      if (error) throw error;\n      const { data: userData, error: userError } = await getUserAction();\n\n      if (userError) throw new Error(userError);\n\n      return userData;\n    },\n    onSuccess: (data) => {\n      if (data) {\n        setUser(data);\n      }\n      toast.custom(() => (\n        <Toast\n          variant=\"success\"\n          title=\"Success\"\n          message=\"Successfully signed in\"\n          data-cy={TestDataAttributes.TOAST_SUCCESS}\n        />\n      ));\n      router.push(configuration.paths.home);\n    },\n    onError: (error: Error) => {\n      toast.custom(() => (\n        <Toast\n          variant=\"error\"\n          title=\"Sign In Failed\"\n          message={error.message || \"Failed to sign in\"}\n          data-cy={TestDataAttributes.TOAST_ERROR}\n        />\n      ));\n    },\n  });\n};\n```",
              "include": true
            },
            "option3": {
              "content": "## Hooks with Optimistic Updates\n\n**When to use**: For better UX with immediate UI updates\n\n**Example**:\n```typescript\n\"use client\";\n\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { updatePostAction } from \"./post.actions\";\n\nexport const useUpdatePost = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async ({ id, title }: { id: string; title: string }) => {\n      const { data, error } = await updatePostAction(id, title);\n      if (error) throw error;\n      return data;\n    },\n    onMutate: async (variables) => {\n      await queryClient.cancelQueries({ queryKey: [\"posts\"] });\n\n      const previousPosts = queryClient.getQueryData([\"posts\"]);\n\n      queryClient.setQueryData([\"posts\"], (old: any) => {\n        return old?.map((post: any) =>\n          post.id === variables.id ? { ...post, title: variables.title } : post\n        );\n      });\n\n      return { previousPosts };\n    },\n    onError: (err, variables, context) => {\n      if (context?.previousPosts) {\n        queryClient.setQueryData([\"posts\"], context.previousPosts);\n      }\n    },\n    onSettled: () => {\n      queryClient.invalidateQueries({ queryKey: [\"posts\"] });\n    },\n  });\n};\n```",
              "include": true
            },
            "option4": {
              "content": "## Hooks with File Upload\n\n**When to use**: When Supabase storage is enabled\n\n**Example**:\n```typescript\n\"use client\";\n\nimport { useMutation } from \"@tanstack/react-query\";\nimport { toast } from \"sonner\";\nimport { Toast } from \"../(components)/Toast\";\nimport { uploadFileAction } from \"./upload.actions\";\n\nexport const useUploadFile = () => {\n  return useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append(\"file\", file);\n      formData.append(\"bucket\", \"uploads\");\n      formData.append(\"path\", `${Date.now()}-${file.name}`);\n\n      const { data, error } = await uploadFileAction(formData);\n      if (error) throw error;\n      return data;\n    },\n    onSuccess: () => {\n      toast.custom(() => (\n        <Toast\n          variant=\"success\"\n          title=\"Success\"\n          message=\"File uploaded successfully\"\n        />\n      ));\n    },\n    onError: (error: Error) => {\n      toast.custom(() => (\n        <Toast\n          variant=\"error\"\n          title=\"Upload Failed\"\n          message={error.message || \"Failed to upload file\"}\n        />\n      ));\n    },\n  });\n};\n```",
              "include": true
            },
            "option5": {
              "content": "## Hooks with Real-time Subscriptions (Supabase)\n\n**When to use**: When using Supabase for real-time data\n\n**Example**:\n```typescript\n\"use client\";\n\nimport { createClient } from \"@/lib/supabase/client\";\nimport { useEffect, useState } from \"react\";\n\nexport const useRealtimeMessages = (channelId: string) => {\n  const [messages, setMessages] = useState<any[]>([]);\n  const supabase = createClient();\n\n  useEffect(() => {\n    const channel = supabase\n      .channel(`messages:${channelId}`)\n      .on(\n        \"postgres_changes\",\n        {\n          event: \"INSERT\",\n          schema: \"public\",\n          table: \"messages\",\n          filter: `channel_id=eq.${channelId}`,\n        },\n        (payload) => {\n          setMessages((current) => [...current, payload.new]);\n        }\n      )\n      .subscribe();\n\n    return () => {\n      supabase.removeChannel(channel);\n    };\n  }, [channelId, supabase]);\n\n  return messages;\n};\n```",
              "include": true
            }
          },
          "section5": {
            "option1": {
              "content": "## prisma-rls.ts (Row Level Security)\n\n**When to use**: When using Supabase with Prisma and RLS enabled\n\n**File**: `lib/prisma-rls.ts`\n\n```typescript\nimport { Prisma } from \"@prisma/client\";\nimport { prisma } from \"./prisma\";\n\nfunction forUser(userId: string, tenantId?: string) {\n  return Prisma.defineExtension((prisma) =>\n    prisma.$extends({\n      query: {\n        $allModels: {\n          async $allOperations({ args, query }) {\n            if (tenantId) {\n              const [, , result] = await prisma.$transaction([\n                prisma.$executeRaw`SELECT set_config('app.current_user_id', ${userId}, TRUE)`,\n                prisma.$executeRaw`SELECT set_config('app.current_tenant_id', ${tenantId}, TRUE)`,\n                query(args),\n              ]);\n              return result;\n            } else {\n              const [, result] = await prisma.$transaction([\n                prisma.$executeRaw`SELECT set_config('app.current_user_id', ${userId}, TRUE)`,\n                query(args),\n              ]);\n              return result;\n            }\n          },\n        },\n      },\n    })\n  );\n}\n\nexport function createRLSClient(userId: string, tenantId?: string) {\n  return prisma.$extends(forUser(userId, tenantId));\n}\n```",
              "include": true
            },
            "option2": {
              "content": "## auth.utils.ts (Better-Auth Utilities)\n\n**When to use**: When using Better-Auth for authentication\n\n**File**: `lib/auth.utils.ts`\n\n```typescript\nimport { User } from \"better-auth\";\nimport jwt from \"jsonwebtoken\";\nimport { headers } from \"next/headers\";\nimport { auth, Session } from \"./auth\";\nimport { createRLSClient } from \"./prisma-rls\";\n\nexport async function getAuthenticatedClient(user?: User): Promise<{\n  db: ReturnType<typeof createRLSClient>;\n  session: Session | null;\n}> {\n  const headersList = await headers();\n\n  const session = await auth.api.getSession({\n    headers: headersList,\n  });\n\n  const userId = user?.id || session?.user.id;\n\n  if (!userId) {\n    throw new Error(\"Unauthorized\");\n  }\n\n  const db = createRLSClient(userId);\n\n  return { db, session };\n}\n\nexport function generateSupabaseJWT(userId: string, userRole: string): string {\n  const jwtSecret = process.env.SUPABASE_JWT_SECRET;\n\n  if (!jwtSecret) {\n    throw new Error(\"SUPABASE_JWT_SECRET is required for JWT generation\");\n  }\n\n  const payload = {\n    aud: \"authenticated\",\n    exp: Math.floor(Date.now() / 1000) + 60 * 60,\n    sub: userId,\n    email: `${userId}@better-auth.local`,\n    role: \"authenticated\",\n    user_metadata: {\n      better_auth_user_id: userId,\n      better_auth_role: userRole,\n    },\n    app_metadata: {\n      provider: \"better-auth\",\n      providers: [\"better-auth\"],\n    },\n  };\n\n  return jwt.sign(payload, jwtSecret, {\n    algorithm: \"HS256\",\n  });\n}\n```",
              "include": true
            },
            "option3": {
              "content": "## storage.utils.ts (Supabase Storage)\n\n**When to use**: When Supabase storage is enabled\n\n**File**: `lib/storage.utils.ts`\n\n```typescript\nimport { createClient } from \"@/lib/supabase/server\";\n\nexport async function uploadFile(\n  file: File,\n  bucket: string,\n  path: string\n): Promise<{ url: string; path: string }> {\n  const supabase = createClient();\n\n  const { data, error } = await supabase.storage.from(bucket).upload(path, file);\n\n  if (error) throw error;\n\n  const { data: urlData } = supabase.storage.from(bucket).getPublicUrl(path);\n\n  return {\n    url: urlData.publicUrl,\n    path: data.path,\n  };\n}\n\nexport async function deleteFile(bucket: string, path: string): Promise<void> {\n  const supabase = createClient();\n\n  const { error } = await supabase.storage.from(bucket).remove([path]);\n\n  if (error) throw error;\n}\n\nexport async function getPublicUrl(bucket: string, path: string): string {\n  const supabase = createClient();\n\n  const { data } = supabase.storage.from(bucket).getPublicUrl(path);\n\n  return data.publicUrl;\n}\n```",
              "include": true
            },
            "option4": {
              "content": "## payment.utils.ts (Stripe/PayPal)\n\n**When to use**: When Stripe or PayPal is enabled\n\n**File**: `lib/payment.utils.ts`\n\n**Stripe utilities**:\n```typescript\nimport Stripe from \"stripe\";\n\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\n  apiVersion: \"2024-10-28.acacia\",\n});\n\nexport async function createCustomer(email: string, name?: string) {\n  return await stripe.customers.create({\n    email,\n    name,\n  });\n}\n\nexport async function createPaymentIntent(\n  amount: number,\n  currency: string,\n  customerId?: string\n) {\n  return await stripe.paymentIntents.create({\n    amount,\n    currency,\n    customer: customerId,\n  });\n}\n\nexport async function createSubscription(\n  customerId: string,\n  priceId: string\n) {\n  return await stripe.subscriptions.create({\n    customer: customerId,\n    items: [{ price: priceId }],\n  });\n}\n\nexport async function cancelSubscription(subscriptionId: string) {\n  return await stripe.subscriptions.cancel(subscriptionId);\n}\n```",
              "include": true
            },
            "option5": {
              "content": "## ai.utils.ts (OpenRouter Integration)\n\n**When to use**: When OpenRouter AI is enabled\n\n**File**: `lib/ai.utils.ts`\n\n```typescript\nimport OpenAI from \"openai\";\n\nconst openai = new OpenAI({\n  baseURL: \"https://openrouter.ai/api/v1\",\n  apiKey: process.env.OPENROUTER_API_KEY,\n});\n\nexport async function generateText(\n  prompt: string,\n  model: string = \"anthropic/claude-3.5-sonnet\"\n): Promise<string> {\n  const completion = await openai.chat.completions.create({\n    model,\n    messages: [{ role: \"user\", content: prompt }],\n  });\n\n  return completion.choices[0]?.message?.content || \"\";\n}\n\nexport async function generateImage(\n  prompt: string,\n  size: \"1024x1024\" | \"1792x1024\" | \"1024x1792\" = \"1024x1024\"\n): Promise<string> {\n  const response = await openai.images.generate({\n    model: \"dall-e-3\",\n    prompt,\n    size,\n    n: 1,\n  });\n\n  return response.data[0]?.url || \"\";\n}\n\nexport async function streamText(\n  prompt: string,\n  model: string = \"anthropic/claude-3.5-sonnet\",\n  onChunk: (chunk: string) => void\n): Promise<void> {\n  const stream = await openai.chat.completions.create({\n    model,\n    messages: [{ role: \"user\", content: prompt }],\n    stream: true,\n  });\n\n  for await (const chunk of stream) {\n    const content = chunk.choices[0]?.delta?.content || \"\";\n    if (content) {\n      onChunk(content);\n    }\n  }\n}\n```",
              "include": true
            },
            "option6": {
              "content": "## log.utils.ts (Logging Utility)\n\n**When to use**: All projects\n\n**File**: `lib/log.utils.ts`\n\n```typescript\nexport enum LOG_LABELS {\n  GENERATE = \"generate\",\n  API = \"api\",\n  AUTH = \"auth\",\n  DB = \"db\",\n  FETCH = \"fetch\",\n  RATE_LIMIT = \"rate-limit\",\n  IMAGE = \"image\",\n  WIDGET = \"widget\",\n}\n\ninterface ConditionalLogOptions {\n  maxStringLength?: number;\n  label: LOG_LABELS | string;\n}\n\nexport function conditionalLog(\n  data: unknown,\n  options: ConditionalLogOptions\n): string | null {\n  const { maxStringLength = 200, label } = options;\n\n  const logLabels = process.env.NEXT_PUBLIC_LOG_LABELS;\n\n  if (!logLabels || logLabels === \"none\") {\n    return null;\n  }\n\n  if (logLabels !== \"all\") {\n    const allowedLabels = logLabels.split(\",\").map((l) => l.trim());\n    if (!allowedLabels.includes(label)) {\n      return null;\n    }\n  }\n\n  try {\n    const processedData = deepStringify(data, maxStringLength, new WeakSet());\n    const result = JSON.stringify(processedData);\n    return result.replace(/\\s+/g, \"\");\n  } catch (error) {\n    return JSON.stringify({ error: \"Failed to stringify data\", label });\n  }\n}\n\nfunction deepStringify(\n  value: unknown,\n  maxLength: number,\n  seen: WeakSet<object>\n): unknown {\n  if (value === null || value === undefined) {\n    return value;\n  }\n\n  if (typeof value === \"string\") {\n    return truncateString(value, maxLength);\n  }\n\n  if (typeof value === \"number\" || typeof value === \"boolean\") {\n    return value;\n  }\n\n  if (value instanceof Date) {\n    return value.toISOString();\n  }\n\n  if (value instanceof Error) {\n    return {\n      name: value.name,\n      message: truncateString(value.message, maxLength),\n      stack: value.stack ? truncateString(value.stack, maxLength) : undefined,\n    };\n  }\n\n  if (typeof value === \"object\") {\n    if (seen.has(value)) {\n      return \"[Circular Reference]\";\n    }\n\n    seen.add(value);\n\n    if (Array.isArray(value)) {\n      const result = value.map((item) => deepStringify(item, maxLength, seen));\n      seen.delete(value);\n      return result;\n    }\n\n    const result: Record<string, unknown> = {};\n    for (const [key, val] of Object.entries(value)) {\n      result[key] = deepStringify(val, maxLength, seen);\n    }\n    seen.delete(value);\n    return result;\n  }\n\n  return String(value);\n}\n\nfunction truncateString(str: string, maxLength: number): string {\n  if (str.length <= maxLength) {\n    return str;\n  }\n\n  const startLength = Math.floor((maxLength - 3) / 2);\n  const endLength = maxLength - 3 - startLength;\n\n  return str.slice(0, startLength) + \"...\" + str.slice(-endLength);\n}\n```",
              "include": true
            },
            "option7": {
              "content": "## action.utils.ts (Server Action Response Helper)\n\n**When to use**: All projects with server actions\n\n**File**: `lib/action.utils.ts`\n\n```typescript\nexport interface ActionResponse<T = unknown> {\n  data?: T;\n  error?: string;\n}\n\nexport function getActionResponse<T = unknown>({\n  data,\n  error,\n}: {\n  data?: T;\n  error?: unknown;\n} = {}): ActionResponse<T> {\n  if (error) {\n    const errorMessage =\n      error instanceof Error ? error.message : String(error);\n    return { error: errorMessage };\n  }\n\n  return { data };\n}\n```",
              "include": true
            }
          }
        },
        "include": true
      },
      {
        "id": "start-here",
        "name": "start-here",
        "displayName": "Start here",
        "type": "directory",
        "path": "start-here",
        "urlPath": "/start-here",
        "include": true,
        "children": [
          {
            "id": "start-here.tech-stack",
            "name": "tech-stack",
            "displayName": "Tech Stack",
            "type": "file",
            "order": 1,
            "path": "start-here.tech-stack",
            "urlPath": "/start-here/tech-stack",
            "content": "# {{appName:Your app name}} development roadmap\n\nWelcome to the development roadmap for {{appName:Your app name}}!\n\nThis collection of documents provides comprehensive instructions for creating a custom full-stack web application.\n\n## Technology stack\n\n{{appName:Your app name}} is a progressive web app built with the technologies outlined below. Start by installing these technologies using their \\`npm install\\` commands.\n\n<!-- component-InitialConfiguration -->\n",
            "components": [
              {
                "id": "component-InitialConfiguration",
                "name": "InitialConfiguration",
                "displayName": "InitialConfiguration",
                "type": "component",
                "path": "tech-stack.component.InitialConfiguration",
                "urlPath": "",
                "componentId": "InitialConfiguration",
                "include": true
              }
            ],
            "sections": {},
            "include": true
          },
          {
            "id": "start-here.theme",
            "name": "theme",
            "displayName": "Theme",
            "type": "file",
            "order": 2,
            "path": "start-here.theme",
            "urlPath": "/start-here/theme",
            "content": "# Theme configuration\n\nAdd the css below to your \\`styles/global.css\\` file and import the components from \\`components/ui\\` to apply your theme.\n\n<!-- component-ThemeConfiguration -->\n",
            "components": [
              {
                "id": "component-ThemeConfiguration",
                "name": "ThemeConfiguration",
                "displayName": "ThemeConfiguration",
                "type": "component",
                "path": "theme.component.ThemeConfiguration",
                "urlPath": "",
                "componentId": "ThemeConfiguration",
                "include": true
              }
            ],
            "sections": {},
            "include": true
          },
          {
            "id": "start-here.layout-routes",
            "name": "layout-routes",
            "displayName": "Layout & routes",
            "type": "file",
            "order": 3,
            "path": "start-here.layout-routes",
            "urlPath": "/start-here/layout-routes",
            "content": "# Layout wire frame and route structure\n\nCreate page and layout files within the nested directory structure outlined below to implement your app's route and layout structure\n\n<!-- component-LayoutAndStructure -->\n",
            "components": [
              {
                "id": "component-LayoutAndStructure",
                "name": "LayoutAndStructure",
                "displayName": "LayoutAndStructure",
                "type": "component",
                "path": "layout-routes.component.LayoutAndStructure",
                "urlPath": "",
                "componentId": "LayoutAndStructure",
                "include": true
              }
            ],
            "sections": {},
            "include": true
          },
          {
            "id": "start-here.database",
            "name": "database",
            "displayName": "Database",
            "type": "file",
            "order": 4,
            "path": "start-here.database",
            "urlPath": "/start-here/database",
            "content": "---\n---\n\n# Database\n\nDefine your schema, client files and Row Level Security to configure your database.\n\n<!-- component-DatabaseConfiguration -->\n",
            "components": [
              {
                "id": "component-DatabaseConfiguration",
                "name": "DatabaseConfiguration",
                "displayName": "DatabaseConfiguration",
                "type": "component",
                "path": "database.component.DatabaseConfiguration",
                "urlPath": "",
                "componentId": "DatabaseConfiguration",
                "include": true
              }
            ],
            "sections": {},
            "include": true
          },
          {
            "id": "start-here.tests",
            "name": "tests",
            "displayName": "Tests",
            "type": "file",
            "order": 5,
            "path": "start-here.tests",
            "urlPath": "/start-here/tests",
            "content": "# Tests\n\nDescribe the expected behaviour of your app verify the functionality and stress-test the security.\n\n<!-- component-Tests -->\n",
            "components": [
              {
                "id": "component-Tests",
                "name": "Tests",
                "displayName": "Tests",
                "type": "component",
                "path": "tests.component.Tests",
                "urlPath": "",
                "componentId": "Tests",
                "include": true
              }
            ],
            "sections": {},
            "include": true
          },
          {
            "id": "start-here.next-steps",
            "name": "next-steps",
            "displayName": "Next Steps",
            "type": "file",
            "order": 6,
            "path": "start-here.next-steps",
            "urlPath": "/start-here/next-steps",
            "content": "# Next steps\n\n1. Download your Roadmap\n2. Run \\`npx create-next-app@latest\\` to create your project repository.\n3. Paste your Roadmap into your project repository.\n4. Refer your AI to the \\`ROBOT_README.md\\` file\n5. Start building!\n",
            "components": [],
            "sections": {},
            "include": true
          }
        ]
      },
      {
        "id": "components",
        "name": "components",
        "displayName": "components",
        "type": "directory",
        "path": "components",
        "urlPath": "/components",
        "include": true,
        "previewOnly": true,
        "includeInToolbar": false,
        "visibleAfterPage": "start-here.theme",
        "children": [
          {
            "id": "components.ui",
            "name": "ui",
            "displayName": "ui",
            "type": "directory",
            "path": "components.ui",
            "urlPath": "/components/ui",
            "include": true,
            "previewOnly": true,
            "includeInToolbar": false,
            "children": [
              {
                "id": "components.ui.accordion",
                "name": "accordion",
                "displayName": "accordion",
                "type": "file",
                "path": "components.ui.accordion",
                "urlPath": "/components/ui/accordion",
                "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b border-border\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline text-left [&[data-state=open]>svg]:rotate-180 font-sans tracking\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-5 w-5 shrink-0 transition-transform duration-200 text-muted-foreground\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down font-sans tracking\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n",
                "components": [],
                "sections": {},
                "include": true,
                "previewOnly": true,
                "includeInToolbar": false,
                "fileExtension": "tsx"
              },
              {
                "id": "components.ui.alert-dialog",
                "name": "alert-dialog",
                "displayName": "alert-dialog",
                "type": "file",
                "path": "components.ui.alert-dialog",
                "urlPath": "/components/ui/alert-dialog",
                "content": "\"use client\";\n\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\";\nimport * as React from \"react\";\n\nimport { buttonVariants } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\n\nconst AlertDialog = AlertDialogPrimitive.Root;\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger;\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal;\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n));\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName;\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border p-6 duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] bg-card text-card-foreground border-border shadow radius\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n));\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName;\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n);\nAlertDialogHeader.displayName = \"AlertDialogHeader\";\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n);\nAlertDialogFooter.displayName = \"AlertDialogFooter\";\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold font-sans tracking\", className)}\n    {...props}\n  />\n));\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName;\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\n      \"text-sm text-muted-foreground font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n));\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName;\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n));\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName;\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n));\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName;\n\nexport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogOverlay,\n  AlertDialogPortal,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n};\n",
                "components": [],
                "sections": {},
                "include": true,
                "previewOnly": true,
                "includeInToolbar": false,
                "fileExtension": "tsx"
              },
              {
                "id": "components.ui.alert",
                "name": "alert",
                "displayName": "alert",
                "type": "file",
                "path": "components.ui.alert",
                "urlPath": "/components/ui/alert",
                "content": "import { cva, type VariantProps } from \"class-variance-authority\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst alertVariants = cva(\n  \"relative w-full border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg~*]:pl-7 radius shadow font-sans tracking\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground border-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n);\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      role=\"alert\"\n      className={cn(alertVariants({ variant }), className)}\n      {...props}\n    />\n  );\n});\nAlert.displayName = \"Alert\";\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\n      \"mb-1 font-medium leading-none tracking-tight font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n));\nAlertTitle.displayName = \"AlertTitle\";\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-sm [&_p]:leading-relaxed font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n));\nAlertDescription.displayName = \"AlertDescription\";\n\nexport { Alert, AlertDescription, AlertTitle };\n",
                "components": [],
                "sections": {},
                "include": true,
                "previewOnly": true,
                "includeInToolbar": false,
                "fileExtension": "tsx"
              },
              {
                "id": "components.ui.aspect-ratio",
                "name": "aspect-ratio",
                "displayName": "aspect-ratio",
                "type": "file",
                "path": "components.ui.aspect-ratio",
                "urlPath": "/components/ui/aspect-ratio",
                "content": "\"use client\"\n\nimport * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n",
                "components": [],
                "sections": {},
                "include": true,
                "previewOnly": true,
                "includeInToolbar": false,
                "fileExtension": "tsx"
              },
              {
                "id": "components.ui.avatar",
                "name": "avatar",
                "displayName": "avatar",
                "type": "file",
                "path": "components.ui.avatar",
                "urlPath": "/components/ui/avatar",
                "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted text-muted-foreground font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n",
                "components": [],
                "sections": {},
                "include": true,
                "previewOnly": true,
                "includeInToolbar": false,
                "fileExtension": "tsx"
              },
              {
                "id": "components.ui.badge",
                "name": "badge",
                "displayName": "badge",
                "type": "file",
                "path": "components.ui.badge",
                "urlPath": "/components/ui/badge",
                "content": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 radius border-ring font-sans tracking\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow hover:opacity-80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:opacity-80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow hover:opacity-80\",\n        outline: \"text-foreground border-border\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n",
                "components": [],
                "sections": {},
                "include": true,
                "previewOnly": true,
                "includeInToolbar": false,
                "fileExtension": "tsx"
              },
              {
                "id": "components.ui.breadcrumb",
                "name": "breadcrumb",
                "displayName": "breadcrumb",
                "type": "file",
                "path": "components.ui.breadcrumb",
                "urlPath": "/components/ui/breadcrumb",
                "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5 font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground font-sans tracking\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground font-sans tracking\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n",
                "components": [],
                "sections": {},
                "include": true,
                "previewOnly": true,
                "includeInToolbar": false,
                "fileExtension": "tsx"
              },
              {
                "id": "components.ui.button",
                "name": "button",
                "displayName": "button",
                "type": "file",
                "path": "components.ui.button",
                "urlPath": "/components/ui/button",
                "content": "import { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 radius font-sans tracking\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-2 bg-primary text-primary-foreground border-primary shadow hover:opacity-90\",\n        destructive:\n          \"border-2 bg-destructive text-destructive-foreground border-destructive shadow hover:opacity-90\",\n        outline:\n          \"border-2 border-input bg-background text-foreground shadow hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"border-2 bg-secondary text-secondary-foreground border-secondary shadow hover:opacity-80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 px-3 text-xs\",\n        lg: \"h-10 px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size }), className)}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n",
                "components": [],
                "sections": {},
                "include": true,
                "previewOnly": true,
                "includeInToolbar": false,
                "fileExtension": "tsx"
              },
              {
                "id": "components.ui.calendar",
                "name": "calendar",
                "displayName": "calendar",
                "type": "file",
                "path": "components.ui.calendar",
                "urlPath": "/components/ui/calendar",
                "content": "\"use client\"\n\nimport * as React from \"react\"\nimport {\n  ChevronDownIcon,\n  ChevronLeftIcon,\n  ChevronRightIcon,\n} from \"lucide-react\"\nimport { DayButton, DayPicker, getDefaultClassNames } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button, buttonVariants } from \"@/components/ui/button\"\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  captionLayout = \"label\",\n  buttonVariant = \"ghost\",\n  formatters,\n  components,\n  ...props\n}: React.ComponentProps<typeof DayPicker> & {\n  buttonVariant?: React.ComponentProps<typeof Button>[\"variant\"]\n}) {\n  const defaultClassNames = getDefaultClassNames()\n\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\n        \"group/calendar [--cell-size:calc(var(--spacing)*9)] [[data-slot=card-content]_&]:bg-transparent [[data-slot=popover-content]_&]:bg-transparent\",\n        String.raw\\`rtl:**:[.rdp-button\\\\_next>svg]:rotate-180\\`,\n        String.raw\\`rtl:**:[.rdp-button\\\\_previous>svg]:rotate-180\\`,\n        className\n      )}\n      captionLayout={captionLayout}\n      formatters={{\n        formatMonthDropdown: (date) =>\n          date.toLocaleString(\"default\", { month: \"short\" }),\n        ...formatters,\n      }}\n      classNames={{\n        root: cn(\"w-fit\", defaultClassNames.root),\n        months: cn(\n          \"relative flex flex-col gap-4 md:flex-row\",\n          defaultClassNames.months\n        ),\n        month: cn(\"flex w-full flex-col gap-4\", defaultClassNames.month),\n        nav: cn(\n          \"absolute inset-x-0 top-0 flex w-full items-center justify-between gap-1\",\n          defaultClassNames.nav\n        ),\n        button_previous: cn(\n          buttonVariants({ variant: buttonVariant }),\n          \"h-[--cell-size] w-[--cell-size] select-none p-0 aria-disabled:opacity-50\",\n          defaultClassNames.button_previous\n        ),\n        button_next: cn(\n          buttonVariants({ variant: buttonVariant }),\n          \"h-[--cell-size] w-[--cell-size] select-none p-0 aria-disabled:opacity-50\",\n          defaultClassNames.button_next\n        ),\n        month_caption: cn(\n          \"flex h-[--cell-size] w-full items-center justify-center px-[--cell-size]\",\n          defaultClassNames.month_caption\n        ),\n        dropdowns: cn(\n          \"flex h-[--cell-size] w-full items-center justify-center gap-1.5 text-sm font-medium font-sans tracking\",\n          defaultClassNames.dropdowns\n        ),\n        dropdown_root: cn(\n          \"has-focus:border-ring border-input shadow-xs has-focus:focus-ring-color/50 has-focus:ring-[3px] relative rounded-md border\",\n          defaultClassNames.dropdown_root\n        ),\n        dropdown: cn(\n          \"bg-popover absolute inset-0 opacity-0\",\n          defaultClassNames.dropdown\n        ),\n        caption_label: cn(\n          \"select-none font-medium font-sans tracking\",\n          captionLayout === \"label\"\n            ? \"text-sm\"\n            : \"[&>svg]:text-muted-foreground flex h-8 items-center gap-1 rounded-md pl-2 pr-1 text-sm [&>svg]:size-3.5\",\n          defaultClassNames.caption_label\n        ),\n        table: \"w-full border-collapse\",\n        weekdays: cn(\"flex\", defaultClassNames.weekdays),\n        weekday: cn(\n          \"text-muted-foreground flex-1 select-none rounded-md text-[0.8rem] font-normal font-sans tracking\",\n          defaultClassNames.weekday\n        ),\n        week: cn(\"mt-2 flex w-full\", defaultClassNames.week),\n        week_number_header: cn(\n          \"w-[--cell-size] select-none\",\n          defaultClassNames.week_number_header\n        ),\n        week_number: cn(\n          \"text-muted-foreground select-none text-[0.8rem] font-sans tracking\",\n          defaultClassNames.week_number\n        ),\n        day: cn(\n          \"group/day relative aspect-square h-full w-full select-none p-0 text-center [&:first-child[data-selected=true]_button]:rounded-l-md [&:last-child[data-selected=true]_button]:rounded-r-md\",\n          defaultClassNames.day\n        ),\n        range_start: cn(\n          \"bg-accent rounded-l-md\",\n          defaultClassNames.range_start\n        ),\n        range_middle: cn(\"rounded-none\", defaultClassNames.range_middle),\n        range_end: cn(\"bg-accent rounded-r-md\", defaultClassNames.range_end),\n        today: cn(\n          \"bg-accent text-accent-foreground rounded-md data-[selected=true]:rounded-none\",\n          defaultClassNames.today\n        ),\n        outside: cn(\n          \"text-muted-foreground aria-selected:text-muted-foreground\",\n          defaultClassNames.outside\n        ),\n        disabled: cn(\n          \"text-muted-foreground opacity-50\",\n          defaultClassNames.disabled\n        ),\n        hidden: cn(\"invisible\", defaultClassNames.hidden),\n        ...classNames,\n      }}\n      components={{\n        Root: ({ className, rootRef, ...props }) => {\n          return (\n            <div\n              data-slot=\"calendar\"\n              ref={rootRef}\n              className={cn(className)}\n              {...props}\n            />\n          )\n        },\n        Chevron: ({ className, orientation, ...props }) => {\n          if (orientation === \"left\") {\n            return (\n              <ChevronLeftIcon className={cn(\"size-4\", className)} {...props} />\n            )\n          }\n\n          if (orientation === \"right\") {\n            return (\n              <ChevronRightIcon\n                className={cn(\"size-4\", className)}\n                {...props}\n              />\n            )\n          }\n\n          return (\n            <ChevronDownIcon className={cn(\"size-4\", className)} {...props} />\n          )\n        },\n        DayButton: CalendarDayButton,\n        WeekNumber: ({ children, ...props }) => {\n          return (\n            <td {...props}>\n              <div className=\"flex size-[--cell-size] items-center justify-center text-center\">\n                {children}\n              </div>\n            </td>\n          )\n        },\n        ...components,\n      }}\n      {...props}\n    />\n  )\n}\n\nfunction CalendarDayButton({\n  className,\n  day,\n  modifiers,\n  ...props\n}: React.ComponentProps<typeof DayButton>) {\n  const defaultClassNames = getDefaultClassNames()\n\n  const ref = React.useRef<HTMLButtonElement>(null)\n  React.useEffect(() => {\n    if (modifiers.focused) ref.current?.focus()\n  }, [modifiers.focused])\n\n  return (\n    <Button\n      ref={ref}\n      variant=\"ghost\"\n      size=\"icon\"\n      data-day={day.date.toLocaleDateString()}\n      data-selected-single={\n        modifiers.selected &&\n        !modifiers.range_start &&\n        !modifiers.range_end &&\n        !modifiers.range_middle\n      }\n      data-range-start={modifiers.range_start}\n      data-range-end={modifiers.range_end}\n      data-range-middle={modifiers.range_middle}\n      className={cn(\n        \"data-selected-single-bg-primary data-selected-single-text-primary-foreground data-range-middle-bg-accent data-range-middle-text-accent-foreground data-range-start-bg-primary data-range-start-text-primary-foreground data-range-end-bg-primary data-range-end-text-primary-foreground group-data-[focused=true]/day:border-ring group-data-[focused=true]/day:focus-ring-color/50 flex aspect-square h-auto w-full min-w-[--cell-size] flex-col gap-1 font-normal leading-none data-[range-end=true]:rounded-md data-[range-middle=true]:rounded-none data-[range-start=true]:rounded-md group-data-[focused=true]/day:relative group-data-[focused=true]/day:z-10 group-data-[focused=true]/day:ring-[3px] [&>span]:text-xs [&>span]:opacity-70 font-sans tracking\",\n        defaultClassNames.day,\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Calendar, CalendarDayButton }\n",
                "components": [],
                "sections": {},
                "include": true,
                "previewOnly": true,
                "includeInToolbar": false,
                "fileExtension": "tsx"
              },
              {
                "id": "components.ui.card",
                "name": "card",
                "displayName": "card",
                "type": "file",
                "path": "components.ui.card",
                "urlPath": "/components/ui/card",
                "content": "import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"border radius bg-card text-card-foreground border-border shadow\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\";\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex !rounded flex-col gap-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\";\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight font-sans tracking\", className)}\n    {...props}\n  />\n));\nCardTitle.displayName = \"CardTitle\";\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground font-sans tracking\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\";\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n));\nCardContent.displayName = \"CardContent\";\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n));\nCardFooter.displayName = \"CardFooter\";\n\nexport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n};\n",
                "components": [],
                "sections": {},
                "include": true,
                "previewOnly": true,
                "includeInToolbar": false,
                "fileExtension": "tsx"
              },
              {
                "id": "components.ui.checkbox",
                "name": "checkbox",
                "displayName": "checkbox",
                "type": "file",
                "path": "components.ui.checkbox",
                "urlPath": "/components/ui/checkbox",
                "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 border border-primary radius shadow focus-visible:outline-none focus-visible:ring-1 border-ring disabled:cursor-not-allowed disabled:opacity-50 data-checked-bg-primary data-checked-text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n",
                "components": [],
                "sections": {},
                "include": true,
                "previewOnly": true,
                "includeInToolbar": false,
                "fileExtension": "tsx"
              },
              {
                "id": "components.ui.collapsible",
                "name": "collapsible",
                "displayName": "collapsible",
                "type": "file",
                "path": "components.ui.collapsible",
                "urlPath": "/components/ui/collapsible",
                "content": "\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n",
                "components": [],
                "sections": {},
                "include": true,
                "previewOnly": true,
                "includeInToolbar": false,
                "fileExtension": "tsx"
              },
              {
                "id": "components.ui.context-menu",
                "name": "context-menu",
                "displayName": "context-menu",
                "type": "file",
                "path": "components.ui.context-menu",
                "urlPath": "/components/ui/context-menu",
                "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center radius px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground font-sans tracking\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden radius border bg-popover p-1 text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin] border-border font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden radius border bg-popover p-1 text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin] border-border font-sans tracking\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center radius px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 font-sans tracking\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center radius py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 font-sans tracking\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center radius py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 font-sans tracking\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-4 w-4 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground font-sans tracking\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground font-sans\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n",
                "components": [],
                "sections": {},
                "include": true,
                "previewOnly": true,
                "includeInToolbar": false,
                "fileExtension": "tsx"
              },
              {
                "id": "components.ui.dialog",
                "name": "dialog",
                "displayName": "dialog",
                "type": "file",
                "path": "components.ui.dialog",
                "urlPath": "/components/ui/dialog",
                "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border p-6 duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] bg-card text-card-foreground border-border shadow radius\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 opacity-70 transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 border-ring focus:ring-offset-2 disabled:pointer-events-none radius text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground font-sans tracking\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogTrigger,\n  DialogClose,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n",
                "components": [],
                "sections": {},
                "include": true,
                "previewOnly": true,
                "includeInToolbar": false,
                "fileExtension": "tsx"
              },
              {
                "id": "components.ui.drawer",
                "name": "drawer",
                "displayName": "drawer",
                "type": "file",
                "path": "components.ui.drawer",
                "urlPath": "/components/ui/drawer",
                "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background border-border font-sans tracking\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground font-sans tracking\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n",
                "components": [],
                "sections": {},
                "include": true,
                "previewOnly": true,
                "includeInToolbar": false,
                "fileExtension": "tsx"
              },
              {
                "id": "components.ui.dropdown-menu",
                "name": "dropdown-menu",
                "displayName": "dropdown-menu",
                "type": "file",
                "path": "components.ui.dropdown-menu",
                "urlPath": "/components/ui/dropdown-menu",
                "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 radius px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 font-sans tracking\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden radius border bg-popover p-1 text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin] border-border font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden radius border bg-popover p-1 text-popover-foreground shadow border-border font-sans tracking\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 radius px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0 font-sans tracking\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center radius py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 font-sans tracking\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center radius py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 font-sans tracking\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold font-sans tracking\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60 font-sans\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n",
                "components": [],
                "sections": {},
                "include": true,
                "previewOnly": true,
                "includeInToolbar": false,
                "fileExtension": "tsx"
              },
              {
                "id": "components.ui.hover-card",
                "name": "hover-card",
                "displayName": "hover-card",
                "type": "file",
                "path": "components.ui.hover-card",
                "urlPath": "/components/ui/hover-card",
                "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 radius border bg-popover p-4 text-popover-foreground shadow outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin] border-border font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n",
                "components": [],
                "sections": {},
                "include": true,
                "previewOnly": true,
                "includeInToolbar": false,
                "fileExtension": "tsx"
              },
              {
                "id": "components.ui.input-otp",
                "name": "input-otp",
                "displayName": "input-otp",
                "type": "file",
                "path": "components.ui.input-otp",
                "urlPath": "/components/ui/input-otp",
                "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Minus } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-9 w-9 items-center justify-center border-y border-r border-input text-sm shadow transition-all first:rounded-l-md first:border-l last:rounded-r-md font-sans tracking\",\n        isActive && \"z-10 ring-1 border-ring\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Minus />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n",
                "components": [],
                "sections": {},
                "include": true,
                "previewOnly": true,
                "includeInToolbar": false,
                "fileExtension": "tsx"
              },
              {
                "id": "components.ui.input",
                "name": "input",
                "displayName": "input",
                "type": "file",
                "path": "components.ui.input",
                "urlPath": "/components/ui/input",
                "content": "import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full border-2 bg-transparent px-3 py-1 text-base transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium focus-visible:outline-none focus-visible:ring-1 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm border-input text-foreground shadow radius font-sans tracking\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nInput.displayName = \"Input\";\n\nexport { Input };\n",
                "components": [],
                "sections": {},
                "include": true,
                "previewOnly": true,
                "includeInToolbar": false,
                "fileExtension": "tsx"
              },
              {
                "id": "components.ui.label",
                "name": "label",
                "displayName": "label",
                "type": "file",
                "path": "components.ui.label",
                "urlPath": "/components/ui/label",
                "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 font-sans tracking\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n",
                "components": [],
                "sections": {},
                "include": true,
                "previewOnly": true,
                "includeInToolbar": false,
                "fileExtension": "tsx"
              },
              {
                "id": "components.ui.menubar",
                "name": "menubar",
                "displayName": "menubar",
                "type": "file",
                "path": "components.ui.menubar",
                "urlPath": "/components/ui/menubar",
                "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-9 items-center space-x-1 radius border bg-background p-1 shadow border-border font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center radius px-3 py-1 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center radius px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground font-sans tracking\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden radius border bg-popover p-1 text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin] border-border font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden radius border bg-popover p-1 text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin] border-border font-sans tracking\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center radius px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 font-sans tracking\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center radius py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 font-sans tracking\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center radius py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 font-sans tracking\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-4 w-4 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold font-sans tracking\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground font-sans\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n",
                "components": [],
                "sections": {},
                "include": true,
                "previewOnly": true,
                "includeInToolbar": false,
                "fileExtension": "tsx"
              },
              {
                "id": "components.ui.navigation-menu",
                "name": "navigation-menu",
                "displayName": "navigation-menu",
                "type": "file",
                "path": "components.ui.navigation-menu",
                "urlPath": "/components/ui/navigation-menu",
                "content": "import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-9 w-max items-center justify-center radius bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent font-sans tracking\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden radius border bg-popover text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)] border-border font-sans tracking\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n",
                "components": [],
                "sections": {},
                "include": true,
                "previewOnly": true,
                "includeInToolbar": false,
                "fileExtension": "tsx"
              },
              {
                "id": "components.ui.popover",
                "name": "popover",
                "displayName": "popover",
                "type": "file",
                "path": "components.ui.popover",
                "urlPath": "/components/ui/popover",
                "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverAnchor = PopoverPrimitive.Anchor\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 border p-4 outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin] bg-popover text-popover-foreground border-border shadow radius font-sans tracking\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }\n",
                "components": [],
                "sections": {},
                "include": true,
                "previewOnly": true,
                "includeInToolbar": false,
                "fileExtension": "tsx"
              },
              {
                "id": "components.ui.progress",
                "name": "progress",
                "displayName": "progress",
                "type": "file",
                "path": "components.ui.progress",
                "urlPath": "/components/ui/progress",
                "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-2 w-full overflow-hidden bg-secondary radius\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className={cn(\n        \"h-full w-full flex-1 transition-all bg-primary\",\n        \\`translate-x-[-\\${100 - (value || 0)}%]\\`\n      )}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n",
                "components": [],
                "sections": {},
                "include": true,
                "previewOnly": true,
                "includeInToolbar": false,
                "fileExtension": "tsx"
              },
              {
                "id": "components.ui.radio-group",
                "name": "radio-group",
                "displayName": "radio-group",
                "type": "file",
                "path": "components.ui.radio-group",
                "urlPath": "/components/ui/radio-group",
                "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border focus:outline-none focus-visible:ring-1 disabled:cursor-not-allowed disabled:opacity-50 border-primary text-primary shadow border-ring\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-3.5 w-3.5 fill-current text-primary\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n",
                "components": [],
                "sections": {},
                "include": true,
                "previewOnly": true,
                "includeInToolbar": false,
                "fileExtension": "tsx"
              },
              {
                "id": "components.ui.resizable",
                "name": "resizable",
                "displayName": "resizable",
                "type": "file",
                "path": "components.ui.resizable",
                "urlPath": "/components/ui/resizable",
                "content": "\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border border-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n",
                "components": [],
                "sections": {},
                "include": true,
                "previewOnly": true,
                "includeInToolbar": false,
                "fileExtension": "tsx"
              },
              {
                "id": "components.ui.scroll-area",
                "name": "scroll-area",
                "displayName": "scroll-area",
                "type": "file",
                "path": "components.ui.scroll-area",
                "urlPath": "/components/ui/scroll-area",
                "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n",
                "components": [],
                "sections": {},
                "include": true,
                "previewOnly": true,
                "includeInToolbar": false,
                "fileExtension": "tsx"
              },
              {
                "id": "components.ui.select",
                "name": "select",
                "displayName": "select",
                "type": "file",
                "path": "components.ui.select",
                "urlPath": "/components/ui/select",
                "content": "\"use client\";\n\nimport * as SelectPrimitive from \"@radix-ui/react-select\";\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Select = SelectPrimitive.Root;\n\nconst SelectGroup = SelectPrimitive.Group;\n\nconst SelectValue = SelectPrimitive.Value;\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between whitespace-nowrap border-2 bg-transparent px-3 py-2 text-sm focus:outline-none focus:ring-1 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1 border-input text-foreground shadow radius border-ring font-sans tracking\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n));\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName;\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n));\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName;\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n));\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName;\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden border data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin] bg-popover text-popover-foreground border-border shadow radius font-sans tracking\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n));\nSelectContent.displayName = SelectPrimitive.Content.displayName;\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n));\nSelectLabel.displayName = SelectPrimitive.Label.displayName;\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center py-1.5 pl-2 pr-8 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 radius focus:bg-accent focus:text-accent-foreground font-sans tracking\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute right-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n));\nSelectItem.displayName = SelectPrimitive.Item.displayName;\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n));\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName;\n\nexport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n};\n",
                "components": [],
                "sections": {},
                "include": true,
                "previewOnly": true,
                "includeInToolbar": false,
                "fileExtension": "tsx"
              },
              {
                "id": "components.ui.separator",
                "name": "separator",
                "displayName": "separator",
                "type": "file",
                "path": "components.ui.separator",
                "urlPath": "/components/ui/separator",
                "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n",
                "components": [],
                "sections": {},
                "include": true,
                "previewOnly": true,
                "includeInToolbar": false,
                "fileExtension": "tsx"
              },
              {
                "id": "components.ui.sheet",
                "name": "sheet",
                "displayName": "sheet",
                "type": "file",
                "path": "components.ui.sheet",
                "urlPath": "/components/ui/sheet",
                "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 p-6 transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out bg-card text-card-foreground shadow\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b border-border data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t border-border data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r border-border data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4 border-l border-border data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 opacity-70 transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 border-ring focus:ring-offset-2 disabled:pointer-events-none radius text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n      {children}\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground font-sans tracking\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground font-sans tracking\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n",
                "components": [],
                "sections": {},
                "include": true,
                "previewOnly": true,
                "includeInToolbar": false,
                "fileExtension": "tsx"
              },
              {
                "id": "components.ui.skeleton",
                "name": "skeleton",
                "displayName": "skeleton",
                "type": "file",
                "path": "components.ui.skeleton",
                "urlPath": "/components/ui/skeleton",
                "content": "import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse bg-muted radius\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n",
                "components": [],
                "sections": {},
                "include": true,
                "previewOnly": true,
                "includeInToolbar": false,
                "fileExtension": "tsx"
              },
              {
                "id": "components.ui.slider",
                "name": "slider",
                "displayName": "slider",
                "type": "file",
                "path": "components.ui.slider",
                "urlPath": "/components/ui/slider",
                "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-1.5 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-4 w-4 rounded-full border transition-colors focus-visible:outline-none focus-visible:ring-1 disabled:pointer-events-none disabled:opacity-50 bg-background border-primary shadow border-ring\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n",
                "components": [],
                "sections": {},
                "include": true,
                "previewOnly": true,
                "includeInToolbar": false,
                "fileExtension": "tsx"
              },
              {
                "id": "components.ui.sonner",
                "name": "sonner",
                "displayName": "sonner",
                "type": "file",
                "path": "components.ui.sonner",
                "urlPath": "/components/ui/sonner",
                "content": "\"use client\"\n\nimport { useTheme } from \"next-themes\"\nimport { Toaster as Sonner } from \"sonner\"\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow group-[.toaster]:font-sans group-[.toaster]:tracking\",\n          description: \"group-[.toast]:text-muted-foreground group-[.toast]:font-sans group-[.toast]:tracking\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground group-[.toast]:font-sans group-[.toast]:tracking\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground group-[.toast]:font-sans group-[.toast]:tracking\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster }\n",
                "components": [],
                "sections": {},
                "include": true,
                "previewOnly": true,
                "includeInToolbar": false,
                "fileExtension": "tsx"
              },
              {
                "id": "components.ui.switch",
                "name": "switch",
                "displayName": "switch",
                "type": "file",
                "path": "components.ui.switch",
                "urlPath": "/components/ui/switch",
                "content": "\"use client\";\n\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\ninterface SwitchProps\n  extends React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root> {\n  size?: \"default\" | \"lg\";\n}\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  SwitchProps\n>(({ className, size = \"default\", ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex shrink-0 cursor-pointer items-center border transition-colors disabled:cursor-not-allowed disabled:opacity-50 rounded-full data-checked-bg-primary data-unchecked-bg-input focus-ring border-primary\",\n      size === \"default\" ? \"h-5 w-9\" : \"h-6 w-11\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block ring-0 transition-transform rounded-full bg-background shadow border border-primary \",\n        size === \"default\"\n          ? \"h-4 w-4 data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0\"\n          : \"h-5 w-5 data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    ></SwitchPrimitives.Thumb>\n  </SwitchPrimitives.Root>\n));\nSwitch.displayName = SwitchPrimitives.Root.displayName;\n\nexport { Switch };\n",
                "components": [],
                "sections": {},
                "include": true,
                "previewOnly": true,
                "includeInToolbar": false,
                "fileExtension": "tsx"
              },
              {
                "id": "components.ui.table",
                "name": "table",
                "displayName": "table",
                "type": "file",
                "path": "components.ui.table",
                "urlPath": "/components/ui/table",
                "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm font-sans tracking\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b [&_tr]:border-border\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t font-medium [&>tr]:last:border-b-0 border-border bg-muted text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors border-border hover:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-10 px-2 text-left align-middle font-medium [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px] text-muted-foreground font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\n      \"p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px] font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground font-sans tracking\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n",
                "components": [],
                "sections": {},
                "include": true,
                "previewOnly": true,
                "includeInToolbar": false,
                "fileExtension": "tsx"
              },
              {
                "id": "components.ui.tabs",
                "name": "tabs",
                "displayName": "tabs",
                "type": "file",
                "path": "components.ui.tabs",
                "urlPath": "/components/ui/tabs",
                "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-9 items-center justify-center radius bg-muted p-1 text-muted-foreground font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap radius px-3 py-1 text-sm font-medium transition-all focus-visible:outline-none focus-visible:ring-ring focus-visible:ring-2 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 focus-visible:outline-none focus-visible:ring-ring focus-visible:ring-2 focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n",
                "components": [],
                "sections": {},
                "include": true,
                "previewOnly": true,
                "includeInToolbar": false,
                "fileExtension": "tsx"
              },
              {
                "id": "components.ui.textarea",
                "name": "textarea",
                "displayName": "textarea",
                "type": "file",
                "path": "components.ui.textarea",
                "urlPath": "/components/ui/textarea",
                "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[60px] w-full border-2 bg-transparent px-3 py-2 text-base focus-visible:outline-none focus-visible:ring-1 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm border-input text-foreground shadow radius border-ring font-sans tracking\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n",
                "components": [],
                "sections": {},
                "include": true,
                "previewOnly": true,
                "includeInToolbar": false,
                "fileExtension": "tsx"
              },
              {
                "id": "components.ui.toast",
                "name": "toast",
                "displayName": "toast",
                "type": "file",
                "path": "components.ui.toast",
                "urlPath": "/components/ui/toast",
                "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-2 overflow-hidden radius border p-4 pr-6 shadow transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full font-sans tracking\",\n  {\n    variants: {\n      variant: {\n        default: \"border-border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center radius border bg-transparent px-3 text-sm font-medium transition-colors hover:bg-secondary focus:outline-none focus:ring-1 border-ring disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-1 top-1 radius p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-1 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold [&+div]:text-xs font-sans tracking\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90 font-sans tracking\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n",
                "components": [],
                "sections": {},
                "include": true,
                "previewOnly": true,
                "includeInToolbar": false,
                "fileExtension": "tsx"
              },
              {
                "id": "components.ui.toaster",
                "name": "toaster",
                "displayName": "toaster",
                "type": "file",
                "path": "components.ui.toaster",
                "urlPath": "/components/ui/toaster",
                "content": "\"use client\";\n\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport function Toaster() {\n  const { toasts } = useToast();\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        );\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  );\n}\n",
                "components": [],
                "sections": {},
                "include": true,
                "previewOnly": true,
                "includeInToolbar": false,
                "fileExtension": "tsx"
              },
              {
                "id": "components.ui.toggle",
                "name": "toggle",
                "displayName": "toggle",
                "type": "file",
                "path": "components.ui.toggle",
                "urlPath": "/components/ui/toggle",
                "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center gap-2 radius text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 font-sans tracking\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent shadow hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-9 px-2 min-w-9\",\n        sm: \"h-8 px-1.5 min-w-8\",\n        lg: \"h-10 px-2.5 min-w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n",
                "components": [],
                "sections": {},
                "include": true,
                "previewOnly": true,
                "includeInToolbar": false,
                "fileExtension": "tsx"
              },
              {
                "id": "components.ui.tooltip",
                "name": "tooltip",
                "displayName": "tooltip",
                "type": "file",
                "path": "components.ui.tooltip",
                "urlPath": "/components/ui/tooltip",
                "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Portal>\n    <TooltipPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 overflow-hidden px-3 py-1.5 text-xs animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin] bg-popover text-popover-foreground border-border radius shadow font-sans tracking\",\n        className\n      )}\n      {...props}\n    />\n  </TooltipPrimitive.Portal>\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n",
                "components": [],
                "sections": {},
                "include": true,
                "previewOnly": true,
                "includeInToolbar": false,
                "fileExtension": "tsx"
              }
            ]
          }
        ]
      }
    ]
  },
  "flatIndex": {
    "": {
      "id": "root",
      "name": "root",
      "displayName": "Root",
      "type": "directory",
      "path": "",
      "urlPath": "/",
      "include": true,
      "children": [
        {
          "id": "claude",
          "name": "claude",
          "displayName": "CLAUDE",
          "type": "file",
          "order": 7,
          "path": "claude",
          "urlPath": "/claude",
          "content": "# CLAUDE.md\n\nThis file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.\n\n## Core Technologies\n\n<!-- section-1 -->\n\n## Database & Authentication\n\n<!-- section-2 -->\n\n## Deployment Platform\n\n<!-- section-3 -->\n\n## Authentication Methods\n\n<!-- section-4 -->\n\n## Additional Features\n\n<!-- section-5 -->\n\n## Testing Framework\n\n<!-- section-6 -->\n\n# General rules:\n\n- Don't include any comments in any files.\n- All errors should be thrown - no \"fallback\" functionality\n- Import \"cn\" from \"@/lib/utils\" to concatenate classes.\n- Always use \\`@/lib/env.utils\\` for environment variables and browser APIs to ensure unit test compatibility.\n\n# File Organization and Naming Conventions\n\n- Types and store files alongside ancestor files\n- Actions and hooks files alongside descendent files\n\n\\`\\`\\`txt\nsrc/\n├── components/\n│   ├── Component.tsx\n│   └── Component.types.ts\n├── pages/\n│   ├── Page.tsx\n│   ├── Page.hooks.tsx\n│   └── Page.types.ts\n├── hooks/\n│   └── useFeature.tsx\n└── lib/\n    ├── utils.ts\n    └── log.utils.ts\n\n    key:\n    ◄─── = defined\n    ───► = imported\n\\`\\`\\`\n\n# Hook, action, store and type patterns\n\nDB <-> Supabase Client <-> hook <-> store\n\n- Supabase client queries are called directly in react-query hooks.\n- Data returned in the onSuccess function of react-query hooks is used to update the corresponding zustand store (if applicable).\n- Loading and error state is managed via the react-query hooks, NOT the zustand store.\n- All db types should be defined from \\`@/integrations/supabase/types\\`.\n\n## Example of file patterns - [\\`docs/util.md\\`](docs/util.md)\n\nFollow the examples outlined in [\\`docs/util.md\\`](docs/util.md) when working on hook, store or type files.\n\n# Testing\n\nAll tests should be performed with Jest or Playwright and documented in the \\`Tests.md\\` document\n\n## Test rules:\n\n- The test should find elements in the DOM via data-attributes. Add corresponding data-attributes to the elements in the components. Import the data-attribute values from an enum exported from \\`@/test.types.ts\\`\n- Do not use wait in the tests. Only use timeouts.\n\n## Tests.md\n\nThe test document should list all tests in the repo, with each test case listed in a single line with an indented line below with the pass condition.\nTest document should begin with an index and number each test as demonstrated below:\n\n# Tests.md file example:\n\n\\`\\`\\`md\n# Tests Documentation\n\n## Run All Tests\n\n**Command:** \\`npm run test\\`\n✓ Runs the complete test suite across all test files\n\n## Test Index\n\n1. [Name](#1-name-tests) - \\`npm run test:name\\`\n\n## 1. Name Tests\n\n**File:** \\`__tests__/name.test.ts\\`\n**Command:** \\`npm run test:name\\`\n\n### Name Test\n\n- should do something\n  ✓ Validates expected results\n\n- should do something else\n  ✓ Validates expected results\n\\`\\`\\`\n\n# Environment Variables and Browser APIs\n\nAll environment variable access and browser API usage must use the centralized utilities from \\`@/lib/env.utils\\`:\n\n\\`\\`\\`typescript\nimport { ENV, getBrowserAPI } from \"@/lib/env.utils\";\n\nconst apiUrl = ENV.SUPABASE_URL;\nconst storage = getBrowserAPI(() => localStorage);\n\\`\\`\\`\n\n# Console.logging\n\nAll logging should be performed using the \\`conditionalLog\\` function exported from \\`lib/log.utils.ts\\`\nThe \\`VITE_LOG_LABELS\\` variable in \\`.env.local\\` stores a comma separated string of log labels. Logs are returned if \\`VITE_LOG_LABELS=\"all\"\\`, or if \\`VITE_LOG_LABELS\\` includes the label arg in \\`conditionalLog\\`.\n",
          "components": [],
          "sections": {
            "section1": {
              "option1": {
                "content": "## Core Technologies Stack\n\n**When to use**: This is the default configuration for all projects\n\n**Technologies**:\n- **Next.js 15** with App Router architecture\n- **TypeScript** for type safety\n- **TailwindCSS v4** for styling\n- **Shadcn** for UI components\n- **Zustand** for state management\n- **React Query** for server state management\n\n**Import patterns**:\n```typescript\nimport { create } from \"zustand\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { cn } from \"@/lib/shadcn.utils\";\n```\n\n**Example component**:\n```typescript\nimport { cn } from \"@/lib/shadcn.utils\";\n\nexport function Button({ className, ...props }) {\n  return (\n    <button\n      className={cn(\"px-4 py-2 rounded\", className)}\n      {...props}\n    />\n  );\n}\n```",
                "include": true
              }
            },
            "section2": {
              "option1": {
                "content": "## No Database\n\n**When to use**: Selected when \"No database\" is chosen in InitialConfiguration\n\n**Technologies**:\n- Next.js 15\n- TypeScript\n- Client-side only state management\n\n**Example state**:\n```typescript\nexport interface AppState {\n  theme: 'light' | 'dark';\n  setTheme: (theme: 'light' | 'dark') => void;\n}\n```",
                "include": true
              },
              "option2": {
                "content": "## NeonDB with Better-Auth\n\n**When to use**: Selected when \"NeonDB\" database is chosen in InitialConfiguration\n\n**Technologies**:\n- **NeonDB** (serverless PostgreSQL)\n- **Prisma** ORM\n- **Better-Auth** for authentication\n- **PostgreSQL** database\n\n**Dependencies**:\n```json\n{\n  \"dependencies\": {\n    \"@prisma/client\": \"latest\",\n    \"better-auth\": \"latest\",\n    \"postgres\": \"latest\"\n  }\n}\n```\n\n**Environment Variables**:\n```env\nDATABASE_URL=\"postgresql://...\"\nBETTER_AUTH_SECRET=\"your-secret\"\nBETTER_AUTH_URL=\"http://localhost:3000\"\n```\n\n**Import patterns**:\n```typescript\nimport { User } from \"@prisma/client\";\nimport { auth } from \"@/lib/auth\";\nimport { getAuthenticatedClient } from \"@/lib/auth.utils\";\n```\n\n**Example usage**:\n```typescript\nconst session = await auth.api.getSession({\n  headers: await headers(),\n});\n\nconst { db } = await getAuthenticatedClient();\nconst user = await db.user.findUnique({\n  where: { id: session.user.id },\n});\n```",
                "include": true
              },
              "option3": {
                "content": "## Supabase with Better-Auth\n\n**When to use**: Selected when \"Supabase with Better-Auth\" is chosen in InitialConfiguration\n\n**Technologies**:\n- **Supabase** (PostgreSQL + additional services)\n- **Prisma** ORM\n- **Better-Auth** for authentication\n- **PostgreSQL** database with RLS support\n\n**Dependencies**:\n```json\n{\n  \"dependencies\": {\n    \"@prisma/client\": \"latest\",\n    \"better-auth\": \"latest\",\n    \"@supabase/supabase-js\": \"latest\"\n  }\n}\n```\n\n**Environment Variables**:\n```env\nDATABASE_URL=\"postgresql://...\"\nSUPABASE_URL=\"https://your-project.supabase.co\"\nSUPABASE_ANON_KEY=\"your-anon-key\"\nSUPABASE_JWT_SECRET=\"your-jwt-secret\"\nBETTER_AUTH_SECRET=\"your-secret\"\nBETTER_AUTH_URL=\"http://localhost:3000\"\n```\n\n**Import patterns**:\n```typescript\nimport { User } from \"@prisma/client\";\nimport { auth } from \"@/lib/auth\";\nimport { getAuthenticatedClient } from \"@/lib/auth.utils\";\nimport { createClient } from \"@/lib/supabase/server\";\n```\n\n**Example with RLS**:\n```typescript\nconst { db } = await getAuthenticatedClient();\nconst data = await db.post.findMany({\n  where: { published: true },\n});\n```",
                "include": true
              },
              "option4": {
                "content": "## Supabase Only\n\n**When to use**: Selected when \"Supabase Only\" is chosen in InitialConfiguration\n\n**Technologies**:\n- **Supabase** (PostgreSQL + Auth + Storage + Realtime)\n- **Prisma** ORM (optional)\n- **PostgreSQL** database\n\n**Dependencies**:\n```json\n{\n  \"dependencies\": {\n    \"@supabase/supabase-js\": \"latest\",\n    \"@supabase/ssr\": \"latest\"\n  }\n}\n```\n\n**Environment Variables**:\n```env\nNEXT_PUBLIC_SUPABASE_URL=\"https://your-project.supabase.co\"\nNEXT_PUBLIC_SUPABASE_ANON_KEY=\"your-anon-key\"\n```\n\n**Import patterns**:\n```typescript\nimport { createClient } from \"@/lib/supabase/server\";\nimport { createClient as createBrowserClient } from \"@/lib/supabase/client\";\n```\n\n**Example usage**:\n```typescript\nconst supabase = createClient();\nconst { data, error } = await supabase\n  .from('users')\n  .select('*')\n  .eq('id', userId);\n```",
                "include": true
              }
            },
            "section3": {
              "option1": {
                "content": "## Serverless Deployment (Vercel)\n\n**When to use**: Selected when \"Serverless (Vercel)\" deployment is chosen in InitialConfiguration\n\n**Technologies**:\n- **Vercel** for serverless deployment\n- Edge Runtime support\n- Automatic scaling\n\n**Configuration**:\n```json\n{\n  \"buildCommand\": \"npm run build\",\n  \"outputDirectory\": \".next\",\n  \"framework\": \"nextjs\"\n}\n```\n\n**Environment setup**:\n- Set environment variables in Vercel dashboard\n- Use `NEXT_PUBLIC_` prefix for client-side variables\n- Database connections should use connection pooling\n\n**Best practices**:\n- Use serverless-friendly database (NeonDB, Supabase)\n- Keep function execution under 10 seconds\n- Optimize bundle size for faster cold starts",
                "include": true
              },
              "option2": {
                "content": "## Always-on Deployment (Railway)\n\n**When to use**: Selected when \"Always-on (Railway)\" deployment is chosen in InitialConfiguration\n\n**Technologies**:\n- **Railway** for persistent deployment\n- Long-running processes supported\n- Direct database connections\n\n**Configuration**:\n```json\n{\n  \"build\": {\n    \"builder\": \"NIXPACKS\"\n  },\n  \"deploy\": {\n    \"startCommand\": \"npm run start\",\n    \"restartPolicyType\": \"ON_FAILURE\"\n  }\n}\n```\n\n**Environment setup**:\n- Set environment variables in Railway dashboard\n- Database connections can use direct connections\n- No timeout restrictions\n\n**Best practices**:\n- Suitable for WebSocket servers\n- Good for background jobs and cron tasks\n- Use for applications requiring persistent connections",
                "include": true
              }
            },
            "section4": {
              "option1": {
                "content": "## No Authentication\n\n**When to use**: Application doesn't require user authentication\n\n**Configuration**: No auth-related dependencies or setup required",
                "include": true
              },
              "option2": {
                "content": "## Magic Link Authentication\n\n**When to use**: Selected when \"Magic Link\" is chosen in InitialConfiguration\n\n**Technologies**:\n- **Better-Auth** with magic link plugin\n- **Resend** for email delivery\n\n**Dependencies**:\n```json\n{\n  \"dependencies\": {\n    \"better-auth\": \"latest\",\n    \"resend\": \"latest\"\n  }\n}\n```\n\n**Environment Variables**:\n```env\nRESEND_API_KEY=\"your-resend-key\"\nBETTER_AUTH_SECRET=\"your-secret\"\n```\n\n**Configuration**:\n```typescript\nimport { betterAuth } from \"better-auth\";\nimport { magicLink } from \"better-auth/plugins\";\n\nexport const auth = betterAuth({\n  plugins: [\n    magicLink({\n      sendMagicLink: async ({ email, url }) => {\n      },\n    }),\n  ],\n});\n```",
                "include": true
              },
              "option3": {
                "content": "## Email & Password Authentication\n\n**When to use**: Selected when \"Email & Password\" is chosen in InitialConfiguration\n\n**Technologies**:\n- **Better-Auth** with email/password\n- **Resend** for verification emails\n\n**Dependencies**:\n```json\n{\n  \"dependencies\": {\n    \"better-auth\": \"latest\",\n    \"resend\": \"latest\"\n  }\n}\n```\n\n**Client usage**:\n```typescript\nimport { signIn, signUp } from \"@/lib/auth-client\";\n\nawait signUp.email({\n  email: \"user@example.com\",\n  password: \"securePassword123\",\n  name: \"User Name\",\n});\n\nawait signIn.email({\n  email: \"user@example.com\",\n  password: \"securePassword123\",\n});\n```",
                "include": true
              },
              "option4": {
                "content": "## OTP Authentication\n\n**When to use**: Selected when \"OTP\" is chosen in InitialConfiguration\n\n**Technologies**:\n- **Better-Auth** with OTP plugin\n- **Resend** for OTP delivery\n\n**Configuration**:\n```typescript\nimport { otp } from \"better-auth/plugins\";\n\nexport const auth = betterAuth({\n  plugins: [\n    otp({\n      sendOTP: async ({ email, otp }) => {\n      },\n    }),\n  ],\n});\n```",
                "include": true
              },
              "option5": {
                "content": "## Two-Factor Authentication (2FA)\n\n**When to use**: Selected when \"2FA\" is chosen in InitialConfiguration\n\n**Technologies**:\n- **Better-Auth** with twoFactor plugin\n\n**Configuration**:\n```typescript\nimport { twoFactor } from \"better-auth/plugins\";\n\nexport const auth = betterAuth({\n  plugins: [twoFactor()],\n});\n```\n\n**Client usage**:\n```typescript\nimport { twoFactor } from \"@/lib/auth-client\";\n\nawait twoFactor.enable({\n  password: \"userPassword\",\n});\n\nawait twoFactor.verifyTotp({\n  code: \"123456\",\n});\n```",
                "include": true
              },
              "option6": {
                "content": "## Passkey Authentication\n\n**When to use**: Selected when \"Passkey\" is chosen in InitialConfiguration\n\n**Technologies**:\n- **Better-Auth** with passkey plugin\n- WebAuthn API\n\n**Configuration**:\n```typescript\nimport { passkey } from \"better-auth/plugins\";\n\nexport const auth = betterAuth({\n  plugins: [\n    passkey({\n      rpName: \"Your App Name\",\n      rpID: \"yourdomain.com\",\n    }),\n  ],\n});\n```",
                "include": true
              },
              "option7": {
                "content": "## Anonymous Sessions\n\n**When to use**: Selected when \"Anonymous Sessions\" is chosen in InitialConfiguration\n\n**Technologies**:\n- **Better-Auth** with anonymous plugin\n\n**Configuration**:\n```typescript\nimport { anonymous } from \"better-auth/plugins\";\n\nexport const auth = betterAuth({\n  plugins: [anonymous()],\n});\n```\n\n**Client usage**:\n```typescript\nimport { signIn } from \"@/lib/auth-client\";\n\nawait signIn.anonymous();\n```",
                "include": true
              },
              "option8": {
                "content": "## Google OAuth\n\n**When to use**: Selected when \"Google OAuth\" is chosen in InitialConfiguration\n\n**Environment Variables**:\n```env\nGOOGLE_CLIENT_ID=\"your-client-id\"\nGOOGLE_CLIENT_SECRET=\"your-client-secret\"\n```\n\n**Configuration**:\n```typescript\nexport const auth = betterAuth({\n  socialProviders: {\n    google: {\n      clientId: process.env.GOOGLE_CLIENT_ID!,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n    },\n  },\n});\n```\n\n**Client usage**:\n```typescript\nimport { signIn } from \"@/lib/auth-client\";\n\nawait signIn.social({\n  provider: \"google\",\n  callbackURL: \"/dashboard\",\n});\n```",
                "include": true
              },
              "option9": {
                "content": "## GitHub OAuth\n\n**When to use**: Selected when \"GitHub OAuth\" is chosen in InitialConfiguration\n\n**Environment Variables**:\n```env\nGITHUB_CLIENT_ID=\"your-client-id\"\nGITHUB_CLIENT_SECRET=\"your-client-secret\"\n```\n\n**Configuration**:\n```typescript\nexport const auth = betterAuth({\n  socialProviders: {\n    github: {\n      clientId: process.env.GITHUB_CLIENT_ID!,\n      clientSecret: process.env.GITHUB_CLIENT_SECRET!,\n    },\n  },\n});\n```",
                "include": true
              },
              "option10": {
                "content": "## Apple Sign In\n\n**When to use**: Selected when \"Apple Sign In\" is chosen in InitialConfiguration\n\n**Environment Variables**:\n```env\nAPPLE_CLIENT_ID=\"your-client-id\"\nAPPLE_CLIENT_SECRET=\"your-client-secret\"\n```\n\n**Configuration**:\n```typescript\nexport const auth = betterAuth({\n  socialProviders: {\n    apple: {\n      clientId: process.env.APPLE_CLIENT_ID!,\n      clientSecret: process.env.APPLE_CLIENT_SECRET!,\n    },\n  },\n});\n```",
                "include": true
              },
              "option11": {
                "content": "## Password Only\n\n**When to use**: Selected when \"Password Only\" is chosen in InitialConfiguration (no email verification)\n\n**Configuration**:\n```typescript\nexport const auth = betterAuth({\n  emailAndPassword: {\n    enabled: true,\n    requireEmailVerification: false,\n  },\n});\n```",
                "include": true
              }
            },
            "section5": {
              "option1": {
                "content": "## File Storage (Supabase)\n\n**When to use**: Selected when \"File Storage\" is enabled in InitialConfiguration (requires Supabase)\n\n**Technologies**:\n- **Supabase Storage**\n\n**Import patterns**:\n```typescript\nimport { createClient } from \"@/lib/supabase/server\";\n```\n\n**Server-side upload**:\n```typescript\nconst supabase = createClient();\nconst { data, error } = await supabase.storage\n  .from('bucket-name')\n  .upload('path/to/file', file);\n```\n\n**Client-side upload**:\n```typescript\nimport { createClient } from \"@/lib/supabase/client\";\n\nconst supabase = createClient();\nconst { data, error } = await supabase.storage\n  .from('bucket-name')\n  .upload('path/to/file', file);\n```\n\n**Get public URL**:\n```typescript\nconst { data } = supabase.storage\n  .from('bucket-name')\n  .getPublicUrl('path/to/file');\n```",
                "include": true
              },
              "option2": {
                "content": "## PayPal Payments\n\n**When to use**: Selected when \"PayPal payments\" is enabled in InitialConfiguration\n\n**Dependencies**:\n```json\n{\n  \"dependencies\": {\n    \"@paypal/checkout-server-sdk\": \"latest\"\n  }\n}\n```\n\n**Environment Variables**:\n```env\nPAYPAL_CLIENT_ID=\"your-client-id\"\nPAYPAL_CLIENT_SECRET=\"your-client-secret\"\nPAYPAL_MODE=\"sandbox\"\n```\n\n**Server action example**:\n```typescript\nimport paypal from \"@paypal/checkout-server-sdk\";\n\nconst environment = new paypal.core.SandboxEnvironment(\n  process.env.PAYPAL_CLIENT_ID!,\n  process.env.PAYPAL_CLIENT_SECRET!\n);\nconst client = new paypal.core.PayPalHttpClient(environment);\n```",
                "include": true
              },
              "option3": {
                "content": "## Stripe Payments\n\n**When to use**: Selected when \"Stripe payments\" is enabled in InitialConfiguration\n\n**Dependencies**:\n```json\n{\n  \"dependencies\": {\n    \"stripe\": \"latest\",\n    \"@stripe/stripe-js\": \"latest\"\n  }\n}\n```\n\n**Environment Variables**:\n```env\nSTRIPE_SECRET_KEY=\"sk_test_...\"\nNEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=\"pk_test_...\"\n```\n\n**Server-side setup**:\n```typescript\nimport Stripe from \"stripe\";\n\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\n  apiVersion: \"2024-10-28.acacia\",\n});\n```\n\n**Client-side setup**:\n```typescript\nimport { loadStripe } from \"@stripe/stripe-js\";\n\nconst stripePromise = loadStripe(\n  process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY!\n);\n```\n\n**Create payment intent**:\n```typescript\nconst paymentIntent = await stripe.paymentIntents.create({\n  amount: 1000,\n  currency: \"usd\",\n});\n```",
                "include": true
              },
              "option4": {
                "content": "## Stripe Subscriptions\n\n**When to use**: Selected when \"Stripe subscriptions\" is enabled in InitialConfiguration\n\n**Dependencies**:\n```json\n{\n  \"dependencies\": {\n    \"stripe\": \"latest\",\n    \"@stripe/stripe-js\": \"latest\"\n  }\n}\n```\n\n**Create subscription**:\n```typescript\nconst subscription = await stripe.subscriptions.create({\n  customer: customerId,\n  items: [{ price: priceId }],\n});\n```\n\n**Webhook handling**:\n```typescript\nimport { headers } from \"next/headers\";\n\nexport async function POST(req: Request) {\n  const body = await req.text();\n  const signature = headers().get(\"stripe-signature\")!;\n\n  const event = stripe.webhooks.constructEvent(\n    body,\n    signature,\n    process.env.STRIPE_WEBHOOK_SECRET!\n  );\n\n  if (event.type === \"customer.subscription.updated\") {\n  }\n\n  return new Response(JSON.stringify({ received: true }));\n}\n```",
                "include": true
              },
              "option5": {
                "content": "## AI Image Generation (OpenRouter)\n\n**When to use**: Selected when \"Image generation\" is enabled in InitialConfiguration\n\n**Dependencies**:\n```json\n{\n  \"dependencies\": {\n    \"openai\": \"latest\"\n  }\n}\n```\n\n**Environment Variables**:\n```env\nOPENROUTER_API_KEY=\"your-api-key\"\n```\n\n**Server action example**:\n```typescript\nimport OpenAI from \"openai\";\n\nconst openai = new OpenAI({\n  baseURL: \"https://openrouter.ai/api/v1\",\n  apiKey: process.env.OPENROUTER_API_KEY,\n});\n\nconst response = await openai.images.generate({\n  model: \"dall-e-3\",\n  prompt: \"A beautiful landscape\",\n  n: 1,\n  size: \"1024x1024\",\n});\n```",
                "include": true
              },
              "option6": {
                "content": "## AI Text Generation/Analysis (OpenRouter)\n\n**When to use**: Selected when \"Text generation/analysis\" is enabled in InitialConfiguration\n\n**Dependencies**:\n```json\n{\n  \"dependencies\": {\n    \"openai\": \"latest\"\n  }\n}\n```\n\n**Server action example**:\n```typescript\nimport OpenAI from \"openai\";\n\nconst openai = new OpenAI({\n  baseURL: \"https://openrouter.ai/api/v1\",\n  apiKey: process.env.OPENROUTER_API_KEY,\n});\n\nconst completion = await openai.chat.completions.create({\n  model: \"anthropic/claude-3.5-sonnet\",\n  messages: [\n    { role: \"user\", content: \"Hello!\" }\n  ],\n});\n```\n\n**Streaming response**:\n```typescript\nconst stream = await openai.chat.completions.create({\n  model: \"anthropic/claude-3.5-sonnet\",\n  messages: [{ role: \"user\", content: \"Tell me a story\" }],\n  stream: true,\n});\n\nfor await (const chunk of stream) {\n  const content = chunk.choices[0]?.delta?.content || \"\";\n  process.stdout.write(content);\n}\n```",
                "include": true
              },
              "option7": {
                "content": "## Email Notifications (Resend)\n\n**When to use**: Selected when \"Email notifications\" is enabled in InitialConfiguration\n\n**Dependencies**:\n```json\n{\n  \"dependencies\": {\n    \"resend\": \"latest\"\n  }\n}\n```\n\n**Environment Variables**:\n```env\nRESEND_API_KEY=\"re_...\"\n```\n\n**Server action example**:\n```typescript\nimport { Resend } from \"resend\";\n\nconst resend = new Resend(process.env.RESEND_API_KEY);\n\nawait resend.emails.send({\n  from: \"noreply@yourdomain.com\",\n  to: \"user@example.com\",\n  subject: \"Welcome\",\n  html: \"<p>Welcome to our app!</p>\",\n});\n```",
                "include": true
              },
              "option8": {
                "content": "## In-App Notifications\n\n**When to use**: Selected when \"In-app notifications\" is enabled in InitialConfiguration\n\n**Database schema**:\n```prisma\nmodel Notification {\n  id        String   @id @default(cuid())\n  userId    String\n  title     String\n  message   String\n  read      Boolean  @default(false)\n  createdAt DateTime @default(now())\n  user      User     @relation(fields: [userId], references: [id])\n}\n```\n\n**Create notification action**:\n```typescript\nconst notification = await db.notification.create({\n  data: {\n    userId: userId,\n    title: \"New Message\",\n    message: \"You have a new message\",\n  },\n});\n```\n\n**Query notifications hook**:\n```typescript\nexport const useNotifications = () => {\n  return useQuery({\n    queryKey: [\"notifications\"],\n    queryFn: async () => {\n      const { data } = await getNotificationsAction();\n      return data;\n    },\n  });\n};\n```",
                "include": true
              }
            },
            "section6": {
              "option1": {
                "content": "## Testing with Jest & Playwright\n\n**When to use**: All projects should include testing\n\n**Technologies**:\n- **Jest** for unit and integration tests\n- **Playwright** for end-to-end tests\n\n**Dependencies**:\n```json\n{\n  \"devDependencies\": {\n    \"jest\": \"latest\",\n    \"@playwright/test\": \"latest\",\n    \"@testing-library/react\": \"latest\",\n    \"@testing-library/jest-dom\": \"latest\"\n  }\n}\n```\n\n**Jest configuration** (`jest.config.js`):\n```javascript\nmodule.exports = {\n  preset: \"next\",\n  testEnvironment: \"jest-environment-jsdom\",\n  setupFilesAfterEnv: [\"<rootDir>/jest.setup.js\"],\n};\n```\n\n**Playwright configuration** (`playwright.config.ts`):\n```typescript\nimport { defineConfig } from \"@playwright/test\";\n\nexport default defineConfig({\n  testDir: \"./e2e\",\n  use: {\n    baseURL: \"http://localhost:3000\",\n  },\n});\n```\n\n**Test file pattern**:\n```typescript\nimport { test, expect } from \"@playwright/test\";\n\ntest(\"should navigate to home page\", async ({ page }) => {\n  await page.goto(\"/\");\n  await expect(page).toHaveTitle(/Home/);\n});\n```",
                "include": true
              }
            }
          },
          "include": true
        },
        {
          "id": "util",
          "name": "util",
          "displayName": "util",
          "type": "file",
          "order": 8,
          "path": "util",
          "urlPath": "/util",
          "content": "# Utility File Patterns\n\n## Types File Examples\n\n<!-- section-1 -->\n\n## Stores File Examples\n\n<!-- section-2 -->\n\n## Actions File Examples\n\n<!-- section-3 -->\n\n## Hooks File Examples\n\n<!-- section-4 -->\n\n## Utility Files\n\n<!-- section-5 -->\n\n# Toast Component Example\n\n\\`\\`\\`typescript\nimport { toast } from \"sonner\";\nimport { Toast } from \"@/app/(components)/Toast\";\nimport { TestDataAttributes } from \"@/test.types\";\n\ntoast.custom(() => (\n  <Toast\n    variant=\"success\"\n    title=\"Success\"\n    message=\"Operation completed successfully\"\n    data-cy={TestDataAttributes.TOAST_SUCCESS}\n  />\n));\n\ntoast.custom(() => (\n  <Toast\n    variant=\"error\"\n    title=\"Error\"\n    message=\"An error occurred while processing your request\"\n    data-cy={TestDataAttributes.TOAST_ERROR}\n  />\n));\n\ntoast.custom(() => (\n  <Toast\n    variant=\"info\"\n    title=\"Information\"\n    message=\"Please review the details before proceeding\"\n    data-cy={TestDataAttributes.TOAST_INFO}\n  />\n));\n\\`\\`\\`\n\n# Better Auth Organization & Role Management\n\nThis section provides comprehensive examples for implementing organization and role management with Better-Auth.\n\n## Database Schema - \\`schema.prisma\\`\n\n\\`\\`\\`prisma\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n  schemas  = [\"auth\", \"public\"]\n}\n\nmodel user {\n  id               String       @id @default(cuid())\n  email            String       @unique\n  name             String?\n  role             String       @default(\"user\")\n  banned           Boolean      @default(false)\n  banReason        String?\n  banExpires       DateTime?\n  emailVerified    Boolean?\n  createdAt        DateTime     @default(now())\n  updatedAt        DateTime     @updatedAt\n  image            String?\n  MagicLink        MagicLink[]\n  account          account[]\n  invitation       invitation[]\n  member           member[]\n  session          session[]\n\n  @@schema(\"auth\")\n}\n\nmodel session {\n  id                   String   @id @default(cuid())\n  userId               String\n  expiresAt            DateTime\n  token                String   @unique\n  createdAt            DateTime @default(now())\n  updatedAt            DateTime @updatedAt\n  ipAddress            String?\n  userAgent            String?\n  impersonatedBy       String?\n  activeOrganizationId String?\n  user                 user     @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@schema(\"auth\")\n}\n\nmodel account {\n  id                    String    @id @default(cuid())\n  userId                String\n  accountId             String\n  providerId            String\n  accessToken           String?\n  refreshToken          String?\n  idToken               String?\n  accessTokenExpiresAt  DateTime?\n  refreshTokenExpiresAt DateTime?\n  scope                 String?\n  password              String?\n  createdAt             DateTime  @default(now())\n  updatedAt             DateTime  @updatedAt\n  user                  user      @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([providerId, accountId])\n  @@schema(\"auth\")\n}\n\nmodel verification {\n  id         String   @id @default(cuid())\n  identifier String\n  value      String\n  expiresAt  DateTime\n  createdAt  DateTime @default(now())\n  updatedAt  DateTime @updatedAt\n\n  @@unique([identifier, value])\n  @@schema(\"auth\")\n}\n\nmodel MagicLink {\n  id        String   @id @default(cuid())\n  userId    String\n  token     String   @unique\n  email     String\n  expiresAt DateTime\n  createdAt DateTime @default(now())\n  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@schema(\"auth\")\n}\n\nmodel organization {\n  id         String       @id @default(cuid())\n  name       String\n  slug       String       @unique\n  logo       String?\n  metadata   Json?\n  createdAt  DateTime     @default(now())\n  updatedAt  DateTime     @updatedAt\n  invitation invitation[]\n  member     member[]\n\n  @@schema(\"auth\")\n}\n\nmodel member {\n  id             String       @id @default(cuid())\n  userId         String\n  organizationId String\n  role           String       @default(\"member\")\n  createdAt      DateTime     @default(now())\n  updatedAt      DateTime     @updatedAt\n  organization   organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)\n  user           user         @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([userId, organizationId])\n  @@schema(\"auth\")\n}\n\nmodel invitation {\n  id             String       @id @default(cuid())\n  organizationId String\n  email          String\n  role           String       @default(\"member\")\n  inviterId      String\n  token          String?      @unique\n  status         String       @default(\"pending\")\n  expiresAt      DateTime\n  createdAt      DateTime     @default(now())\n  updatedAt      DateTime     @updatedAt\n  user           user         @relation(fields: [inviterId], references: [id], onDelete: Cascade)\n  organization   organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)\n\n  @@unique([email, organizationId])\n  @@schema(\"auth\")\n}\n\\`\\`\\`\n\n## Console Logging\n\nAll logging should be performed using the \\`conditionalLog\\` function exported from \\`lib/log.utils.ts\\`\n\nThe \\`NEXT_PUBLIC_LOG_LABELS\\` variable in \\`.env.local\\` stores a comma separated string of log labels. Logs are returned if \\`NEXT_PUBLIC_LOG_LABELS=\"all\"\\`, or if \\`NEXT_PUBLIC_LOG_LABELS\\` includes the label arg in \\`conditionalLog\\`.\n",
          "components": [],
          "sections": {
            "section1": {
              "option1": {
                "content": "## Basic Types (No Database)\n\n**When to use**: When no database is configured\n\n**Example**:\n```typescript\nexport interface AppState {\n  theme: 'light' | 'dark';\n  setTheme: (theme: 'light' | 'dark') => void;\n}\n\nexport interface FormData {\n  name: string;\n  email: string;\n}\n```",
                "include": true
              },
              "option2": {
                "content": "## Types with Prisma\n\n**When to use**: When using NeonDB or Supabase with Prisma\n\n**Import pattern**:\n```typescript\nimport { User, Post } from \"@prisma/client\";\n```\n\n**Example**:\n```typescript\nimport { User } from \"@prisma/client\";\n\nexport interface AppState {\n  user: User | null;\n  setUser: (user: User | null) => void;\n  tempEmail?: string;\n  setTempEmail: (tempEmail: string) => void;\n  reset: () => void;\n}\n\nexport interface SignInData {\n  email: string;\n  password: string;\n}\n```",
                "include": true
              },
              "option3": {
                "content": "## Types with Better-Auth Session\n\n**When to use**: When using Better-Auth for authentication\n\n**Import pattern**:\n```typescript\nimport { Session } from \"better-auth/types\";\nimport { User } from \"@prisma/client\";\n```\n\n**Example**:\n```typescript\nimport { User } from \"@prisma/client\";\n\nexport interface AppState {\n  user: User | null;\n  setUser: (user: User | null) => void;\n  reset: () => void;\n}\n\nexport interface ExtendedUser extends User {\n  profile?: {\n    isOnboardingComplete: boolean;\n  } | null;\n}\n```",
                "include": true
              },
              "option4": {
                "content": "## Types with File Storage\n\n**When to use**: When Supabase storage is enabled\n\n**Example**:\n```typescript\nexport interface FileUploadData {\n  file: File;\n  bucket: string;\n  path: string;\n}\n\nexport interface FileMetadata {\n  url: string;\n  path: string;\n  size: number;\n  mimeType: string;\n}\n```",
                "include": true
              },
              "option5": {
                "content": "## Types with Payment Data\n\n**When to use**: When Stripe or PayPal is enabled\n\n**Example**:\n```typescript\nexport interface PaymentIntentData {\n  amount: number;\n  currency: string;\n  customerId?: string;\n}\n\nexport interface SubscriptionData {\n  priceId: string;\n  customerId: string;\n  trialDays?: number;\n}\n```",
                "include": true
              },
              "option6": {
                "content": "## Types with AI Integration\n\n**When to use**: When OpenRouter AI is enabled\n\n**Example**:\n```typescript\nexport interface ImageGenerationRequest {\n  prompt: string;\n  size: \"1024x1024\" | \"1792x1024\" | \"1024x1792\";\n  model: string;\n}\n\nexport interface ChatCompletionRequest {\n  messages: Array<{\n    role: \"user\" | \"assistant\" | \"system\";\n    content: string;\n  }>;\n  model: string;\n  stream?: boolean;\n}\n```",
                "include": true
              }
            },
            "section2": {
              "option1": {
                "content": "## Basic Zustand Store\n\n**When to use**: Simple client-side state management\n\n**Example**:\n```typescript\nimport { create } from \"zustand\";\n\ninterface ThemeState {\n  theme: 'light' | 'dark';\n  setTheme: (theme: 'light' | 'dark') => void;\n}\n\nconst initialState = {\n  theme: 'light' as const,\n};\n\nexport const useThemeStore = create<ThemeState>()((set) => ({\n  ...initialState,\n  setTheme: (theme) => set({ theme }),\n}));\n```",
                "include": true
              },
              "option2": {
                "content": "## Persisted Store\n\n**When to use**: When state needs to persist across sessions\n\n**Example**:\n```typescript\nimport { create } from \"zustand\";\nimport { persist } from \"zustand/middleware\";\n\ninterface SettingsState {\n  notifications: boolean;\n  language: string;\n  setNotifications: (enabled: boolean) => void;\n  setLanguage: (lang: string) => void;\n}\n\nexport const useSettingsStore = create<SettingsState>()(\n  persist(\n    (set) => ({\n      notifications: true,\n      language: 'en',\n      setNotifications: (notifications) => set({ notifications }),\n      setLanguage: (language) => set({ language }),\n    }),\n    {\n      name: 'settings-storage',\n    }\n  )\n);\n```",
                "include": true
              },
              "option3": {
                "content": "## Store with Authentication State\n\n**When to use**: When using Better-Auth with user session\n\n**Example**:\n```typescript\nimport { User } from \"@prisma/client\";\nimport { create } from \"zustand\";\nimport { AppState } from \"./layout.types\";\n\nconst initialState = {\n  user: null,\n};\n\nexport const useAppStore = create<AppState>()((set) => ({\n  ...initialState,\n  setUser: (user) => set({ user }),\n  reset: () => set(initialState),\n}));\n```",
                "include": true
              },
              "option4": {
                "content": "## Store with Multi-Tenant Support\n\n**When to use**: When using Better-Auth organization plugin\n\n**Example**:\n```typescript\nimport { create } from \"zustand\";\n\ninterface OrganizationState {\n  activeOrganizationId: string | null;\n  setActiveOrganization: (id: string | null) => void;\n  reset: () => void;\n}\n\nconst initialState = {\n  activeOrganizationId: null,\n};\n\nexport const useOrganizationStore = create<OrganizationState>()((set) => ({\n  ...initialState,\n  setActiveOrganization: (activeOrganizationId) => set({ activeOrganizationId }),\n  reset: () => set(initialState),\n}));\n```",
                "include": true
              }
            },
            "section3": {
              "option1": {
                "content": "## Basic Server Actions (No Auth)\n\n**When to use**: Simple server actions without authentication\n\n**Example**:\n```typescript\n\"use server\";\n\nimport { ActionResponse, getActionResponse } from \"@/lib/action.utils\";\n\nexport const getDataAction = async (): Promise<ActionResponse<string[]>> => {\n  try {\n    const data = [\"item1\", \"item2\", \"item3\"];\n    return getActionResponse({ data });\n  } catch (error) {\n    return getActionResponse({ error });\n  }\n};\n```",
                "include": true
              },
              "option2": {
                "content": "## Actions with Better-Auth\n\n**When to use**: When using Better-Auth for authentication\n\n**Example**:\n```typescript\n\"use server\";\n\nimport { ActionResponse, getActionResponse } from \"@/lib/action.utils\";\nimport { auth } from \"@/lib/auth\";\nimport { User } from \"@prisma/client\";\nimport { headers } from \"next/headers\";\n\nexport const getUserAction = async (): Promise<ActionResponse<User | null>> => {\n  try {\n    const session = await auth.api.getSession({\n      headers: await headers(),\n    });\n\n    if (!session?.user) return getActionResponse();\n\n    return getActionResponse({ data: session.user as User });\n  } catch (error) {\n    return getActionResponse({ error });\n  }\n};\n```",
                "include": true
              },
              "option3": {
                "content": "## Actions with Prisma + RLS\n\n**When to use**: When using Prisma with Row Level Security\n\n**Example**:\n```typescript\n\"use server\";\n\nimport { ActionResponse, getActionResponse } from \"@/lib/action.utils\";\nimport { auth } from \"@/lib/auth\";\nimport { getAuthenticatedClient } from \"@/lib/auth.utils\";\nimport { User } from \"@prisma/client\";\nimport { headers } from \"next/headers\";\n\nexport const getUserAction = async (): Promise<ActionResponse<User | null>> => {\n  try {\n    const session = await auth.api.getSession({\n      headers: await headers(),\n    });\n\n    if (!session?.user) return getActionResponse();\n\n    const { db } = await getAuthenticatedClient();\n\n    const prismaUser = await db.user.findUnique({\n      where: { id: session.user.id },\n    });\n\n    return getActionResponse({ data: prismaUser });\n  } catch (error) {\n    return getActionResponse({ error });\n  }\n};\n```",
                "include": true
              },
              "option4": {
                "content": "## Actions with File Upload (Supabase)\n\n**When to use**: When Supabase storage is enabled\n\n**Example**:\n```typescript\n\"use server\";\n\nimport { ActionResponse, getActionResponse } from \"@/lib/action.utils\";\nimport { createClient } from \"@/lib/supabase/server\";\n\nexport const uploadFileAction = async (\n  formData: FormData\n): Promise<ActionResponse<{ url: string }>> => {\n  try {\n    const file = formData.get(\"file\") as File;\n    const bucket = formData.get(\"bucket\") as string;\n    const path = formData.get(\"path\") as string;\n\n    const supabase = createClient();\n    const { data, error } = await supabase.storage\n      .from(bucket)\n      .upload(path, file);\n\n    if (error) throw error;\n\n    const { data: urlData } = supabase.storage\n      .from(bucket)\n      .getPublicUrl(path);\n\n    return getActionResponse({ data: { url: urlData.publicUrl } });\n  } catch (error) {\n    return getActionResponse({ error });\n  }\n};\n```",
                "include": true
              },
              "option5": {
                "content": "## Actions with Payments (Stripe/PayPal)\n\n**When to use**: When Stripe or PayPal is enabled\n\n**Stripe Example**:\n```typescript\n\"use server\";\n\nimport { ActionResponse, getActionResponse } from \"@/lib/action.utils\";\nimport Stripe from \"stripe\";\n\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\n  apiVersion: \"2024-10-28.acacia\",\n});\n\nexport const createPaymentIntentAction = async (\n  amount: number\n): Promise<ActionResponse<{ clientSecret: string }>> => {\n  try {\n    const paymentIntent = await stripe.paymentIntents.create({\n      amount,\n      currency: \"usd\",\n    });\n\n    return getActionResponse({\n      data: { clientSecret: paymentIntent.client_secret! },\n    });\n  } catch (error) {\n    return getActionResponse({ error });\n  }\n};\n```",
                "include": true
              },
              "option6": {
                "content": "## Actions with AI Integration (OpenRouter)\n\n**When to use**: When OpenRouter AI is enabled\n\n**Example**:\n```typescript\n\"use server\";\n\nimport { ActionResponse, getActionResponse } from \"@/lib/action.utils\";\nimport OpenAI from \"openai\";\n\nconst openai = new OpenAI({\n  baseURL: \"https://openrouter.ai/api/v1\",\n  apiKey: process.env.OPENROUTER_API_KEY,\n});\n\nexport const generateTextAction = async (\n  prompt: string\n): Promise<ActionResponse<{ text: string }>> => {\n  try {\n    const completion = await openai.chat.completions.create({\n      model: \"anthropic/claude-3.5-sonnet\",\n      messages: [{ role: \"user\", content: prompt }],\n    });\n\n    const text = completion.choices[0]?.message?.content || \"\";\n\n    return getActionResponse({ data: { text } });\n  } catch (error) {\n    return getActionResponse({ error });\n  }\n};\n```",
                "include": true
              }
            },
            "section4": {
              "option1": {
                "content": "## Basic React Query Hooks\n\n**When to use**: Simple data fetching without authentication\n\n**Example**:\n```typescript\n\"use client\";\n\nimport { useQuery } from \"@tanstack/react-query\";\nimport { getDataAction } from \"./page.actions\";\n\nexport const useGetData = () => {\n  return useQuery({\n    queryKey: [\"data\"],\n    queryFn: async () => {\n      const { data, error } = await getDataAction();\n      if (error) throw error;\n      return data;\n    },\n  });\n};\n```",
                "include": true
              },
              "option2": {
                "content": "## Hooks with Better-Auth Client\n\n**When to use**: When using Better-Auth for authentication\n\n**Example**:\n```typescript\n\"use client\";\n\nimport { configuration, privatePaths } from \"@/configuration\";\nimport { signIn } from \"@/lib/auth-client\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { usePathname, useRouter } from \"next/navigation\";\nimport { toast } from \"sonner\";\nimport { Toast } from \"../(components)/Toast\";\nimport { TestDataAttributes } from \"@/test.types\";\nimport { useAppStore } from \"../layout.stores\";\nimport { SignInData } from \"../layout.types\";\nimport { getUserAction } from \"./layout.actions\";\n\nexport const useGetUser = () => {\n  const { setUser, reset } = useAppStore();\n  const pathname = usePathname();\n  const router = useRouter();\n\n  return useQuery({\n    queryKey: [\"user\"],\n    queryFn: async () => {\n      const { data, error } = await getUserAction();\n      if (!data || error) {\n        if (privatePaths.includes(pathname)) {\n          router.push(configuration.paths.signIn);\n        }\n        reset();\n      }\n      if (error) throw error;\n      setUser(data ?? null);\n      return data;\n    },\n    staleTime: 1000 * 60 * 5,\n  });\n};\n\nexport const useSignIn = () => {\n  const { setUser } = useAppStore();\n  const router = useRouter();\n\n  return useMutation({\n    mutationFn: async (signInData: SignInData) => {\n      const { error } = await signIn.email({\n        email: signInData.email,\n        password: signInData.password,\n      });\n\n      if (error) throw error;\n      const { data: userData, error: userError } = await getUserAction();\n\n      if (userError) throw new Error(userError);\n\n      return userData;\n    },\n    onSuccess: (data) => {\n      if (data) {\n        setUser(data);\n      }\n      toast.custom(() => (\n        <Toast\n          variant=\"success\"\n          title=\"Success\"\n          message=\"Successfully signed in\"\n          data-cy={TestDataAttributes.TOAST_SUCCESS}\n        />\n      ));\n      router.push(configuration.paths.home);\n    },\n    onError: (error: Error) => {\n      toast.custom(() => (\n        <Toast\n          variant=\"error\"\n          title=\"Sign In Failed\"\n          message={error.message || \"Failed to sign in\"}\n          data-cy={TestDataAttributes.TOAST_ERROR}\n        />\n      ));\n    },\n  });\n};\n```",
                "include": true
              },
              "option3": {
                "content": "## Hooks with Optimistic Updates\n\n**When to use**: For better UX with immediate UI updates\n\n**Example**:\n```typescript\n\"use client\";\n\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { updatePostAction } from \"./post.actions\";\n\nexport const useUpdatePost = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async ({ id, title }: { id: string; title: string }) => {\n      const { data, error } = await updatePostAction(id, title);\n      if (error) throw error;\n      return data;\n    },\n    onMutate: async (variables) => {\n      await queryClient.cancelQueries({ queryKey: [\"posts\"] });\n\n      const previousPosts = queryClient.getQueryData([\"posts\"]);\n\n      queryClient.setQueryData([\"posts\"], (old: any) => {\n        return old?.map((post: any) =>\n          post.id === variables.id ? { ...post, title: variables.title } : post\n        );\n      });\n\n      return { previousPosts };\n    },\n    onError: (err, variables, context) => {\n      if (context?.previousPosts) {\n        queryClient.setQueryData([\"posts\"], context.previousPosts);\n      }\n    },\n    onSettled: () => {\n      queryClient.invalidateQueries({ queryKey: [\"posts\"] });\n    },\n  });\n};\n```",
                "include": true
              },
              "option4": {
                "content": "## Hooks with File Upload\n\n**When to use**: When Supabase storage is enabled\n\n**Example**:\n```typescript\n\"use client\";\n\nimport { useMutation } from \"@tanstack/react-query\";\nimport { toast } from \"sonner\";\nimport { Toast } from \"../(components)/Toast\";\nimport { uploadFileAction } from \"./upload.actions\";\n\nexport const useUploadFile = () => {\n  return useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append(\"file\", file);\n      formData.append(\"bucket\", \"uploads\");\n      formData.append(\"path\", `${Date.now()}-${file.name}`);\n\n      const { data, error } = await uploadFileAction(formData);\n      if (error) throw error;\n      return data;\n    },\n    onSuccess: () => {\n      toast.custom(() => (\n        <Toast\n          variant=\"success\"\n          title=\"Success\"\n          message=\"File uploaded successfully\"\n        />\n      ));\n    },\n    onError: (error: Error) => {\n      toast.custom(() => (\n        <Toast\n          variant=\"error\"\n          title=\"Upload Failed\"\n          message={error.message || \"Failed to upload file\"}\n        />\n      ));\n    },\n  });\n};\n```",
                "include": true
              },
              "option5": {
                "content": "## Hooks with Real-time Subscriptions (Supabase)\n\n**When to use**: When using Supabase for real-time data\n\n**Example**:\n```typescript\n\"use client\";\n\nimport { createClient } from \"@/lib/supabase/client\";\nimport { useEffect, useState } from \"react\";\n\nexport const useRealtimeMessages = (channelId: string) => {\n  const [messages, setMessages] = useState<any[]>([]);\n  const supabase = createClient();\n\n  useEffect(() => {\n    const channel = supabase\n      .channel(`messages:${channelId}`)\n      .on(\n        \"postgres_changes\",\n        {\n          event: \"INSERT\",\n          schema: \"public\",\n          table: \"messages\",\n          filter: `channel_id=eq.${channelId}`,\n        },\n        (payload) => {\n          setMessages((current) => [...current, payload.new]);\n        }\n      )\n      .subscribe();\n\n    return () => {\n      supabase.removeChannel(channel);\n    };\n  }, [channelId, supabase]);\n\n  return messages;\n};\n```",
                "include": true
              }
            },
            "section5": {
              "option1": {
                "content": "## prisma-rls.ts (Row Level Security)\n\n**When to use**: When using Supabase with Prisma and RLS enabled\n\n**File**: `lib/prisma-rls.ts`\n\n```typescript\nimport { Prisma } from \"@prisma/client\";\nimport { prisma } from \"./prisma\";\n\nfunction forUser(userId: string, tenantId?: string) {\n  return Prisma.defineExtension((prisma) =>\n    prisma.$extends({\n      query: {\n        $allModels: {\n          async $allOperations({ args, query }) {\n            if (tenantId) {\n              const [, , result] = await prisma.$transaction([\n                prisma.$executeRaw`SELECT set_config('app.current_user_id', ${userId}, TRUE)`,\n                prisma.$executeRaw`SELECT set_config('app.current_tenant_id', ${tenantId}, TRUE)`,\n                query(args),\n              ]);\n              return result;\n            } else {\n              const [, result] = await prisma.$transaction([\n                prisma.$executeRaw`SELECT set_config('app.current_user_id', ${userId}, TRUE)`,\n                query(args),\n              ]);\n              return result;\n            }\n          },\n        },\n      },\n    })\n  );\n}\n\nexport function createRLSClient(userId: string, tenantId?: string) {\n  return prisma.$extends(forUser(userId, tenantId));\n}\n```",
                "include": true
              },
              "option2": {
                "content": "## auth.utils.ts (Better-Auth Utilities)\n\n**When to use**: When using Better-Auth for authentication\n\n**File**: `lib/auth.utils.ts`\n\n```typescript\nimport { User } from \"better-auth\";\nimport jwt from \"jsonwebtoken\";\nimport { headers } from \"next/headers\";\nimport { auth, Session } from \"./auth\";\nimport { createRLSClient } from \"./prisma-rls\";\n\nexport async function getAuthenticatedClient(user?: User): Promise<{\n  db: ReturnType<typeof createRLSClient>;\n  session: Session | null;\n}> {\n  const headersList = await headers();\n\n  const session = await auth.api.getSession({\n    headers: headersList,\n  });\n\n  const userId = user?.id || session?.user.id;\n\n  if (!userId) {\n    throw new Error(\"Unauthorized\");\n  }\n\n  const db = createRLSClient(userId);\n\n  return { db, session };\n}\n\nexport function generateSupabaseJWT(userId: string, userRole: string): string {\n  const jwtSecret = process.env.SUPABASE_JWT_SECRET;\n\n  if (!jwtSecret) {\n    throw new Error(\"SUPABASE_JWT_SECRET is required for JWT generation\");\n  }\n\n  const payload = {\n    aud: \"authenticated\",\n    exp: Math.floor(Date.now() / 1000) + 60 * 60,\n    sub: userId,\n    email: `${userId}@better-auth.local`,\n    role: \"authenticated\",\n    user_metadata: {\n      better_auth_user_id: userId,\n      better_auth_role: userRole,\n    },\n    app_metadata: {\n      provider: \"better-auth\",\n      providers: [\"better-auth\"],\n    },\n  };\n\n  return jwt.sign(payload, jwtSecret, {\n    algorithm: \"HS256\",\n  });\n}\n```",
                "include": true
              },
              "option3": {
                "content": "## storage.utils.ts (Supabase Storage)\n\n**When to use**: When Supabase storage is enabled\n\n**File**: `lib/storage.utils.ts`\n\n```typescript\nimport { createClient } from \"@/lib/supabase/server\";\n\nexport async function uploadFile(\n  file: File,\n  bucket: string,\n  path: string\n): Promise<{ url: string; path: string }> {\n  const supabase = createClient();\n\n  const { data, error } = await supabase.storage.from(bucket).upload(path, file);\n\n  if (error) throw error;\n\n  const { data: urlData } = supabase.storage.from(bucket).getPublicUrl(path);\n\n  return {\n    url: urlData.publicUrl,\n    path: data.path,\n  };\n}\n\nexport async function deleteFile(bucket: string, path: string): Promise<void> {\n  const supabase = createClient();\n\n  const { error } = await supabase.storage.from(bucket).remove([path]);\n\n  if (error) throw error;\n}\n\nexport async function getPublicUrl(bucket: string, path: string): string {\n  const supabase = createClient();\n\n  const { data } = supabase.storage.from(bucket).getPublicUrl(path);\n\n  return data.publicUrl;\n}\n```",
                "include": true
              },
              "option4": {
                "content": "## payment.utils.ts (Stripe/PayPal)\n\n**When to use**: When Stripe or PayPal is enabled\n\n**File**: `lib/payment.utils.ts`\n\n**Stripe utilities**:\n```typescript\nimport Stripe from \"stripe\";\n\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\n  apiVersion: \"2024-10-28.acacia\",\n});\n\nexport async function createCustomer(email: string, name?: string) {\n  return await stripe.customers.create({\n    email,\n    name,\n  });\n}\n\nexport async function createPaymentIntent(\n  amount: number,\n  currency: string,\n  customerId?: string\n) {\n  return await stripe.paymentIntents.create({\n    amount,\n    currency,\n    customer: customerId,\n  });\n}\n\nexport async function createSubscription(\n  customerId: string,\n  priceId: string\n) {\n  return await stripe.subscriptions.create({\n    customer: customerId,\n    items: [{ price: priceId }],\n  });\n}\n\nexport async function cancelSubscription(subscriptionId: string) {\n  return await stripe.subscriptions.cancel(subscriptionId);\n}\n```",
                "include": true
              },
              "option5": {
                "content": "## ai.utils.ts (OpenRouter Integration)\n\n**When to use**: When OpenRouter AI is enabled\n\n**File**: `lib/ai.utils.ts`\n\n```typescript\nimport OpenAI from \"openai\";\n\nconst openai = new OpenAI({\n  baseURL: \"https://openrouter.ai/api/v1\",\n  apiKey: process.env.OPENROUTER_API_KEY,\n});\n\nexport async function generateText(\n  prompt: string,\n  model: string = \"anthropic/claude-3.5-sonnet\"\n): Promise<string> {\n  const completion = await openai.chat.completions.create({\n    model,\n    messages: [{ role: \"user\", content: prompt }],\n  });\n\n  return completion.choices[0]?.message?.content || \"\";\n}\n\nexport async function generateImage(\n  prompt: string,\n  size: \"1024x1024\" | \"1792x1024\" | \"1024x1792\" = \"1024x1024\"\n): Promise<string> {\n  const response = await openai.images.generate({\n    model: \"dall-e-3\",\n    prompt,\n    size,\n    n: 1,\n  });\n\n  return response.data[0]?.url || \"\";\n}\n\nexport async function streamText(\n  prompt: string,\n  model: string = \"anthropic/claude-3.5-sonnet\",\n  onChunk: (chunk: string) => void\n): Promise<void> {\n  const stream = await openai.chat.completions.create({\n    model,\n    messages: [{ role: \"user\", content: prompt }],\n    stream: true,\n  });\n\n  for await (const chunk of stream) {\n    const content = chunk.choices[0]?.delta?.content || \"\";\n    if (content) {\n      onChunk(content);\n    }\n  }\n}\n```",
                "include": true
              },
              "option6": {
                "content": "## log.utils.ts (Logging Utility)\n\n**When to use**: All projects\n\n**File**: `lib/log.utils.ts`\n\n```typescript\nexport enum LOG_LABELS {\n  GENERATE = \"generate\",\n  API = \"api\",\n  AUTH = \"auth\",\n  DB = \"db\",\n  FETCH = \"fetch\",\n  RATE_LIMIT = \"rate-limit\",\n  IMAGE = \"image\",\n  WIDGET = \"widget\",\n}\n\ninterface ConditionalLogOptions {\n  maxStringLength?: number;\n  label: LOG_LABELS | string;\n}\n\nexport function conditionalLog(\n  data: unknown,\n  options: ConditionalLogOptions\n): string | null {\n  const { maxStringLength = 200, label } = options;\n\n  const logLabels = process.env.NEXT_PUBLIC_LOG_LABELS;\n\n  if (!logLabels || logLabels === \"none\") {\n    return null;\n  }\n\n  if (logLabels !== \"all\") {\n    const allowedLabels = logLabels.split(\",\").map((l) => l.trim());\n    if (!allowedLabels.includes(label)) {\n      return null;\n    }\n  }\n\n  try {\n    const processedData = deepStringify(data, maxStringLength, new WeakSet());\n    const result = JSON.stringify(processedData);\n    return result.replace(/\\s+/g, \"\");\n  } catch (error) {\n    return JSON.stringify({ error: \"Failed to stringify data\", label });\n  }\n}\n\nfunction deepStringify(\n  value: unknown,\n  maxLength: number,\n  seen: WeakSet<object>\n): unknown {\n  if (value === null || value === undefined) {\n    return value;\n  }\n\n  if (typeof value === \"string\") {\n    return truncateString(value, maxLength);\n  }\n\n  if (typeof value === \"number\" || typeof value === \"boolean\") {\n    return value;\n  }\n\n  if (value instanceof Date) {\n    return value.toISOString();\n  }\n\n  if (value instanceof Error) {\n    return {\n      name: value.name,\n      message: truncateString(value.message, maxLength),\n      stack: value.stack ? truncateString(value.stack, maxLength) : undefined,\n    };\n  }\n\n  if (typeof value === \"object\") {\n    if (seen.has(value)) {\n      return \"[Circular Reference]\";\n    }\n\n    seen.add(value);\n\n    if (Array.isArray(value)) {\n      const result = value.map((item) => deepStringify(item, maxLength, seen));\n      seen.delete(value);\n      return result;\n    }\n\n    const result: Record<string, unknown> = {};\n    for (const [key, val] of Object.entries(value)) {\n      result[key] = deepStringify(val, maxLength, seen);\n    }\n    seen.delete(value);\n    return result;\n  }\n\n  return String(value);\n}\n\nfunction truncateString(str: string, maxLength: number): string {\n  if (str.length <= maxLength) {\n    return str;\n  }\n\n  const startLength = Math.floor((maxLength - 3) / 2);\n  const endLength = maxLength - 3 - startLength;\n\n  return str.slice(0, startLength) + \"...\" + str.slice(-endLength);\n}\n```",
                "include": true
              },
              "option7": {
                "content": "## action.utils.ts (Server Action Response Helper)\n\n**When to use**: All projects with server actions\n\n**File**: `lib/action.utils.ts`\n\n```typescript\nexport interface ActionResponse<T = unknown> {\n  data?: T;\n  error?: string;\n}\n\nexport function getActionResponse<T = unknown>({\n  data,\n  error,\n}: {\n  data?: T;\n  error?: unknown;\n} = {}): ActionResponse<T> {\n  if (error) {\n    const errorMessage =\n      error instanceof Error ? error.message : String(error);\n    return { error: errorMessage };\n  }\n\n  return { data };\n}\n```",
                "include": true
              }
            }
          },
          "include": true
        },
        {
          "id": "start-here",
          "name": "start-here",
          "displayName": "Start here",
          "type": "directory",
          "path": "start-here",
          "urlPath": "/start-here",
          "include": true,
          "children": [
            {
              "id": "start-here.tech-stack",
              "name": "tech-stack",
              "displayName": "Tech Stack",
              "type": "file",
              "order": 1,
              "path": "start-here.tech-stack",
              "urlPath": "/start-here/tech-stack",
              "content": "# {{appName:Your app name}} development roadmap\n\nWelcome to the development roadmap for {{appName:Your app name}}!\n\nThis collection of documents provides comprehensive instructions for creating a custom full-stack web application.\n\n## Technology stack\n\n{{appName:Your app name}} is a progressive web app built with the technologies outlined below. Start by installing these technologies using their \\`npm install\\` commands.\n\n<!-- component-InitialConfiguration -->\n",
              "components": [
                {
                  "id": "component-InitialConfiguration",
                  "name": "InitialConfiguration",
                  "displayName": "InitialConfiguration",
                  "type": "component",
                  "path": "tech-stack.component.InitialConfiguration",
                  "urlPath": "",
                  "componentId": "InitialConfiguration",
                  "include": true
                }
              ],
              "sections": {},
              "include": true
            },
            {
              "id": "start-here.theme",
              "name": "theme",
              "displayName": "Theme",
              "type": "file",
              "order": 2,
              "path": "start-here.theme",
              "urlPath": "/start-here/theme",
              "content": "# Theme configuration\n\nAdd the css below to your \\`styles/global.css\\` file and import the components from \\`components/ui\\` to apply your theme.\n\n<!-- component-ThemeConfiguration -->\n",
              "components": [
                {
                  "id": "component-ThemeConfiguration",
                  "name": "ThemeConfiguration",
                  "displayName": "ThemeConfiguration",
                  "type": "component",
                  "path": "theme.component.ThemeConfiguration",
                  "urlPath": "",
                  "componentId": "ThemeConfiguration",
                  "include": true
                }
              ],
              "sections": {},
              "include": true
            },
            {
              "id": "start-here.layout-routes",
              "name": "layout-routes",
              "displayName": "Layout & routes",
              "type": "file",
              "order": 3,
              "path": "start-here.layout-routes",
              "urlPath": "/start-here/layout-routes",
              "content": "# Layout wire frame and route structure\n\nCreate page and layout files within the nested directory structure outlined below to implement your app's route and layout structure\n\n<!-- component-LayoutAndStructure -->\n",
              "components": [
                {
                  "id": "component-LayoutAndStructure",
                  "name": "LayoutAndStructure",
                  "displayName": "LayoutAndStructure",
                  "type": "component",
                  "path": "layout-routes.component.LayoutAndStructure",
                  "urlPath": "",
                  "componentId": "LayoutAndStructure",
                  "include": true
                }
              ],
              "sections": {},
              "include": true
            },
            {
              "id": "start-here.database",
              "name": "database",
              "displayName": "Database",
              "type": "file",
              "order": 4,
              "path": "start-here.database",
              "urlPath": "/start-here/database",
              "content": "---\n---\n\n# Database\n\nDefine your schema, client files and Row Level Security to configure your database.\n\n<!-- component-DatabaseConfiguration -->\n",
              "components": [
                {
                  "id": "component-DatabaseConfiguration",
                  "name": "DatabaseConfiguration",
                  "displayName": "DatabaseConfiguration",
                  "type": "component",
                  "path": "database.component.DatabaseConfiguration",
                  "urlPath": "",
                  "componentId": "DatabaseConfiguration",
                  "include": true
                }
              ],
              "sections": {},
              "include": true
            },
            {
              "id": "start-here.tests",
              "name": "tests",
              "displayName": "Tests",
              "type": "file",
              "order": 5,
              "path": "start-here.tests",
              "urlPath": "/start-here/tests",
              "content": "# Tests\n\nDescribe the expected behaviour of your app verify the functionality and stress-test the security.\n\n<!-- component-Tests -->\n",
              "components": [
                {
                  "id": "component-Tests",
                  "name": "Tests",
                  "displayName": "Tests",
                  "type": "component",
                  "path": "tests.component.Tests",
                  "urlPath": "",
                  "componentId": "Tests",
                  "include": true
                }
              ],
              "sections": {},
              "include": true
            },
            {
              "id": "start-here.next-steps",
              "name": "next-steps",
              "displayName": "Next Steps",
              "type": "file",
              "order": 6,
              "path": "start-here.next-steps",
              "urlPath": "/start-here/next-steps",
              "content": "# Next steps\n\n1. Download your Roadmap\n2. Run \\`npx create-next-app@latest\\` to create your project repository.\n3. Paste your Roadmap into your project repository.\n4. Refer your AI to the \\`ROBOT_README.md\\` file\n5. Start building!\n",
              "components": [],
              "sections": {},
              "include": true
            }
          ]
        },
        {
          "id": "components",
          "name": "components",
          "displayName": "components",
          "type": "directory",
          "path": "components",
          "urlPath": "/components",
          "include": true,
          "previewOnly": true,
          "includeInToolbar": false,
          "visibleAfterPage": "start-here.theme",
          "children": [
            {
              "id": "components.ui",
              "name": "ui",
              "displayName": "ui",
              "type": "directory",
              "path": "components.ui",
              "urlPath": "/components/ui",
              "include": true,
              "previewOnly": true,
              "includeInToolbar": false,
              "children": [
                {
                  "id": "components.ui.accordion",
                  "name": "accordion",
                  "displayName": "accordion",
                  "type": "file",
                  "path": "components.ui.accordion",
                  "urlPath": "/components/ui/accordion",
                  "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b border-border\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline text-left [&[data-state=open]>svg]:rotate-180 font-sans tracking\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-5 w-5 shrink-0 transition-transform duration-200 text-muted-foreground\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down font-sans tracking\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n",
                  "components": [],
                  "sections": {},
                  "include": true,
                  "previewOnly": true,
                  "includeInToolbar": false,
                  "fileExtension": "tsx"
                },
                {
                  "id": "components.ui.alert-dialog",
                  "name": "alert-dialog",
                  "displayName": "alert-dialog",
                  "type": "file",
                  "path": "components.ui.alert-dialog",
                  "urlPath": "/components/ui/alert-dialog",
                  "content": "\"use client\";\n\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\";\nimport * as React from \"react\";\n\nimport { buttonVariants } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\n\nconst AlertDialog = AlertDialogPrimitive.Root;\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger;\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal;\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n));\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName;\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border p-6 duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] bg-card text-card-foreground border-border shadow radius\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n));\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName;\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n);\nAlertDialogHeader.displayName = \"AlertDialogHeader\";\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n);\nAlertDialogFooter.displayName = \"AlertDialogFooter\";\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold font-sans tracking\", className)}\n    {...props}\n  />\n));\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName;\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\n      \"text-sm text-muted-foreground font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n));\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName;\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n));\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName;\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n));\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName;\n\nexport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogOverlay,\n  AlertDialogPortal,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n};\n",
                  "components": [],
                  "sections": {},
                  "include": true,
                  "previewOnly": true,
                  "includeInToolbar": false,
                  "fileExtension": "tsx"
                },
                {
                  "id": "components.ui.alert",
                  "name": "alert",
                  "displayName": "alert",
                  "type": "file",
                  "path": "components.ui.alert",
                  "urlPath": "/components/ui/alert",
                  "content": "import { cva, type VariantProps } from \"class-variance-authority\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst alertVariants = cva(\n  \"relative w-full border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg~*]:pl-7 radius shadow font-sans tracking\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground border-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n);\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      role=\"alert\"\n      className={cn(alertVariants({ variant }), className)}\n      {...props}\n    />\n  );\n});\nAlert.displayName = \"Alert\";\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\n      \"mb-1 font-medium leading-none tracking-tight font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n));\nAlertTitle.displayName = \"AlertTitle\";\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-sm [&_p]:leading-relaxed font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n));\nAlertDescription.displayName = \"AlertDescription\";\n\nexport { Alert, AlertDescription, AlertTitle };\n",
                  "components": [],
                  "sections": {},
                  "include": true,
                  "previewOnly": true,
                  "includeInToolbar": false,
                  "fileExtension": "tsx"
                },
                {
                  "id": "components.ui.aspect-ratio",
                  "name": "aspect-ratio",
                  "displayName": "aspect-ratio",
                  "type": "file",
                  "path": "components.ui.aspect-ratio",
                  "urlPath": "/components/ui/aspect-ratio",
                  "content": "\"use client\"\n\nimport * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n",
                  "components": [],
                  "sections": {},
                  "include": true,
                  "previewOnly": true,
                  "includeInToolbar": false,
                  "fileExtension": "tsx"
                },
                {
                  "id": "components.ui.avatar",
                  "name": "avatar",
                  "displayName": "avatar",
                  "type": "file",
                  "path": "components.ui.avatar",
                  "urlPath": "/components/ui/avatar",
                  "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted text-muted-foreground font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n",
                  "components": [],
                  "sections": {},
                  "include": true,
                  "previewOnly": true,
                  "includeInToolbar": false,
                  "fileExtension": "tsx"
                },
                {
                  "id": "components.ui.badge",
                  "name": "badge",
                  "displayName": "badge",
                  "type": "file",
                  "path": "components.ui.badge",
                  "urlPath": "/components/ui/badge",
                  "content": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 radius border-ring font-sans tracking\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow hover:opacity-80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:opacity-80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow hover:opacity-80\",\n        outline: \"text-foreground border-border\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n",
                  "components": [],
                  "sections": {},
                  "include": true,
                  "previewOnly": true,
                  "includeInToolbar": false,
                  "fileExtension": "tsx"
                },
                {
                  "id": "components.ui.breadcrumb",
                  "name": "breadcrumb",
                  "displayName": "breadcrumb",
                  "type": "file",
                  "path": "components.ui.breadcrumb",
                  "urlPath": "/components/ui/breadcrumb",
                  "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5 font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground font-sans tracking\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground font-sans tracking\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n",
                  "components": [],
                  "sections": {},
                  "include": true,
                  "previewOnly": true,
                  "includeInToolbar": false,
                  "fileExtension": "tsx"
                },
                {
                  "id": "components.ui.button",
                  "name": "button",
                  "displayName": "button",
                  "type": "file",
                  "path": "components.ui.button",
                  "urlPath": "/components/ui/button",
                  "content": "import { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 radius font-sans tracking\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-2 bg-primary text-primary-foreground border-primary shadow hover:opacity-90\",\n        destructive:\n          \"border-2 bg-destructive text-destructive-foreground border-destructive shadow hover:opacity-90\",\n        outline:\n          \"border-2 border-input bg-background text-foreground shadow hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"border-2 bg-secondary text-secondary-foreground border-secondary shadow hover:opacity-80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 px-3 text-xs\",\n        lg: \"h-10 px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size }), className)}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n",
                  "components": [],
                  "sections": {},
                  "include": true,
                  "previewOnly": true,
                  "includeInToolbar": false,
                  "fileExtension": "tsx"
                },
                {
                  "id": "components.ui.calendar",
                  "name": "calendar",
                  "displayName": "calendar",
                  "type": "file",
                  "path": "components.ui.calendar",
                  "urlPath": "/components/ui/calendar",
                  "content": "\"use client\"\n\nimport * as React from \"react\"\nimport {\n  ChevronDownIcon,\n  ChevronLeftIcon,\n  ChevronRightIcon,\n} from \"lucide-react\"\nimport { DayButton, DayPicker, getDefaultClassNames } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button, buttonVariants } from \"@/components/ui/button\"\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  captionLayout = \"label\",\n  buttonVariant = \"ghost\",\n  formatters,\n  components,\n  ...props\n}: React.ComponentProps<typeof DayPicker> & {\n  buttonVariant?: React.ComponentProps<typeof Button>[\"variant\"]\n}) {\n  const defaultClassNames = getDefaultClassNames()\n\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\n        \"group/calendar [--cell-size:calc(var(--spacing)*9)] [[data-slot=card-content]_&]:bg-transparent [[data-slot=popover-content]_&]:bg-transparent\",\n        String.raw\\`rtl:**:[.rdp-button\\\\_next>svg]:rotate-180\\`,\n        String.raw\\`rtl:**:[.rdp-button\\\\_previous>svg]:rotate-180\\`,\n        className\n      )}\n      captionLayout={captionLayout}\n      formatters={{\n        formatMonthDropdown: (date) =>\n          date.toLocaleString(\"default\", { month: \"short\" }),\n        ...formatters,\n      }}\n      classNames={{\n        root: cn(\"w-fit\", defaultClassNames.root),\n        months: cn(\n          \"relative flex flex-col gap-4 md:flex-row\",\n          defaultClassNames.months\n        ),\n        month: cn(\"flex w-full flex-col gap-4\", defaultClassNames.month),\n        nav: cn(\n          \"absolute inset-x-0 top-0 flex w-full items-center justify-between gap-1\",\n          defaultClassNames.nav\n        ),\n        button_previous: cn(\n          buttonVariants({ variant: buttonVariant }),\n          \"h-[--cell-size] w-[--cell-size] select-none p-0 aria-disabled:opacity-50\",\n          defaultClassNames.button_previous\n        ),\n        button_next: cn(\n          buttonVariants({ variant: buttonVariant }),\n          \"h-[--cell-size] w-[--cell-size] select-none p-0 aria-disabled:opacity-50\",\n          defaultClassNames.button_next\n        ),\n        month_caption: cn(\n          \"flex h-[--cell-size] w-full items-center justify-center px-[--cell-size]\",\n          defaultClassNames.month_caption\n        ),\n        dropdowns: cn(\n          \"flex h-[--cell-size] w-full items-center justify-center gap-1.5 text-sm font-medium font-sans tracking\",\n          defaultClassNames.dropdowns\n        ),\n        dropdown_root: cn(\n          \"has-focus:border-ring border-input shadow-xs has-focus:focus-ring-color/50 has-focus:ring-[3px] relative rounded-md border\",\n          defaultClassNames.dropdown_root\n        ),\n        dropdown: cn(\n          \"bg-popover absolute inset-0 opacity-0\",\n          defaultClassNames.dropdown\n        ),\n        caption_label: cn(\n          \"select-none font-medium font-sans tracking\",\n          captionLayout === \"label\"\n            ? \"text-sm\"\n            : \"[&>svg]:text-muted-foreground flex h-8 items-center gap-1 rounded-md pl-2 pr-1 text-sm [&>svg]:size-3.5\",\n          defaultClassNames.caption_label\n        ),\n        table: \"w-full border-collapse\",\n        weekdays: cn(\"flex\", defaultClassNames.weekdays),\n        weekday: cn(\n          \"text-muted-foreground flex-1 select-none rounded-md text-[0.8rem] font-normal font-sans tracking\",\n          defaultClassNames.weekday\n        ),\n        week: cn(\"mt-2 flex w-full\", defaultClassNames.week),\n        week_number_header: cn(\n          \"w-[--cell-size] select-none\",\n          defaultClassNames.week_number_header\n        ),\n        week_number: cn(\n          \"text-muted-foreground select-none text-[0.8rem] font-sans tracking\",\n          defaultClassNames.week_number\n        ),\n        day: cn(\n          \"group/day relative aspect-square h-full w-full select-none p-0 text-center [&:first-child[data-selected=true]_button]:rounded-l-md [&:last-child[data-selected=true]_button]:rounded-r-md\",\n          defaultClassNames.day\n        ),\n        range_start: cn(\n          \"bg-accent rounded-l-md\",\n          defaultClassNames.range_start\n        ),\n        range_middle: cn(\"rounded-none\", defaultClassNames.range_middle),\n        range_end: cn(\"bg-accent rounded-r-md\", defaultClassNames.range_end),\n        today: cn(\n          \"bg-accent text-accent-foreground rounded-md data-[selected=true]:rounded-none\",\n          defaultClassNames.today\n        ),\n        outside: cn(\n          \"text-muted-foreground aria-selected:text-muted-foreground\",\n          defaultClassNames.outside\n        ),\n        disabled: cn(\n          \"text-muted-foreground opacity-50\",\n          defaultClassNames.disabled\n        ),\n        hidden: cn(\"invisible\", defaultClassNames.hidden),\n        ...classNames,\n      }}\n      components={{\n        Root: ({ className, rootRef, ...props }) => {\n          return (\n            <div\n              data-slot=\"calendar\"\n              ref={rootRef}\n              className={cn(className)}\n              {...props}\n            />\n          )\n        },\n        Chevron: ({ className, orientation, ...props }) => {\n          if (orientation === \"left\") {\n            return (\n              <ChevronLeftIcon className={cn(\"size-4\", className)} {...props} />\n            )\n          }\n\n          if (orientation === \"right\") {\n            return (\n              <ChevronRightIcon\n                className={cn(\"size-4\", className)}\n                {...props}\n              />\n            )\n          }\n\n          return (\n            <ChevronDownIcon className={cn(\"size-4\", className)} {...props} />\n          )\n        },\n        DayButton: CalendarDayButton,\n        WeekNumber: ({ children, ...props }) => {\n          return (\n            <td {...props}>\n              <div className=\"flex size-[--cell-size] items-center justify-center text-center\">\n                {children}\n              </div>\n            </td>\n          )\n        },\n        ...components,\n      }}\n      {...props}\n    />\n  )\n}\n\nfunction CalendarDayButton({\n  className,\n  day,\n  modifiers,\n  ...props\n}: React.ComponentProps<typeof DayButton>) {\n  const defaultClassNames = getDefaultClassNames()\n\n  const ref = React.useRef<HTMLButtonElement>(null)\n  React.useEffect(() => {\n    if (modifiers.focused) ref.current?.focus()\n  }, [modifiers.focused])\n\n  return (\n    <Button\n      ref={ref}\n      variant=\"ghost\"\n      size=\"icon\"\n      data-day={day.date.toLocaleDateString()}\n      data-selected-single={\n        modifiers.selected &&\n        !modifiers.range_start &&\n        !modifiers.range_end &&\n        !modifiers.range_middle\n      }\n      data-range-start={modifiers.range_start}\n      data-range-end={modifiers.range_end}\n      data-range-middle={modifiers.range_middle}\n      className={cn(\n        \"data-selected-single-bg-primary data-selected-single-text-primary-foreground data-range-middle-bg-accent data-range-middle-text-accent-foreground data-range-start-bg-primary data-range-start-text-primary-foreground data-range-end-bg-primary data-range-end-text-primary-foreground group-data-[focused=true]/day:border-ring group-data-[focused=true]/day:focus-ring-color/50 flex aspect-square h-auto w-full min-w-[--cell-size] flex-col gap-1 font-normal leading-none data-[range-end=true]:rounded-md data-[range-middle=true]:rounded-none data-[range-start=true]:rounded-md group-data-[focused=true]/day:relative group-data-[focused=true]/day:z-10 group-data-[focused=true]/day:ring-[3px] [&>span]:text-xs [&>span]:opacity-70 font-sans tracking\",\n        defaultClassNames.day,\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Calendar, CalendarDayButton }\n",
                  "components": [],
                  "sections": {},
                  "include": true,
                  "previewOnly": true,
                  "includeInToolbar": false,
                  "fileExtension": "tsx"
                },
                {
                  "id": "components.ui.card",
                  "name": "card",
                  "displayName": "card",
                  "type": "file",
                  "path": "components.ui.card",
                  "urlPath": "/components/ui/card",
                  "content": "import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"border radius bg-card text-card-foreground border-border shadow\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\";\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex !rounded flex-col gap-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\";\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight font-sans tracking\", className)}\n    {...props}\n  />\n));\nCardTitle.displayName = \"CardTitle\";\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground font-sans tracking\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\";\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n));\nCardContent.displayName = \"CardContent\";\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n));\nCardFooter.displayName = \"CardFooter\";\n\nexport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n};\n",
                  "components": [],
                  "sections": {},
                  "include": true,
                  "previewOnly": true,
                  "includeInToolbar": false,
                  "fileExtension": "tsx"
                },
                {
                  "id": "components.ui.checkbox",
                  "name": "checkbox",
                  "displayName": "checkbox",
                  "type": "file",
                  "path": "components.ui.checkbox",
                  "urlPath": "/components/ui/checkbox",
                  "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 border border-primary radius shadow focus-visible:outline-none focus-visible:ring-1 border-ring disabled:cursor-not-allowed disabled:opacity-50 data-checked-bg-primary data-checked-text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n",
                  "components": [],
                  "sections": {},
                  "include": true,
                  "previewOnly": true,
                  "includeInToolbar": false,
                  "fileExtension": "tsx"
                },
                {
                  "id": "components.ui.collapsible",
                  "name": "collapsible",
                  "displayName": "collapsible",
                  "type": "file",
                  "path": "components.ui.collapsible",
                  "urlPath": "/components/ui/collapsible",
                  "content": "\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n",
                  "components": [],
                  "sections": {},
                  "include": true,
                  "previewOnly": true,
                  "includeInToolbar": false,
                  "fileExtension": "tsx"
                },
                {
                  "id": "components.ui.context-menu",
                  "name": "context-menu",
                  "displayName": "context-menu",
                  "type": "file",
                  "path": "components.ui.context-menu",
                  "urlPath": "/components/ui/context-menu",
                  "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center radius px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground font-sans tracking\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden radius border bg-popover p-1 text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin] border-border font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden radius border bg-popover p-1 text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin] border-border font-sans tracking\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center radius px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 font-sans tracking\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center radius py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 font-sans tracking\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center radius py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 font-sans tracking\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-4 w-4 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground font-sans tracking\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground font-sans\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n",
                  "components": [],
                  "sections": {},
                  "include": true,
                  "previewOnly": true,
                  "includeInToolbar": false,
                  "fileExtension": "tsx"
                },
                {
                  "id": "components.ui.dialog",
                  "name": "dialog",
                  "displayName": "dialog",
                  "type": "file",
                  "path": "components.ui.dialog",
                  "urlPath": "/components/ui/dialog",
                  "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border p-6 duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] bg-card text-card-foreground border-border shadow radius\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 opacity-70 transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 border-ring focus:ring-offset-2 disabled:pointer-events-none radius text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground font-sans tracking\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogTrigger,\n  DialogClose,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n",
                  "components": [],
                  "sections": {},
                  "include": true,
                  "previewOnly": true,
                  "includeInToolbar": false,
                  "fileExtension": "tsx"
                },
                {
                  "id": "components.ui.drawer",
                  "name": "drawer",
                  "displayName": "drawer",
                  "type": "file",
                  "path": "components.ui.drawer",
                  "urlPath": "/components/ui/drawer",
                  "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background border-border font-sans tracking\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground font-sans tracking\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n",
                  "components": [],
                  "sections": {},
                  "include": true,
                  "previewOnly": true,
                  "includeInToolbar": false,
                  "fileExtension": "tsx"
                },
                {
                  "id": "components.ui.dropdown-menu",
                  "name": "dropdown-menu",
                  "displayName": "dropdown-menu",
                  "type": "file",
                  "path": "components.ui.dropdown-menu",
                  "urlPath": "/components/ui/dropdown-menu",
                  "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 radius px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 font-sans tracking\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden radius border bg-popover p-1 text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin] border-border font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden radius border bg-popover p-1 text-popover-foreground shadow border-border font-sans tracking\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 radius px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0 font-sans tracking\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center radius py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 font-sans tracking\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center radius py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 font-sans tracking\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold font-sans tracking\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60 font-sans\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n",
                  "components": [],
                  "sections": {},
                  "include": true,
                  "previewOnly": true,
                  "includeInToolbar": false,
                  "fileExtension": "tsx"
                },
                {
                  "id": "components.ui.hover-card",
                  "name": "hover-card",
                  "displayName": "hover-card",
                  "type": "file",
                  "path": "components.ui.hover-card",
                  "urlPath": "/components/ui/hover-card",
                  "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 radius border bg-popover p-4 text-popover-foreground shadow outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin] border-border font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n",
                  "components": [],
                  "sections": {},
                  "include": true,
                  "previewOnly": true,
                  "includeInToolbar": false,
                  "fileExtension": "tsx"
                },
                {
                  "id": "components.ui.input-otp",
                  "name": "input-otp",
                  "displayName": "input-otp",
                  "type": "file",
                  "path": "components.ui.input-otp",
                  "urlPath": "/components/ui/input-otp",
                  "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Minus } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-9 w-9 items-center justify-center border-y border-r border-input text-sm shadow transition-all first:rounded-l-md first:border-l last:rounded-r-md font-sans tracking\",\n        isActive && \"z-10 ring-1 border-ring\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Minus />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n",
                  "components": [],
                  "sections": {},
                  "include": true,
                  "previewOnly": true,
                  "includeInToolbar": false,
                  "fileExtension": "tsx"
                },
                {
                  "id": "components.ui.input",
                  "name": "input",
                  "displayName": "input",
                  "type": "file",
                  "path": "components.ui.input",
                  "urlPath": "/components/ui/input",
                  "content": "import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full border-2 bg-transparent px-3 py-1 text-base transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium focus-visible:outline-none focus-visible:ring-1 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm border-input text-foreground shadow radius font-sans tracking\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nInput.displayName = \"Input\";\n\nexport { Input };\n",
                  "components": [],
                  "sections": {},
                  "include": true,
                  "previewOnly": true,
                  "includeInToolbar": false,
                  "fileExtension": "tsx"
                },
                {
                  "id": "components.ui.label",
                  "name": "label",
                  "displayName": "label",
                  "type": "file",
                  "path": "components.ui.label",
                  "urlPath": "/components/ui/label",
                  "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 font-sans tracking\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n",
                  "components": [],
                  "sections": {},
                  "include": true,
                  "previewOnly": true,
                  "includeInToolbar": false,
                  "fileExtension": "tsx"
                },
                {
                  "id": "components.ui.menubar",
                  "name": "menubar",
                  "displayName": "menubar",
                  "type": "file",
                  "path": "components.ui.menubar",
                  "urlPath": "/components/ui/menubar",
                  "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-9 items-center space-x-1 radius border bg-background p-1 shadow border-border font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center radius px-3 py-1 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center radius px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground font-sans tracking\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden radius border bg-popover p-1 text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin] border-border font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden radius border bg-popover p-1 text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin] border-border font-sans tracking\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center radius px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 font-sans tracking\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center radius py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 font-sans tracking\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center radius py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 font-sans tracking\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-4 w-4 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold font-sans tracking\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground font-sans\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n",
                  "components": [],
                  "sections": {},
                  "include": true,
                  "previewOnly": true,
                  "includeInToolbar": false,
                  "fileExtension": "tsx"
                },
                {
                  "id": "components.ui.navigation-menu",
                  "name": "navigation-menu",
                  "displayName": "navigation-menu",
                  "type": "file",
                  "path": "components.ui.navigation-menu",
                  "urlPath": "/components/ui/navigation-menu",
                  "content": "import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-9 w-max items-center justify-center radius bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent font-sans tracking\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden radius border bg-popover text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)] border-border font-sans tracking\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n",
                  "components": [],
                  "sections": {},
                  "include": true,
                  "previewOnly": true,
                  "includeInToolbar": false,
                  "fileExtension": "tsx"
                },
                {
                  "id": "components.ui.popover",
                  "name": "popover",
                  "displayName": "popover",
                  "type": "file",
                  "path": "components.ui.popover",
                  "urlPath": "/components/ui/popover",
                  "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverAnchor = PopoverPrimitive.Anchor\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 border p-4 outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin] bg-popover text-popover-foreground border-border shadow radius font-sans tracking\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }\n",
                  "components": [],
                  "sections": {},
                  "include": true,
                  "previewOnly": true,
                  "includeInToolbar": false,
                  "fileExtension": "tsx"
                },
                {
                  "id": "components.ui.progress",
                  "name": "progress",
                  "displayName": "progress",
                  "type": "file",
                  "path": "components.ui.progress",
                  "urlPath": "/components/ui/progress",
                  "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-2 w-full overflow-hidden bg-secondary radius\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className={cn(\n        \"h-full w-full flex-1 transition-all bg-primary\",\n        \\`translate-x-[-\\${100 - (value || 0)}%]\\`\n      )}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n",
                  "components": [],
                  "sections": {},
                  "include": true,
                  "previewOnly": true,
                  "includeInToolbar": false,
                  "fileExtension": "tsx"
                },
                {
                  "id": "components.ui.radio-group",
                  "name": "radio-group",
                  "displayName": "radio-group",
                  "type": "file",
                  "path": "components.ui.radio-group",
                  "urlPath": "/components/ui/radio-group",
                  "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border focus:outline-none focus-visible:ring-1 disabled:cursor-not-allowed disabled:opacity-50 border-primary text-primary shadow border-ring\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-3.5 w-3.5 fill-current text-primary\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n",
                  "components": [],
                  "sections": {},
                  "include": true,
                  "previewOnly": true,
                  "includeInToolbar": false,
                  "fileExtension": "tsx"
                },
                {
                  "id": "components.ui.resizable",
                  "name": "resizable",
                  "displayName": "resizable",
                  "type": "file",
                  "path": "components.ui.resizable",
                  "urlPath": "/components/ui/resizable",
                  "content": "\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border border-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n",
                  "components": [],
                  "sections": {},
                  "include": true,
                  "previewOnly": true,
                  "includeInToolbar": false,
                  "fileExtension": "tsx"
                },
                {
                  "id": "components.ui.scroll-area",
                  "name": "scroll-area",
                  "displayName": "scroll-area",
                  "type": "file",
                  "path": "components.ui.scroll-area",
                  "urlPath": "/components/ui/scroll-area",
                  "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n",
                  "components": [],
                  "sections": {},
                  "include": true,
                  "previewOnly": true,
                  "includeInToolbar": false,
                  "fileExtension": "tsx"
                },
                {
                  "id": "components.ui.select",
                  "name": "select",
                  "displayName": "select",
                  "type": "file",
                  "path": "components.ui.select",
                  "urlPath": "/components/ui/select",
                  "content": "\"use client\";\n\nimport * as SelectPrimitive from \"@radix-ui/react-select\";\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Select = SelectPrimitive.Root;\n\nconst SelectGroup = SelectPrimitive.Group;\n\nconst SelectValue = SelectPrimitive.Value;\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between whitespace-nowrap border-2 bg-transparent px-3 py-2 text-sm focus:outline-none focus:ring-1 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1 border-input text-foreground shadow radius border-ring font-sans tracking\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n));\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName;\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n));\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName;\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n));\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName;\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden border data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin] bg-popover text-popover-foreground border-border shadow radius font-sans tracking\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n));\nSelectContent.displayName = SelectPrimitive.Content.displayName;\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n));\nSelectLabel.displayName = SelectPrimitive.Label.displayName;\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center py-1.5 pl-2 pr-8 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 radius focus:bg-accent focus:text-accent-foreground font-sans tracking\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute right-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n));\nSelectItem.displayName = SelectPrimitive.Item.displayName;\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n));\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName;\n\nexport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n};\n",
                  "components": [],
                  "sections": {},
                  "include": true,
                  "previewOnly": true,
                  "includeInToolbar": false,
                  "fileExtension": "tsx"
                },
                {
                  "id": "components.ui.separator",
                  "name": "separator",
                  "displayName": "separator",
                  "type": "file",
                  "path": "components.ui.separator",
                  "urlPath": "/components/ui/separator",
                  "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n",
                  "components": [],
                  "sections": {},
                  "include": true,
                  "previewOnly": true,
                  "includeInToolbar": false,
                  "fileExtension": "tsx"
                },
                {
                  "id": "components.ui.sheet",
                  "name": "sheet",
                  "displayName": "sheet",
                  "type": "file",
                  "path": "components.ui.sheet",
                  "urlPath": "/components/ui/sheet",
                  "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 p-6 transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out bg-card text-card-foreground shadow\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b border-border data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t border-border data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r border-border data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4 border-l border-border data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 opacity-70 transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 border-ring focus:ring-offset-2 disabled:pointer-events-none radius text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n      {children}\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground font-sans tracking\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground font-sans tracking\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n",
                  "components": [],
                  "sections": {},
                  "include": true,
                  "previewOnly": true,
                  "includeInToolbar": false,
                  "fileExtension": "tsx"
                },
                {
                  "id": "components.ui.skeleton",
                  "name": "skeleton",
                  "displayName": "skeleton",
                  "type": "file",
                  "path": "components.ui.skeleton",
                  "urlPath": "/components/ui/skeleton",
                  "content": "import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse bg-muted radius\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n",
                  "components": [],
                  "sections": {},
                  "include": true,
                  "previewOnly": true,
                  "includeInToolbar": false,
                  "fileExtension": "tsx"
                },
                {
                  "id": "components.ui.slider",
                  "name": "slider",
                  "displayName": "slider",
                  "type": "file",
                  "path": "components.ui.slider",
                  "urlPath": "/components/ui/slider",
                  "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-1.5 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-4 w-4 rounded-full border transition-colors focus-visible:outline-none focus-visible:ring-1 disabled:pointer-events-none disabled:opacity-50 bg-background border-primary shadow border-ring\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n",
                  "components": [],
                  "sections": {},
                  "include": true,
                  "previewOnly": true,
                  "includeInToolbar": false,
                  "fileExtension": "tsx"
                },
                {
                  "id": "components.ui.sonner",
                  "name": "sonner",
                  "displayName": "sonner",
                  "type": "file",
                  "path": "components.ui.sonner",
                  "urlPath": "/components/ui/sonner",
                  "content": "\"use client\"\n\nimport { useTheme } from \"next-themes\"\nimport { Toaster as Sonner } from \"sonner\"\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow group-[.toaster]:font-sans group-[.toaster]:tracking\",\n          description: \"group-[.toast]:text-muted-foreground group-[.toast]:font-sans group-[.toast]:tracking\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground group-[.toast]:font-sans group-[.toast]:tracking\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground group-[.toast]:font-sans group-[.toast]:tracking\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster }\n",
                  "components": [],
                  "sections": {},
                  "include": true,
                  "previewOnly": true,
                  "includeInToolbar": false,
                  "fileExtension": "tsx"
                },
                {
                  "id": "components.ui.switch",
                  "name": "switch",
                  "displayName": "switch",
                  "type": "file",
                  "path": "components.ui.switch",
                  "urlPath": "/components/ui/switch",
                  "content": "\"use client\";\n\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\ninterface SwitchProps\n  extends React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root> {\n  size?: \"default\" | \"lg\";\n}\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  SwitchProps\n>(({ className, size = \"default\", ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex shrink-0 cursor-pointer items-center border transition-colors disabled:cursor-not-allowed disabled:opacity-50 rounded-full data-checked-bg-primary data-unchecked-bg-input focus-ring border-primary\",\n      size === \"default\" ? \"h-5 w-9\" : \"h-6 w-11\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block ring-0 transition-transform rounded-full bg-background shadow border border-primary \",\n        size === \"default\"\n          ? \"h-4 w-4 data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0\"\n          : \"h-5 w-5 data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    ></SwitchPrimitives.Thumb>\n  </SwitchPrimitives.Root>\n));\nSwitch.displayName = SwitchPrimitives.Root.displayName;\n\nexport { Switch };\n",
                  "components": [],
                  "sections": {},
                  "include": true,
                  "previewOnly": true,
                  "includeInToolbar": false,
                  "fileExtension": "tsx"
                },
                {
                  "id": "components.ui.table",
                  "name": "table",
                  "displayName": "table",
                  "type": "file",
                  "path": "components.ui.table",
                  "urlPath": "/components/ui/table",
                  "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm font-sans tracking\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b [&_tr]:border-border\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t font-medium [&>tr]:last:border-b-0 border-border bg-muted text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors border-border hover:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-10 px-2 text-left align-middle font-medium [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px] text-muted-foreground font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\n      \"p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px] font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground font-sans tracking\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n",
                  "components": [],
                  "sections": {},
                  "include": true,
                  "previewOnly": true,
                  "includeInToolbar": false,
                  "fileExtension": "tsx"
                },
                {
                  "id": "components.ui.tabs",
                  "name": "tabs",
                  "displayName": "tabs",
                  "type": "file",
                  "path": "components.ui.tabs",
                  "urlPath": "/components/ui/tabs",
                  "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-9 items-center justify-center radius bg-muted p-1 text-muted-foreground font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap radius px-3 py-1 text-sm font-medium transition-all focus-visible:outline-none focus-visible:ring-ring focus-visible:ring-2 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 focus-visible:outline-none focus-visible:ring-ring focus-visible:ring-2 focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n",
                  "components": [],
                  "sections": {},
                  "include": true,
                  "previewOnly": true,
                  "includeInToolbar": false,
                  "fileExtension": "tsx"
                },
                {
                  "id": "components.ui.textarea",
                  "name": "textarea",
                  "displayName": "textarea",
                  "type": "file",
                  "path": "components.ui.textarea",
                  "urlPath": "/components/ui/textarea",
                  "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[60px] w-full border-2 bg-transparent px-3 py-2 text-base focus-visible:outline-none focus-visible:ring-1 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm border-input text-foreground shadow radius border-ring font-sans tracking\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n",
                  "components": [],
                  "sections": {},
                  "include": true,
                  "previewOnly": true,
                  "includeInToolbar": false,
                  "fileExtension": "tsx"
                },
                {
                  "id": "components.ui.toast",
                  "name": "toast",
                  "displayName": "toast",
                  "type": "file",
                  "path": "components.ui.toast",
                  "urlPath": "/components/ui/toast",
                  "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-2 overflow-hidden radius border p-4 pr-6 shadow transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full font-sans tracking\",\n  {\n    variants: {\n      variant: {\n        default: \"border-border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center radius border bg-transparent px-3 text-sm font-medium transition-colors hover:bg-secondary focus:outline-none focus:ring-1 border-ring disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-1 top-1 radius p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-1 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold [&+div]:text-xs font-sans tracking\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90 font-sans tracking\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n",
                  "components": [],
                  "sections": {},
                  "include": true,
                  "previewOnly": true,
                  "includeInToolbar": false,
                  "fileExtension": "tsx"
                },
                {
                  "id": "components.ui.toaster",
                  "name": "toaster",
                  "displayName": "toaster",
                  "type": "file",
                  "path": "components.ui.toaster",
                  "urlPath": "/components/ui/toaster",
                  "content": "\"use client\";\n\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport function Toaster() {\n  const { toasts } = useToast();\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        );\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  );\n}\n",
                  "components": [],
                  "sections": {},
                  "include": true,
                  "previewOnly": true,
                  "includeInToolbar": false,
                  "fileExtension": "tsx"
                },
                {
                  "id": "components.ui.toggle",
                  "name": "toggle",
                  "displayName": "toggle",
                  "type": "file",
                  "path": "components.ui.toggle",
                  "urlPath": "/components/ui/toggle",
                  "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center gap-2 radius text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 font-sans tracking\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent shadow hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-9 px-2 min-w-9\",\n        sm: \"h-8 px-1.5 min-w-8\",\n        lg: \"h-10 px-2.5 min-w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n",
                  "components": [],
                  "sections": {},
                  "include": true,
                  "previewOnly": true,
                  "includeInToolbar": false,
                  "fileExtension": "tsx"
                },
                {
                  "id": "components.ui.tooltip",
                  "name": "tooltip",
                  "displayName": "tooltip",
                  "type": "file",
                  "path": "components.ui.tooltip",
                  "urlPath": "/components/ui/tooltip",
                  "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Portal>\n    <TooltipPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 overflow-hidden px-3 py-1.5 text-xs animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin] bg-popover text-popover-foreground border-border radius shadow font-sans tracking\",\n        className\n      )}\n      {...props}\n    />\n  </TooltipPrimitive.Portal>\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n",
                  "components": [],
                  "sections": {},
                  "include": true,
                  "previewOnly": true,
                  "includeInToolbar": false,
                  "fileExtension": "tsx"
                }
              ]
            }
          ]
        }
      ]
    },
    "claude": {
      "id": "claude",
      "name": "claude",
      "displayName": "CLAUDE",
      "type": "file",
      "order": 7,
      "path": "claude",
      "urlPath": "/claude",
      "content": "# CLAUDE.md\n\nThis file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.\n\n## Core Technologies\n\n<!-- section-1 -->\n\n## Database & Authentication\n\n<!-- section-2 -->\n\n## Deployment Platform\n\n<!-- section-3 -->\n\n## Authentication Methods\n\n<!-- section-4 -->\n\n## Additional Features\n\n<!-- section-5 -->\n\n## Testing Framework\n\n<!-- section-6 -->\n\n# General rules:\n\n- Don't include any comments in any files.\n- All errors should be thrown - no \"fallback\" functionality\n- Import \"cn\" from \"@/lib/utils\" to concatenate classes.\n- Always use \\`@/lib/env.utils\\` for environment variables and browser APIs to ensure unit test compatibility.\n\n# File Organization and Naming Conventions\n\n- Types and store files alongside ancestor files\n- Actions and hooks files alongside descendent files\n\n\\`\\`\\`txt\nsrc/\n├── components/\n│   ├── Component.tsx\n│   └── Component.types.ts\n├── pages/\n│   ├── Page.tsx\n│   ├── Page.hooks.tsx\n│   └── Page.types.ts\n├── hooks/\n│   └── useFeature.tsx\n└── lib/\n    ├── utils.ts\n    └── log.utils.ts\n\n    key:\n    ◄─── = defined\n    ───► = imported\n\\`\\`\\`\n\n# Hook, action, store and type patterns\n\nDB <-> Supabase Client <-> hook <-> store\n\n- Supabase client queries are called directly in react-query hooks.\n- Data returned in the onSuccess function of react-query hooks is used to update the corresponding zustand store (if applicable).\n- Loading and error state is managed via the react-query hooks, NOT the zustand store.\n- All db types should be defined from \\`@/integrations/supabase/types\\`.\n\n## Example of file patterns - [\\`docs/util.md\\`](docs/util.md)\n\nFollow the examples outlined in [\\`docs/util.md\\`](docs/util.md) when working on hook, store or type files.\n\n# Testing\n\nAll tests should be performed with Jest or Playwright and documented in the \\`Tests.md\\` document\n\n## Test rules:\n\n- The test should find elements in the DOM via data-attributes. Add corresponding data-attributes to the elements in the components. Import the data-attribute values from an enum exported from \\`@/test.types.ts\\`\n- Do not use wait in the tests. Only use timeouts.\n\n## Tests.md\n\nThe test document should list all tests in the repo, with each test case listed in a single line with an indented line below with the pass condition.\nTest document should begin with an index and number each test as demonstrated below:\n\n# Tests.md file example:\n\n\\`\\`\\`md\n# Tests Documentation\n\n## Run All Tests\n\n**Command:** \\`npm run test\\`\n✓ Runs the complete test suite across all test files\n\n## Test Index\n\n1. [Name](#1-name-tests) - \\`npm run test:name\\`\n\n## 1. Name Tests\n\n**File:** \\`__tests__/name.test.ts\\`\n**Command:** \\`npm run test:name\\`\n\n### Name Test\n\n- should do something\n  ✓ Validates expected results\n\n- should do something else\n  ✓ Validates expected results\n\\`\\`\\`\n\n# Environment Variables and Browser APIs\n\nAll environment variable access and browser API usage must use the centralized utilities from \\`@/lib/env.utils\\`:\n\n\\`\\`\\`typescript\nimport { ENV, getBrowserAPI } from \"@/lib/env.utils\";\n\nconst apiUrl = ENV.SUPABASE_URL;\nconst storage = getBrowserAPI(() => localStorage);\n\\`\\`\\`\n\n# Console.logging\n\nAll logging should be performed using the \\`conditionalLog\\` function exported from \\`lib/log.utils.ts\\`\nThe \\`VITE_LOG_LABELS\\` variable in \\`.env.local\\` stores a comma separated string of log labels. Logs are returned if \\`VITE_LOG_LABELS=\"all\"\\`, or if \\`VITE_LOG_LABELS\\` includes the label arg in \\`conditionalLog\\`.\n",
      "components": [],
      "sections": {
        "section1": {
          "option1": {
            "content": "## Core Technologies Stack\n\n**When to use**: This is the default configuration for all projects\n\n**Technologies**:\n- **Next.js 15** with App Router architecture\n- **TypeScript** for type safety\n- **TailwindCSS v4** for styling\n- **Shadcn** for UI components\n- **Zustand** for state management\n- **React Query** for server state management\n\n**Import patterns**:\n```typescript\nimport { create } from \"zustand\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { cn } from \"@/lib/shadcn.utils\";\n```\n\n**Example component**:\n```typescript\nimport { cn } from \"@/lib/shadcn.utils\";\n\nexport function Button({ className, ...props }) {\n  return (\n    <button\n      className={cn(\"px-4 py-2 rounded\", className)}\n      {...props}\n    />\n  );\n}\n```",
            "include": true
          }
        },
        "section2": {
          "option1": {
            "content": "## No Database\n\n**When to use**: Selected when \"No database\" is chosen in InitialConfiguration\n\n**Technologies**:\n- Next.js 15\n- TypeScript\n- Client-side only state management\n\n**Example state**:\n```typescript\nexport interface AppState {\n  theme: 'light' | 'dark';\n  setTheme: (theme: 'light' | 'dark') => void;\n}\n```",
            "include": true
          },
          "option2": {
            "content": "## NeonDB with Better-Auth\n\n**When to use**: Selected when \"NeonDB\" database is chosen in InitialConfiguration\n\n**Technologies**:\n- **NeonDB** (serverless PostgreSQL)\n- **Prisma** ORM\n- **Better-Auth** for authentication\n- **PostgreSQL** database\n\n**Dependencies**:\n```json\n{\n  \"dependencies\": {\n    \"@prisma/client\": \"latest\",\n    \"better-auth\": \"latest\",\n    \"postgres\": \"latest\"\n  }\n}\n```\n\n**Environment Variables**:\n```env\nDATABASE_URL=\"postgresql://...\"\nBETTER_AUTH_SECRET=\"your-secret\"\nBETTER_AUTH_URL=\"http://localhost:3000\"\n```\n\n**Import patterns**:\n```typescript\nimport { User } from \"@prisma/client\";\nimport { auth } from \"@/lib/auth\";\nimport { getAuthenticatedClient } from \"@/lib/auth.utils\";\n```\n\n**Example usage**:\n```typescript\nconst session = await auth.api.getSession({\n  headers: await headers(),\n});\n\nconst { db } = await getAuthenticatedClient();\nconst user = await db.user.findUnique({\n  where: { id: session.user.id },\n});\n```",
            "include": true
          },
          "option3": {
            "content": "## Supabase with Better-Auth\n\n**When to use**: Selected when \"Supabase with Better-Auth\" is chosen in InitialConfiguration\n\n**Technologies**:\n- **Supabase** (PostgreSQL + additional services)\n- **Prisma** ORM\n- **Better-Auth** for authentication\n- **PostgreSQL** database with RLS support\n\n**Dependencies**:\n```json\n{\n  \"dependencies\": {\n    \"@prisma/client\": \"latest\",\n    \"better-auth\": \"latest\",\n    \"@supabase/supabase-js\": \"latest\"\n  }\n}\n```\n\n**Environment Variables**:\n```env\nDATABASE_URL=\"postgresql://...\"\nSUPABASE_URL=\"https://your-project.supabase.co\"\nSUPABASE_ANON_KEY=\"your-anon-key\"\nSUPABASE_JWT_SECRET=\"your-jwt-secret\"\nBETTER_AUTH_SECRET=\"your-secret\"\nBETTER_AUTH_URL=\"http://localhost:3000\"\n```\n\n**Import patterns**:\n```typescript\nimport { User } from \"@prisma/client\";\nimport { auth } from \"@/lib/auth\";\nimport { getAuthenticatedClient } from \"@/lib/auth.utils\";\nimport { createClient } from \"@/lib/supabase/server\";\n```\n\n**Example with RLS**:\n```typescript\nconst { db } = await getAuthenticatedClient();\nconst data = await db.post.findMany({\n  where: { published: true },\n});\n```",
            "include": true
          },
          "option4": {
            "content": "## Supabase Only\n\n**When to use**: Selected when \"Supabase Only\" is chosen in InitialConfiguration\n\n**Technologies**:\n- **Supabase** (PostgreSQL + Auth + Storage + Realtime)\n- **Prisma** ORM (optional)\n- **PostgreSQL** database\n\n**Dependencies**:\n```json\n{\n  \"dependencies\": {\n    \"@supabase/supabase-js\": \"latest\",\n    \"@supabase/ssr\": \"latest\"\n  }\n}\n```\n\n**Environment Variables**:\n```env\nNEXT_PUBLIC_SUPABASE_URL=\"https://your-project.supabase.co\"\nNEXT_PUBLIC_SUPABASE_ANON_KEY=\"your-anon-key\"\n```\n\n**Import patterns**:\n```typescript\nimport { createClient } from \"@/lib/supabase/server\";\nimport { createClient as createBrowserClient } from \"@/lib/supabase/client\";\n```\n\n**Example usage**:\n```typescript\nconst supabase = createClient();\nconst { data, error } = await supabase\n  .from('users')\n  .select('*')\n  .eq('id', userId);\n```",
            "include": true
          }
        },
        "section3": {
          "option1": {
            "content": "## Serverless Deployment (Vercel)\n\n**When to use**: Selected when \"Serverless (Vercel)\" deployment is chosen in InitialConfiguration\n\n**Technologies**:\n- **Vercel** for serverless deployment\n- Edge Runtime support\n- Automatic scaling\n\n**Configuration**:\n```json\n{\n  \"buildCommand\": \"npm run build\",\n  \"outputDirectory\": \".next\",\n  \"framework\": \"nextjs\"\n}\n```\n\n**Environment setup**:\n- Set environment variables in Vercel dashboard\n- Use `NEXT_PUBLIC_` prefix for client-side variables\n- Database connections should use connection pooling\n\n**Best practices**:\n- Use serverless-friendly database (NeonDB, Supabase)\n- Keep function execution under 10 seconds\n- Optimize bundle size for faster cold starts",
            "include": true
          },
          "option2": {
            "content": "## Always-on Deployment (Railway)\n\n**When to use**: Selected when \"Always-on (Railway)\" deployment is chosen in InitialConfiguration\n\n**Technologies**:\n- **Railway** for persistent deployment\n- Long-running processes supported\n- Direct database connections\n\n**Configuration**:\n```json\n{\n  \"build\": {\n    \"builder\": \"NIXPACKS\"\n  },\n  \"deploy\": {\n    \"startCommand\": \"npm run start\",\n    \"restartPolicyType\": \"ON_FAILURE\"\n  }\n}\n```\n\n**Environment setup**:\n- Set environment variables in Railway dashboard\n- Database connections can use direct connections\n- No timeout restrictions\n\n**Best practices**:\n- Suitable for WebSocket servers\n- Good for background jobs and cron tasks\n- Use for applications requiring persistent connections",
            "include": true
          }
        },
        "section4": {
          "option1": {
            "content": "## No Authentication\n\n**When to use**: Application doesn't require user authentication\n\n**Configuration**: No auth-related dependencies or setup required",
            "include": true
          },
          "option2": {
            "content": "## Magic Link Authentication\n\n**When to use**: Selected when \"Magic Link\" is chosen in InitialConfiguration\n\n**Technologies**:\n- **Better-Auth** with magic link plugin\n- **Resend** for email delivery\n\n**Dependencies**:\n```json\n{\n  \"dependencies\": {\n    \"better-auth\": \"latest\",\n    \"resend\": \"latest\"\n  }\n}\n```\n\n**Environment Variables**:\n```env\nRESEND_API_KEY=\"your-resend-key\"\nBETTER_AUTH_SECRET=\"your-secret\"\n```\n\n**Configuration**:\n```typescript\nimport { betterAuth } from \"better-auth\";\nimport { magicLink } from \"better-auth/plugins\";\n\nexport const auth = betterAuth({\n  plugins: [\n    magicLink({\n      sendMagicLink: async ({ email, url }) => {\n      },\n    }),\n  ],\n});\n```",
            "include": true
          },
          "option3": {
            "content": "## Email & Password Authentication\n\n**When to use**: Selected when \"Email & Password\" is chosen in InitialConfiguration\n\n**Technologies**:\n- **Better-Auth** with email/password\n- **Resend** for verification emails\n\n**Dependencies**:\n```json\n{\n  \"dependencies\": {\n    \"better-auth\": \"latest\",\n    \"resend\": \"latest\"\n  }\n}\n```\n\n**Client usage**:\n```typescript\nimport { signIn, signUp } from \"@/lib/auth-client\";\n\nawait signUp.email({\n  email: \"user@example.com\",\n  password: \"securePassword123\",\n  name: \"User Name\",\n});\n\nawait signIn.email({\n  email: \"user@example.com\",\n  password: \"securePassword123\",\n});\n```",
            "include": true
          },
          "option4": {
            "content": "## OTP Authentication\n\n**When to use**: Selected when \"OTP\" is chosen in InitialConfiguration\n\n**Technologies**:\n- **Better-Auth** with OTP plugin\n- **Resend** for OTP delivery\n\n**Configuration**:\n```typescript\nimport { otp } from \"better-auth/plugins\";\n\nexport const auth = betterAuth({\n  plugins: [\n    otp({\n      sendOTP: async ({ email, otp }) => {\n      },\n    }),\n  ],\n});\n```",
            "include": true
          },
          "option5": {
            "content": "## Two-Factor Authentication (2FA)\n\n**When to use**: Selected when \"2FA\" is chosen in InitialConfiguration\n\n**Technologies**:\n- **Better-Auth** with twoFactor plugin\n\n**Configuration**:\n```typescript\nimport { twoFactor } from \"better-auth/plugins\";\n\nexport const auth = betterAuth({\n  plugins: [twoFactor()],\n});\n```\n\n**Client usage**:\n```typescript\nimport { twoFactor } from \"@/lib/auth-client\";\n\nawait twoFactor.enable({\n  password: \"userPassword\",\n});\n\nawait twoFactor.verifyTotp({\n  code: \"123456\",\n});\n```",
            "include": true
          },
          "option6": {
            "content": "## Passkey Authentication\n\n**When to use**: Selected when \"Passkey\" is chosen in InitialConfiguration\n\n**Technologies**:\n- **Better-Auth** with passkey plugin\n- WebAuthn API\n\n**Configuration**:\n```typescript\nimport { passkey } from \"better-auth/plugins\";\n\nexport const auth = betterAuth({\n  plugins: [\n    passkey({\n      rpName: \"Your App Name\",\n      rpID: \"yourdomain.com\",\n    }),\n  ],\n});\n```",
            "include": true
          },
          "option7": {
            "content": "## Anonymous Sessions\n\n**When to use**: Selected when \"Anonymous Sessions\" is chosen in InitialConfiguration\n\n**Technologies**:\n- **Better-Auth** with anonymous plugin\n\n**Configuration**:\n```typescript\nimport { anonymous } from \"better-auth/plugins\";\n\nexport const auth = betterAuth({\n  plugins: [anonymous()],\n});\n```\n\n**Client usage**:\n```typescript\nimport { signIn } from \"@/lib/auth-client\";\n\nawait signIn.anonymous();\n```",
            "include": true
          },
          "option8": {
            "content": "## Google OAuth\n\n**When to use**: Selected when \"Google OAuth\" is chosen in InitialConfiguration\n\n**Environment Variables**:\n```env\nGOOGLE_CLIENT_ID=\"your-client-id\"\nGOOGLE_CLIENT_SECRET=\"your-client-secret\"\n```\n\n**Configuration**:\n```typescript\nexport const auth = betterAuth({\n  socialProviders: {\n    google: {\n      clientId: process.env.GOOGLE_CLIENT_ID!,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n    },\n  },\n});\n```\n\n**Client usage**:\n```typescript\nimport { signIn } from \"@/lib/auth-client\";\n\nawait signIn.social({\n  provider: \"google\",\n  callbackURL: \"/dashboard\",\n});\n```",
            "include": true
          },
          "option9": {
            "content": "## GitHub OAuth\n\n**When to use**: Selected when \"GitHub OAuth\" is chosen in InitialConfiguration\n\n**Environment Variables**:\n```env\nGITHUB_CLIENT_ID=\"your-client-id\"\nGITHUB_CLIENT_SECRET=\"your-client-secret\"\n```\n\n**Configuration**:\n```typescript\nexport const auth = betterAuth({\n  socialProviders: {\n    github: {\n      clientId: process.env.GITHUB_CLIENT_ID!,\n      clientSecret: process.env.GITHUB_CLIENT_SECRET!,\n    },\n  },\n});\n```",
            "include": true
          },
          "option10": {
            "content": "## Apple Sign In\n\n**When to use**: Selected when \"Apple Sign In\" is chosen in InitialConfiguration\n\n**Environment Variables**:\n```env\nAPPLE_CLIENT_ID=\"your-client-id\"\nAPPLE_CLIENT_SECRET=\"your-client-secret\"\n```\n\n**Configuration**:\n```typescript\nexport const auth = betterAuth({\n  socialProviders: {\n    apple: {\n      clientId: process.env.APPLE_CLIENT_ID!,\n      clientSecret: process.env.APPLE_CLIENT_SECRET!,\n    },\n  },\n});\n```",
            "include": true
          },
          "option11": {
            "content": "## Password Only\n\n**When to use**: Selected when \"Password Only\" is chosen in InitialConfiguration (no email verification)\n\n**Configuration**:\n```typescript\nexport const auth = betterAuth({\n  emailAndPassword: {\n    enabled: true,\n    requireEmailVerification: false,\n  },\n});\n```",
            "include": true
          }
        },
        "section5": {
          "option1": {
            "content": "## File Storage (Supabase)\n\n**When to use**: Selected when \"File Storage\" is enabled in InitialConfiguration (requires Supabase)\n\n**Technologies**:\n- **Supabase Storage**\n\n**Import patterns**:\n```typescript\nimport { createClient } from \"@/lib/supabase/server\";\n```\n\n**Server-side upload**:\n```typescript\nconst supabase = createClient();\nconst { data, error } = await supabase.storage\n  .from('bucket-name')\n  .upload('path/to/file', file);\n```\n\n**Client-side upload**:\n```typescript\nimport { createClient } from \"@/lib/supabase/client\";\n\nconst supabase = createClient();\nconst { data, error } = await supabase.storage\n  .from('bucket-name')\n  .upload('path/to/file', file);\n```\n\n**Get public URL**:\n```typescript\nconst { data } = supabase.storage\n  .from('bucket-name')\n  .getPublicUrl('path/to/file');\n```",
            "include": true
          },
          "option2": {
            "content": "## PayPal Payments\n\n**When to use**: Selected when \"PayPal payments\" is enabled in InitialConfiguration\n\n**Dependencies**:\n```json\n{\n  \"dependencies\": {\n    \"@paypal/checkout-server-sdk\": \"latest\"\n  }\n}\n```\n\n**Environment Variables**:\n```env\nPAYPAL_CLIENT_ID=\"your-client-id\"\nPAYPAL_CLIENT_SECRET=\"your-client-secret\"\nPAYPAL_MODE=\"sandbox\"\n```\n\n**Server action example**:\n```typescript\nimport paypal from \"@paypal/checkout-server-sdk\";\n\nconst environment = new paypal.core.SandboxEnvironment(\n  process.env.PAYPAL_CLIENT_ID!,\n  process.env.PAYPAL_CLIENT_SECRET!\n);\nconst client = new paypal.core.PayPalHttpClient(environment);\n```",
            "include": true
          },
          "option3": {
            "content": "## Stripe Payments\n\n**When to use**: Selected when \"Stripe payments\" is enabled in InitialConfiguration\n\n**Dependencies**:\n```json\n{\n  \"dependencies\": {\n    \"stripe\": \"latest\",\n    \"@stripe/stripe-js\": \"latest\"\n  }\n}\n```\n\n**Environment Variables**:\n```env\nSTRIPE_SECRET_KEY=\"sk_test_...\"\nNEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=\"pk_test_...\"\n```\n\n**Server-side setup**:\n```typescript\nimport Stripe from \"stripe\";\n\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\n  apiVersion: \"2024-10-28.acacia\",\n});\n```\n\n**Client-side setup**:\n```typescript\nimport { loadStripe } from \"@stripe/stripe-js\";\n\nconst stripePromise = loadStripe(\n  process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY!\n);\n```\n\n**Create payment intent**:\n```typescript\nconst paymentIntent = await stripe.paymentIntents.create({\n  amount: 1000,\n  currency: \"usd\",\n});\n```",
            "include": true
          },
          "option4": {
            "content": "## Stripe Subscriptions\n\n**When to use**: Selected when \"Stripe subscriptions\" is enabled in InitialConfiguration\n\n**Dependencies**:\n```json\n{\n  \"dependencies\": {\n    \"stripe\": \"latest\",\n    \"@stripe/stripe-js\": \"latest\"\n  }\n}\n```\n\n**Create subscription**:\n```typescript\nconst subscription = await stripe.subscriptions.create({\n  customer: customerId,\n  items: [{ price: priceId }],\n});\n```\n\n**Webhook handling**:\n```typescript\nimport { headers } from \"next/headers\";\n\nexport async function POST(req: Request) {\n  const body = await req.text();\n  const signature = headers().get(\"stripe-signature\")!;\n\n  const event = stripe.webhooks.constructEvent(\n    body,\n    signature,\n    process.env.STRIPE_WEBHOOK_SECRET!\n  );\n\n  if (event.type === \"customer.subscription.updated\") {\n  }\n\n  return new Response(JSON.stringify({ received: true }));\n}\n```",
            "include": true
          },
          "option5": {
            "content": "## AI Image Generation (OpenRouter)\n\n**When to use**: Selected when \"Image generation\" is enabled in InitialConfiguration\n\n**Dependencies**:\n```json\n{\n  \"dependencies\": {\n    \"openai\": \"latest\"\n  }\n}\n```\n\n**Environment Variables**:\n```env\nOPENROUTER_API_KEY=\"your-api-key\"\n```\n\n**Server action example**:\n```typescript\nimport OpenAI from \"openai\";\n\nconst openai = new OpenAI({\n  baseURL: \"https://openrouter.ai/api/v1\",\n  apiKey: process.env.OPENROUTER_API_KEY,\n});\n\nconst response = await openai.images.generate({\n  model: \"dall-e-3\",\n  prompt: \"A beautiful landscape\",\n  n: 1,\n  size: \"1024x1024\",\n});\n```",
            "include": true
          },
          "option6": {
            "content": "## AI Text Generation/Analysis (OpenRouter)\n\n**When to use**: Selected when \"Text generation/analysis\" is enabled in InitialConfiguration\n\n**Dependencies**:\n```json\n{\n  \"dependencies\": {\n    \"openai\": \"latest\"\n  }\n}\n```\n\n**Server action example**:\n```typescript\nimport OpenAI from \"openai\";\n\nconst openai = new OpenAI({\n  baseURL: \"https://openrouter.ai/api/v1\",\n  apiKey: process.env.OPENROUTER_API_KEY,\n});\n\nconst completion = await openai.chat.completions.create({\n  model: \"anthropic/claude-3.5-sonnet\",\n  messages: [\n    { role: \"user\", content: \"Hello!\" }\n  ],\n});\n```\n\n**Streaming response**:\n```typescript\nconst stream = await openai.chat.completions.create({\n  model: \"anthropic/claude-3.5-sonnet\",\n  messages: [{ role: \"user\", content: \"Tell me a story\" }],\n  stream: true,\n});\n\nfor await (const chunk of stream) {\n  const content = chunk.choices[0]?.delta?.content || \"\";\n  process.stdout.write(content);\n}\n```",
            "include": true
          },
          "option7": {
            "content": "## Email Notifications (Resend)\n\n**When to use**: Selected when \"Email notifications\" is enabled in InitialConfiguration\n\n**Dependencies**:\n```json\n{\n  \"dependencies\": {\n    \"resend\": \"latest\"\n  }\n}\n```\n\n**Environment Variables**:\n```env\nRESEND_API_KEY=\"re_...\"\n```\n\n**Server action example**:\n```typescript\nimport { Resend } from \"resend\";\n\nconst resend = new Resend(process.env.RESEND_API_KEY);\n\nawait resend.emails.send({\n  from: \"noreply@yourdomain.com\",\n  to: \"user@example.com\",\n  subject: \"Welcome\",\n  html: \"<p>Welcome to our app!</p>\",\n});\n```",
            "include": true
          },
          "option8": {
            "content": "## In-App Notifications\n\n**When to use**: Selected when \"In-app notifications\" is enabled in InitialConfiguration\n\n**Database schema**:\n```prisma\nmodel Notification {\n  id        String   @id @default(cuid())\n  userId    String\n  title     String\n  message   String\n  read      Boolean  @default(false)\n  createdAt DateTime @default(now())\n  user      User     @relation(fields: [userId], references: [id])\n}\n```\n\n**Create notification action**:\n```typescript\nconst notification = await db.notification.create({\n  data: {\n    userId: userId,\n    title: \"New Message\",\n    message: \"You have a new message\",\n  },\n});\n```\n\n**Query notifications hook**:\n```typescript\nexport const useNotifications = () => {\n  return useQuery({\n    queryKey: [\"notifications\"],\n    queryFn: async () => {\n      const { data } = await getNotificationsAction();\n      return data;\n    },\n  });\n};\n```",
            "include": true
          }
        },
        "section6": {
          "option1": {
            "content": "## Testing with Jest & Playwright\n\n**When to use**: All projects should include testing\n\n**Technologies**:\n- **Jest** for unit and integration tests\n- **Playwright** for end-to-end tests\n\n**Dependencies**:\n```json\n{\n  \"devDependencies\": {\n    \"jest\": \"latest\",\n    \"@playwright/test\": \"latest\",\n    \"@testing-library/react\": \"latest\",\n    \"@testing-library/jest-dom\": \"latest\"\n  }\n}\n```\n\n**Jest configuration** (`jest.config.js`):\n```javascript\nmodule.exports = {\n  preset: \"next\",\n  testEnvironment: \"jest-environment-jsdom\",\n  setupFilesAfterEnv: [\"<rootDir>/jest.setup.js\"],\n};\n```\n\n**Playwright configuration** (`playwright.config.ts`):\n```typescript\nimport { defineConfig } from \"@playwright/test\";\n\nexport default defineConfig({\n  testDir: \"./e2e\",\n  use: {\n    baseURL: \"http://localhost:3000\",\n  },\n});\n```\n\n**Test file pattern**:\n```typescript\nimport { test, expect } from \"@playwright/test\";\n\ntest(\"should navigate to home page\", async ({ page }) => {\n  await page.goto(\"/\");\n  await expect(page).toHaveTitle(/Home/);\n});\n```",
            "include": true
          }
        }
      },
      "include": true
    },
    "util": {
      "id": "util",
      "name": "util",
      "displayName": "util",
      "type": "file",
      "order": 8,
      "path": "util",
      "urlPath": "/util",
      "content": "# Utility File Patterns\n\n## Types File Examples\n\n<!-- section-1 -->\n\n## Stores File Examples\n\n<!-- section-2 -->\n\n## Actions File Examples\n\n<!-- section-3 -->\n\n## Hooks File Examples\n\n<!-- section-4 -->\n\n## Utility Files\n\n<!-- section-5 -->\n\n# Toast Component Example\n\n\\`\\`\\`typescript\nimport { toast } from \"sonner\";\nimport { Toast } from \"@/app/(components)/Toast\";\nimport { TestDataAttributes } from \"@/test.types\";\n\ntoast.custom(() => (\n  <Toast\n    variant=\"success\"\n    title=\"Success\"\n    message=\"Operation completed successfully\"\n    data-cy={TestDataAttributes.TOAST_SUCCESS}\n  />\n));\n\ntoast.custom(() => (\n  <Toast\n    variant=\"error\"\n    title=\"Error\"\n    message=\"An error occurred while processing your request\"\n    data-cy={TestDataAttributes.TOAST_ERROR}\n  />\n));\n\ntoast.custom(() => (\n  <Toast\n    variant=\"info\"\n    title=\"Information\"\n    message=\"Please review the details before proceeding\"\n    data-cy={TestDataAttributes.TOAST_INFO}\n  />\n));\n\\`\\`\\`\n\n# Better Auth Organization & Role Management\n\nThis section provides comprehensive examples for implementing organization and role management with Better-Auth.\n\n## Database Schema - \\`schema.prisma\\`\n\n\\`\\`\\`prisma\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n  schemas  = [\"auth\", \"public\"]\n}\n\nmodel user {\n  id               String       @id @default(cuid())\n  email            String       @unique\n  name             String?\n  role             String       @default(\"user\")\n  banned           Boolean      @default(false)\n  banReason        String?\n  banExpires       DateTime?\n  emailVerified    Boolean?\n  createdAt        DateTime     @default(now())\n  updatedAt        DateTime     @updatedAt\n  image            String?\n  MagicLink        MagicLink[]\n  account          account[]\n  invitation       invitation[]\n  member           member[]\n  session          session[]\n\n  @@schema(\"auth\")\n}\n\nmodel session {\n  id                   String   @id @default(cuid())\n  userId               String\n  expiresAt            DateTime\n  token                String   @unique\n  createdAt            DateTime @default(now())\n  updatedAt            DateTime @updatedAt\n  ipAddress            String?\n  userAgent            String?\n  impersonatedBy       String?\n  activeOrganizationId String?\n  user                 user     @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@schema(\"auth\")\n}\n\nmodel account {\n  id                    String    @id @default(cuid())\n  userId                String\n  accountId             String\n  providerId            String\n  accessToken           String?\n  refreshToken          String?\n  idToken               String?\n  accessTokenExpiresAt  DateTime?\n  refreshTokenExpiresAt DateTime?\n  scope                 String?\n  password              String?\n  createdAt             DateTime  @default(now())\n  updatedAt             DateTime  @updatedAt\n  user                  user      @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([providerId, accountId])\n  @@schema(\"auth\")\n}\n\nmodel verification {\n  id         String   @id @default(cuid())\n  identifier String\n  value      String\n  expiresAt  DateTime\n  createdAt  DateTime @default(now())\n  updatedAt  DateTime @updatedAt\n\n  @@unique([identifier, value])\n  @@schema(\"auth\")\n}\n\nmodel MagicLink {\n  id        String   @id @default(cuid())\n  userId    String\n  token     String   @unique\n  email     String\n  expiresAt DateTime\n  createdAt DateTime @default(now())\n  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@schema(\"auth\")\n}\n\nmodel organization {\n  id         String       @id @default(cuid())\n  name       String\n  slug       String       @unique\n  logo       String?\n  metadata   Json?\n  createdAt  DateTime     @default(now())\n  updatedAt  DateTime     @updatedAt\n  invitation invitation[]\n  member     member[]\n\n  @@schema(\"auth\")\n}\n\nmodel member {\n  id             String       @id @default(cuid())\n  userId         String\n  organizationId String\n  role           String       @default(\"member\")\n  createdAt      DateTime     @default(now())\n  updatedAt      DateTime     @updatedAt\n  organization   organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)\n  user           user         @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([userId, organizationId])\n  @@schema(\"auth\")\n}\n\nmodel invitation {\n  id             String       @id @default(cuid())\n  organizationId String\n  email          String\n  role           String       @default(\"member\")\n  inviterId      String\n  token          String?      @unique\n  status         String       @default(\"pending\")\n  expiresAt      DateTime\n  createdAt      DateTime     @default(now())\n  updatedAt      DateTime     @updatedAt\n  user           user         @relation(fields: [inviterId], references: [id], onDelete: Cascade)\n  organization   organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)\n\n  @@unique([email, organizationId])\n  @@schema(\"auth\")\n}\n\\`\\`\\`\n\n## Console Logging\n\nAll logging should be performed using the \\`conditionalLog\\` function exported from \\`lib/log.utils.ts\\`\n\nThe \\`NEXT_PUBLIC_LOG_LABELS\\` variable in \\`.env.local\\` stores a comma separated string of log labels. Logs are returned if \\`NEXT_PUBLIC_LOG_LABELS=\"all\"\\`, or if \\`NEXT_PUBLIC_LOG_LABELS\\` includes the label arg in \\`conditionalLog\\`.\n",
      "components": [],
      "sections": {
        "section1": {
          "option1": {
            "content": "## Basic Types (No Database)\n\n**When to use**: When no database is configured\n\n**Example**:\n```typescript\nexport interface AppState {\n  theme: 'light' | 'dark';\n  setTheme: (theme: 'light' | 'dark') => void;\n}\n\nexport interface FormData {\n  name: string;\n  email: string;\n}\n```",
            "include": true
          },
          "option2": {
            "content": "## Types with Prisma\n\n**When to use**: When using NeonDB or Supabase with Prisma\n\n**Import pattern**:\n```typescript\nimport { User, Post } from \"@prisma/client\";\n```\n\n**Example**:\n```typescript\nimport { User } from \"@prisma/client\";\n\nexport interface AppState {\n  user: User | null;\n  setUser: (user: User | null) => void;\n  tempEmail?: string;\n  setTempEmail: (tempEmail: string) => void;\n  reset: () => void;\n}\n\nexport interface SignInData {\n  email: string;\n  password: string;\n}\n```",
            "include": true
          },
          "option3": {
            "content": "## Types with Better-Auth Session\n\n**When to use**: When using Better-Auth for authentication\n\n**Import pattern**:\n```typescript\nimport { Session } from \"better-auth/types\";\nimport { User } from \"@prisma/client\";\n```\n\n**Example**:\n```typescript\nimport { User } from \"@prisma/client\";\n\nexport interface AppState {\n  user: User | null;\n  setUser: (user: User | null) => void;\n  reset: () => void;\n}\n\nexport interface ExtendedUser extends User {\n  profile?: {\n    isOnboardingComplete: boolean;\n  } | null;\n}\n```",
            "include": true
          },
          "option4": {
            "content": "## Types with File Storage\n\n**When to use**: When Supabase storage is enabled\n\n**Example**:\n```typescript\nexport interface FileUploadData {\n  file: File;\n  bucket: string;\n  path: string;\n}\n\nexport interface FileMetadata {\n  url: string;\n  path: string;\n  size: number;\n  mimeType: string;\n}\n```",
            "include": true
          },
          "option5": {
            "content": "## Types with Payment Data\n\n**When to use**: When Stripe or PayPal is enabled\n\n**Example**:\n```typescript\nexport interface PaymentIntentData {\n  amount: number;\n  currency: string;\n  customerId?: string;\n}\n\nexport interface SubscriptionData {\n  priceId: string;\n  customerId: string;\n  trialDays?: number;\n}\n```",
            "include": true
          },
          "option6": {
            "content": "## Types with AI Integration\n\n**When to use**: When OpenRouter AI is enabled\n\n**Example**:\n```typescript\nexport interface ImageGenerationRequest {\n  prompt: string;\n  size: \"1024x1024\" | \"1792x1024\" | \"1024x1792\";\n  model: string;\n}\n\nexport interface ChatCompletionRequest {\n  messages: Array<{\n    role: \"user\" | \"assistant\" | \"system\";\n    content: string;\n  }>;\n  model: string;\n  stream?: boolean;\n}\n```",
            "include": true
          }
        },
        "section2": {
          "option1": {
            "content": "## Basic Zustand Store\n\n**When to use**: Simple client-side state management\n\n**Example**:\n```typescript\nimport { create } from \"zustand\";\n\ninterface ThemeState {\n  theme: 'light' | 'dark';\n  setTheme: (theme: 'light' | 'dark') => void;\n}\n\nconst initialState = {\n  theme: 'light' as const,\n};\n\nexport const useThemeStore = create<ThemeState>()((set) => ({\n  ...initialState,\n  setTheme: (theme) => set({ theme }),\n}));\n```",
            "include": true
          },
          "option2": {
            "content": "## Persisted Store\n\n**When to use**: When state needs to persist across sessions\n\n**Example**:\n```typescript\nimport { create } from \"zustand\";\nimport { persist } from \"zustand/middleware\";\n\ninterface SettingsState {\n  notifications: boolean;\n  language: string;\n  setNotifications: (enabled: boolean) => void;\n  setLanguage: (lang: string) => void;\n}\n\nexport const useSettingsStore = create<SettingsState>()(\n  persist(\n    (set) => ({\n      notifications: true,\n      language: 'en',\n      setNotifications: (notifications) => set({ notifications }),\n      setLanguage: (language) => set({ language }),\n    }),\n    {\n      name: 'settings-storage',\n    }\n  )\n);\n```",
            "include": true
          },
          "option3": {
            "content": "## Store with Authentication State\n\n**When to use**: When using Better-Auth with user session\n\n**Example**:\n```typescript\nimport { User } from \"@prisma/client\";\nimport { create } from \"zustand\";\nimport { AppState } from \"./layout.types\";\n\nconst initialState = {\n  user: null,\n};\n\nexport const useAppStore = create<AppState>()((set) => ({\n  ...initialState,\n  setUser: (user) => set({ user }),\n  reset: () => set(initialState),\n}));\n```",
            "include": true
          },
          "option4": {
            "content": "## Store with Multi-Tenant Support\n\n**When to use**: When using Better-Auth organization plugin\n\n**Example**:\n```typescript\nimport { create } from \"zustand\";\n\ninterface OrganizationState {\n  activeOrganizationId: string | null;\n  setActiveOrganization: (id: string | null) => void;\n  reset: () => void;\n}\n\nconst initialState = {\n  activeOrganizationId: null,\n};\n\nexport const useOrganizationStore = create<OrganizationState>()((set) => ({\n  ...initialState,\n  setActiveOrganization: (activeOrganizationId) => set({ activeOrganizationId }),\n  reset: () => set(initialState),\n}));\n```",
            "include": true
          }
        },
        "section3": {
          "option1": {
            "content": "## Basic Server Actions (No Auth)\n\n**When to use**: Simple server actions without authentication\n\n**Example**:\n```typescript\n\"use server\";\n\nimport { ActionResponse, getActionResponse } from \"@/lib/action.utils\";\n\nexport const getDataAction = async (): Promise<ActionResponse<string[]>> => {\n  try {\n    const data = [\"item1\", \"item2\", \"item3\"];\n    return getActionResponse({ data });\n  } catch (error) {\n    return getActionResponse({ error });\n  }\n};\n```",
            "include": true
          },
          "option2": {
            "content": "## Actions with Better-Auth\n\n**When to use**: When using Better-Auth for authentication\n\n**Example**:\n```typescript\n\"use server\";\n\nimport { ActionResponse, getActionResponse } from \"@/lib/action.utils\";\nimport { auth } from \"@/lib/auth\";\nimport { User } from \"@prisma/client\";\nimport { headers } from \"next/headers\";\n\nexport const getUserAction = async (): Promise<ActionResponse<User | null>> => {\n  try {\n    const session = await auth.api.getSession({\n      headers: await headers(),\n    });\n\n    if (!session?.user) return getActionResponse();\n\n    return getActionResponse({ data: session.user as User });\n  } catch (error) {\n    return getActionResponse({ error });\n  }\n};\n```",
            "include": true
          },
          "option3": {
            "content": "## Actions with Prisma + RLS\n\n**When to use**: When using Prisma with Row Level Security\n\n**Example**:\n```typescript\n\"use server\";\n\nimport { ActionResponse, getActionResponse } from \"@/lib/action.utils\";\nimport { auth } from \"@/lib/auth\";\nimport { getAuthenticatedClient } from \"@/lib/auth.utils\";\nimport { User } from \"@prisma/client\";\nimport { headers } from \"next/headers\";\n\nexport const getUserAction = async (): Promise<ActionResponse<User | null>> => {\n  try {\n    const session = await auth.api.getSession({\n      headers: await headers(),\n    });\n\n    if (!session?.user) return getActionResponse();\n\n    const { db } = await getAuthenticatedClient();\n\n    const prismaUser = await db.user.findUnique({\n      where: { id: session.user.id },\n    });\n\n    return getActionResponse({ data: prismaUser });\n  } catch (error) {\n    return getActionResponse({ error });\n  }\n};\n```",
            "include": true
          },
          "option4": {
            "content": "## Actions with File Upload (Supabase)\n\n**When to use**: When Supabase storage is enabled\n\n**Example**:\n```typescript\n\"use server\";\n\nimport { ActionResponse, getActionResponse } from \"@/lib/action.utils\";\nimport { createClient } from \"@/lib/supabase/server\";\n\nexport const uploadFileAction = async (\n  formData: FormData\n): Promise<ActionResponse<{ url: string }>> => {\n  try {\n    const file = formData.get(\"file\") as File;\n    const bucket = formData.get(\"bucket\") as string;\n    const path = formData.get(\"path\") as string;\n\n    const supabase = createClient();\n    const { data, error } = await supabase.storage\n      .from(bucket)\n      .upload(path, file);\n\n    if (error) throw error;\n\n    const { data: urlData } = supabase.storage\n      .from(bucket)\n      .getPublicUrl(path);\n\n    return getActionResponse({ data: { url: urlData.publicUrl } });\n  } catch (error) {\n    return getActionResponse({ error });\n  }\n};\n```",
            "include": true
          },
          "option5": {
            "content": "## Actions with Payments (Stripe/PayPal)\n\n**When to use**: When Stripe or PayPal is enabled\n\n**Stripe Example**:\n```typescript\n\"use server\";\n\nimport { ActionResponse, getActionResponse } from \"@/lib/action.utils\";\nimport Stripe from \"stripe\";\n\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\n  apiVersion: \"2024-10-28.acacia\",\n});\n\nexport const createPaymentIntentAction = async (\n  amount: number\n): Promise<ActionResponse<{ clientSecret: string }>> => {\n  try {\n    const paymentIntent = await stripe.paymentIntents.create({\n      amount,\n      currency: \"usd\",\n    });\n\n    return getActionResponse({\n      data: { clientSecret: paymentIntent.client_secret! },\n    });\n  } catch (error) {\n    return getActionResponse({ error });\n  }\n};\n```",
            "include": true
          },
          "option6": {
            "content": "## Actions with AI Integration (OpenRouter)\n\n**When to use**: When OpenRouter AI is enabled\n\n**Example**:\n```typescript\n\"use server\";\n\nimport { ActionResponse, getActionResponse } from \"@/lib/action.utils\";\nimport OpenAI from \"openai\";\n\nconst openai = new OpenAI({\n  baseURL: \"https://openrouter.ai/api/v1\",\n  apiKey: process.env.OPENROUTER_API_KEY,\n});\n\nexport const generateTextAction = async (\n  prompt: string\n): Promise<ActionResponse<{ text: string }>> => {\n  try {\n    const completion = await openai.chat.completions.create({\n      model: \"anthropic/claude-3.5-sonnet\",\n      messages: [{ role: \"user\", content: prompt }],\n    });\n\n    const text = completion.choices[0]?.message?.content || \"\";\n\n    return getActionResponse({ data: { text } });\n  } catch (error) {\n    return getActionResponse({ error });\n  }\n};\n```",
            "include": true
          }
        },
        "section4": {
          "option1": {
            "content": "## Basic React Query Hooks\n\n**When to use**: Simple data fetching without authentication\n\n**Example**:\n```typescript\n\"use client\";\n\nimport { useQuery } from \"@tanstack/react-query\";\nimport { getDataAction } from \"./page.actions\";\n\nexport const useGetData = () => {\n  return useQuery({\n    queryKey: [\"data\"],\n    queryFn: async () => {\n      const { data, error } = await getDataAction();\n      if (error) throw error;\n      return data;\n    },\n  });\n};\n```",
            "include": true
          },
          "option2": {
            "content": "## Hooks with Better-Auth Client\n\n**When to use**: When using Better-Auth for authentication\n\n**Example**:\n```typescript\n\"use client\";\n\nimport { configuration, privatePaths } from \"@/configuration\";\nimport { signIn } from \"@/lib/auth-client\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { usePathname, useRouter } from \"next/navigation\";\nimport { toast } from \"sonner\";\nimport { Toast } from \"../(components)/Toast\";\nimport { TestDataAttributes } from \"@/test.types\";\nimport { useAppStore } from \"../layout.stores\";\nimport { SignInData } from \"../layout.types\";\nimport { getUserAction } from \"./layout.actions\";\n\nexport const useGetUser = () => {\n  const { setUser, reset } = useAppStore();\n  const pathname = usePathname();\n  const router = useRouter();\n\n  return useQuery({\n    queryKey: [\"user\"],\n    queryFn: async () => {\n      const { data, error } = await getUserAction();\n      if (!data || error) {\n        if (privatePaths.includes(pathname)) {\n          router.push(configuration.paths.signIn);\n        }\n        reset();\n      }\n      if (error) throw error;\n      setUser(data ?? null);\n      return data;\n    },\n    staleTime: 1000 * 60 * 5,\n  });\n};\n\nexport const useSignIn = () => {\n  const { setUser } = useAppStore();\n  const router = useRouter();\n\n  return useMutation({\n    mutationFn: async (signInData: SignInData) => {\n      const { error } = await signIn.email({\n        email: signInData.email,\n        password: signInData.password,\n      });\n\n      if (error) throw error;\n      const { data: userData, error: userError } = await getUserAction();\n\n      if (userError) throw new Error(userError);\n\n      return userData;\n    },\n    onSuccess: (data) => {\n      if (data) {\n        setUser(data);\n      }\n      toast.custom(() => (\n        <Toast\n          variant=\"success\"\n          title=\"Success\"\n          message=\"Successfully signed in\"\n          data-cy={TestDataAttributes.TOAST_SUCCESS}\n        />\n      ));\n      router.push(configuration.paths.home);\n    },\n    onError: (error: Error) => {\n      toast.custom(() => (\n        <Toast\n          variant=\"error\"\n          title=\"Sign In Failed\"\n          message={error.message || \"Failed to sign in\"}\n          data-cy={TestDataAttributes.TOAST_ERROR}\n        />\n      ));\n    },\n  });\n};\n```",
            "include": true
          },
          "option3": {
            "content": "## Hooks with Optimistic Updates\n\n**When to use**: For better UX with immediate UI updates\n\n**Example**:\n```typescript\n\"use client\";\n\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { updatePostAction } from \"./post.actions\";\n\nexport const useUpdatePost = () => {\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: async ({ id, title }: { id: string; title: string }) => {\n      const { data, error } = await updatePostAction(id, title);\n      if (error) throw error;\n      return data;\n    },\n    onMutate: async (variables) => {\n      await queryClient.cancelQueries({ queryKey: [\"posts\"] });\n\n      const previousPosts = queryClient.getQueryData([\"posts\"]);\n\n      queryClient.setQueryData([\"posts\"], (old: any) => {\n        return old?.map((post: any) =>\n          post.id === variables.id ? { ...post, title: variables.title } : post\n        );\n      });\n\n      return { previousPosts };\n    },\n    onError: (err, variables, context) => {\n      if (context?.previousPosts) {\n        queryClient.setQueryData([\"posts\"], context.previousPosts);\n      }\n    },\n    onSettled: () => {\n      queryClient.invalidateQueries({ queryKey: [\"posts\"] });\n    },\n  });\n};\n```",
            "include": true
          },
          "option4": {
            "content": "## Hooks with File Upload\n\n**When to use**: When Supabase storage is enabled\n\n**Example**:\n```typescript\n\"use client\";\n\nimport { useMutation } from \"@tanstack/react-query\";\nimport { toast } from \"sonner\";\nimport { Toast } from \"../(components)/Toast\";\nimport { uploadFileAction } from \"./upload.actions\";\n\nexport const useUploadFile = () => {\n  return useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append(\"file\", file);\n      formData.append(\"bucket\", \"uploads\");\n      formData.append(\"path\", `${Date.now()}-${file.name}`);\n\n      const { data, error } = await uploadFileAction(formData);\n      if (error) throw error;\n      return data;\n    },\n    onSuccess: () => {\n      toast.custom(() => (\n        <Toast\n          variant=\"success\"\n          title=\"Success\"\n          message=\"File uploaded successfully\"\n        />\n      ));\n    },\n    onError: (error: Error) => {\n      toast.custom(() => (\n        <Toast\n          variant=\"error\"\n          title=\"Upload Failed\"\n          message={error.message || \"Failed to upload file\"}\n        />\n      ));\n    },\n  });\n};\n```",
            "include": true
          },
          "option5": {
            "content": "## Hooks with Real-time Subscriptions (Supabase)\n\n**When to use**: When using Supabase for real-time data\n\n**Example**:\n```typescript\n\"use client\";\n\nimport { createClient } from \"@/lib/supabase/client\";\nimport { useEffect, useState } from \"react\";\n\nexport const useRealtimeMessages = (channelId: string) => {\n  const [messages, setMessages] = useState<any[]>([]);\n  const supabase = createClient();\n\n  useEffect(() => {\n    const channel = supabase\n      .channel(`messages:${channelId}`)\n      .on(\n        \"postgres_changes\",\n        {\n          event: \"INSERT\",\n          schema: \"public\",\n          table: \"messages\",\n          filter: `channel_id=eq.${channelId}`,\n        },\n        (payload) => {\n          setMessages((current) => [...current, payload.new]);\n        }\n      )\n      .subscribe();\n\n    return () => {\n      supabase.removeChannel(channel);\n    };\n  }, [channelId, supabase]);\n\n  return messages;\n};\n```",
            "include": true
          }
        },
        "section5": {
          "option1": {
            "content": "## prisma-rls.ts (Row Level Security)\n\n**When to use**: When using Supabase with Prisma and RLS enabled\n\n**File**: `lib/prisma-rls.ts`\n\n```typescript\nimport { Prisma } from \"@prisma/client\";\nimport { prisma } from \"./prisma\";\n\nfunction forUser(userId: string, tenantId?: string) {\n  return Prisma.defineExtension((prisma) =>\n    prisma.$extends({\n      query: {\n        $allModels: {\n          async $allOperations({ args, query }) {\n            if (tenantId) {\n              const [, , result] = await prisma.$transaction([\n                prisma.$executeRaw`SELECT set_config('app.current_user_id', ${userId}, TRUE)`,\n                prisma.$executeRaw`SELECT set_config('app.current_tenant_id', ${tenantId}, TRUE)`,\n                query(args),\n              ]);\n              return result;\n            } else {\n              const [, result] = await prisma.$transaction([\n                prisma.$executeRaw`SELECT set_config('app.current_user_id', ${userId}, TRUE)`,\n                query(args),\n              ]);\n              return result;\n            }\n          },\n        },\n      },\n    })\n  );\n}\n\nexport function createRLSClient(userId: string, tenantId?: string) {\n  return prisma.$extends(forUser(userId, tenantId));\n}\n```",
            "include": true
          },
          "option2": {
            "content": "## auth.utils.ts (Better-Auth Utilities)\n\n**When to use**: When using Better-Auth for authentication\n\n**File**: `lib/auth.utils.ts`\n\n```typescript\nimport { User } from \"better-auth\";\nimport jwt from \"jsonwebtoken\";\nimport { headers } from \"next/headers\";\nimport { auth, Session } from \"./auth\";\nimport { createRLSClient } from \"./prisma-rls\";\n\nexport async function getAuthenticatedClient(user?: User): Promise<{\n  db: ReturnType<typeof createRLSClient>;\n  session: Session | null;\n}> {\n  const headersList = await headers();\n\n  const session = await auth.api.getSession({\n    headers: headersList,\n  });\n\n  const userId = user?.id || session?.user.id;\n\n  if (!userId) {\n    throw new Error(\"Unauthorized\");\n  }\n\n  const db = createRLSClient(userId);\n\n  return { db, session };\n}\n\nexport function generateSupabaseJWT(userId: string, userRole: string): string {\n  const jwtSecret = process.env.SUPABASE_JWT_SECRET;\n\n  if (!jwtSecret) {\n    throw new Error(\"SUPABASE_JWT_SECRET is required for JWT generation\");\n  }\n\n  const payload = {\n    aud: \"authenticated\",\n    exp: Math.floor(Date.now() / 1000) + 60 * 60,\n    sub: userId,\n    email: `${userId}@better-auth.local`,\n    role: \"authenticated\",\n    user_metadata: {\n      better_auth_user_id: userId,\n      better_auth_role: userRole,\n    },\n    app_metadata: {\n      provider: \"better-auth\",\n      providers: [\"better-auth\"],\n    },\n  };\n\n  return jwt.sign(payload, jwtSecret, {\n    algorithm: \"HS256\",\n  });\n}\n```",
            "include": true
          },
          "option3": {
            "content": "## storage.utils.ts (Supabase Storage)\n\n**When to use**: When Supabase storage is enabled\n\n**File**: `lib/storage.utils.ts`\n\n```typescript\nimport { createClient } from \"@/lib/supabase/server\";\n\nexport async function uploadFile(\n  file: File,\n  bucket: string,\n  path: string\n): Promise<{ url: string; path: string }> {\n  const supabase = createClient();\n\n  const { data, error } = await supabase.storage.from(bucket).upload(path, file);\n\n  if (error) throw error;\n\n  const { data: urlData } = supabase.storage.from(bucket).getPublicUrl(path);\n\n  return {\n    url: urlData.publicUrl,\n    path: data.path,\n  };\n}\n\nexport async function deleteFile(bucket: string, path: string): Promise<void> {\n  const supabase = createClient();\n\n  const { error } = await supabase.storage.from(bucket).remove([path]);\n\n  if (error) throw error;\n}\n\nexport async function getPublicUrl(bucket: string, path: string): string {\n  const supabase = createClient();\n\n  const { data } = supabase.storage.from(bucket).getPublicUrl(path);\n\n  return data.publicUrl;\n}\n```",
            "include": true
          },
          "option4": {
            "content": "## payment.utils.ts (Stripe/PayPal)\n\n**When to use**: When Stripe or PayPal is enabled\n\n**File**: `lib/payment.utils.ts`\n\n**Stripe utilities**:\n```typescript\nimport Stripe from \"stripe\";\n\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\n  apiVersion: \"2024-10-28.acacia\",\n});\n\nexport async function createCustomer(email: string, name?: string) {\n  return await stripe.customers.create({\n    email,\n    name,\n  });\n}\n\nexport async function createPaymentIntent(\n  amount: number,\n  currency: string,\n  customerId?: string\n) {\n  return await stripe.paymentIntents.create({\n    amount,\n    currency,\n    customer: customerId,\n  });\n}\n\nexport async function createSubscription(\n  customerId: string,\n  priceId: string\n) {\n  return await stripe.subscriptions.create({\n    customer: customerId,\n    items: [{ price: priceId }],\n  });\n}\n\nexport async function cancelSubscription(subscriptionId: string) {\n  return await stripe.subscriptions.cancel(subscriptionId);\n}\n```",
            "include": true
          },
          "option5": {
            "content": "## ai.utils.ts (OpenRouter Integration)\n\n**When to use**: When OpenRouter AI is enabled\n\n**File**: `lib/ai.utils.ts`\n\n```typescript\nimport OpenAI from \"openai\";\n\nconst openai = new OpenAI({\n  baseURL: \"https://openrouter.ai/api/v1\",\n  apiKey: process.env.OPENROUTER_API_KEY,\n});\n\nexport async function generateText(\n  prompt: string,\n  model: string = \"anthropic/claude-3.5-sonnet\"\n): Promise<string> {\n  const completion = await openai.chat.completions.create({\n    model,\n    messages: [{ role: \"user\", content: prompt }],\n  });\n\n  return completion.choices[0]?.message?.content || \"\";\n}\n\nexport async function generateImage(\n  prompt: string,\n  size: \"1024x1024\" | \"1792x1024\" | \"1024x1792\" = \"1024x1024\"\n): Promise<string> {\n  const response = await openai.images.generate({\n    model: \"dall-e-3\",\n    prompt,\n    size,\n    n: 1,\n  });\n\n  return response.data[0]?.url || \"\";\n}\n\nexport async function streamText(\n  prompt: string,\n  model: string = \"anthropic/claude-3.5-sonnet\",\n  onChunk: (chunk: string) => void\n): Promise<void> {\n  const stream = await openai.chat.completions.create({\n    model,\n    messages: [{ role: \"user\", content: prompt }],\n    stream: true,\n  });\n\n  for await (const chunk of stream) {\n    const content = chunk.choices[0]?.delta?.content || \"\";\n    if (content) {\n      onChunk(content);\n    }\n  }\n}\n```",
            "include": true
          },
          "option6": {
            "content": "## log.utils.ts (Logging Utility)\n\n**When to use**: All projects\n\n**File**: `lib/log.utils.ts`\n\n```typescript\nexport enum LOG_LABELS {\n  GENERATE = \"generate\",\n  API = \"api\",\n  AUTH = \"auth\",\n  DB = \"db\",\n  FETCH = \"fetch\",\n  RATE_LIMIT = \"rate-limit\",\n  IMAGE = \"image\",\n  WIDGET = \"widget\",\n}\n\ninterface ConditionalLogOptions {\n  maxStringLength?: number;\n  label: LOG_LABELS | string;\n}\n\nexport function conditionalLog(\n  data: unknown,\n  options: ConditionalLogOptions\n): string | null {\n  const { maxStringLength = 200, label } = options;\n\n  const logLabels = process.env.NEXT_PUBLIC_LOG_LABELS;\n\n  if (!logLabels || logLabels === \"none\") {\n    return null;\n  }\n\n  if (logLabels !== \"all\") {\n    const allowedLabels = logLabels.split(\",\").map((l) => l.trim());\n    if (!allowedLabels.includes(label)) {\n      return null;\n    }\n  }\n\n  try {\n    const processedData = deepStringify(data, maxStringLength, new WeakSet());\n    const result = JSON.stringify(processedData);\n    return result.replace(/\\s+/g, \"\");\n  } catch (error) {\n    return JSON.stringify({ error: \"Failed to stringify data\", label });\n  }\n}\n\nfunction deepStringify(\n  value: unknown,\n  maxLength: number,\n  seen: WeakSet<object>\n): unknown {\n  if (value === null || value === undefined) {\n    return value;\n  }\n\n  if (typeof value === \"string\") {\n    return truncateString(value, maxLength);\n  }\n\n  if (typeof value === \"number\" || typeof value === \"boolean\") {\n    return value;\n  }\n\n  if (value instanceof Date) {\n    return value.toISOString();\n  }\n\n  if (value instanceof Error) {\n    return {\n      name: value.name,\n      message: truncateString(value.message, maxLength),\n      stack: value.stack ? truncateString(value.stack, maxLength) : undefined,\n    };\n  }\n\n  if (typeof value === \"object\") {\n    if (seen.has(value)) {\n      return \"[Circular Reference]\";\n    }\n\n    seen.add(value);\n\n    if (Array.isArray(value)) {\n      const result = value.map((item) => deepStringify(item, maxLength, seen));\n      seen.delete(value);\n      return result;\n    }\n\n    const result: Record<string, unknown> = {};\n    for (const [key, val] of Object.entries(value)) {\n      result[key] = deepStringify(val, maxLength, seen);\n    }\n    seen.delete(value);\n    return result;\n  }\n\n  return String(value);\n}\n\nfunction truncateString(str: string, maxLength: number): string {\n  if (str.length <= maxLength) {\n    return str;\n  }\n\n  const startLength = Math.floor((maxLength - 3) / 2);\n  const endLength = maxLength - 3 - startLength;\n\n  return str.slice(0, startLength) + \"...\" + str.slice(-endLength);\n}\n```",
            "include": true
          },
          "option7": {
            "content": "## action.utils.ts (Server Action Response Helper)\n\n**When to use**: All projects with server actions\n\n**File**: `lib/action.utils.ts`\n\n```typescript\nexport interface ActionResponse<T = unknown> {\n  data?: T;\n  error?: string;\n}\n\nexport function getActionResponse<T = unknown>({\n  data,\n  error,\n}: {\n  data?: T;\n  error?: unknown;\n} = {}): ActionResponse<T> {\n  if (error) {\n    const errorMessage =\n      error instanceof Error ? error.message : String(error);\n    return { error: errorMessage };\n  }\n\n  return { data };\n}\n```",
            "include": true
          }
        }
      },
      "include": true
    },
    "start-here": {
      "id": "start-here",
      "name": "start-here",
      "displayName": "Start here",
      "type": "directory",
      "path": "start-here",
      "urlPath": "/start-here",
      "include": true,
      "children": [
        {
          "id": "start-here.tech-stack",
          "name": "tech-stack",
          "displayName": "Tech Stack",
          "type": "file",
          "order": 1,
          "path": "start-here.tech-stack",
          "urlPath": "/start-here/tech-stack",
          "content": "# {{appName:Your app name}} development roadmap\n\nWelcome to the development roadmap for {{appName:Your app name}}!\n\nThis collection of documents provides comprehensive instructions for creating a custom full-stack web application.\n\n## Technology stack\n\n{{appName:Your app name}} is a progressive web app built with the technologies outlined below. Start by installing these technologies using their \\`npm install\\` commands.\n\n<!-- component-InitialConfiguration -->\n",
          "components": [
            {
              "id": "component-InitialConfiguration",
              "name": "InitialConfiguration",
              "displayName": "InitialConfiguration",
              "type": "component",
              "path": "tech-stack.component.InitialConfiguration",
              "urlPath": "",
              "componentId": "InitialConfiguration",
              "include": true
            }
          ],
          "sections": {},
          "include": true
        },
        {
          "id": "start-here.theme",
          "name": "theme",
          "displayName": "Theme",
          "type": "file",
          "order": 2,
          "path": "start-here.theme",
          "urlPath": "/start-here/theme",
          "content": "# Theme configuration\n\nAdd the css below to your \\`styles/global.css\\` file and import the components from \\`components/ui\\` to apply your theme.\n\n<!-- component-ThemeConfiguration -->\n",
          "components": [
            {
              "id": "component-ThemeConfiguration",
              "name": "ThemeConfiguration",
              "displayName": "ThemeConfiguration",
              "type": "component",
              "path": "theme.component.ThemeConfiguration",
              "urlPath": "",
              "componentId": "ThemeConfiguration",
              "include": true
            }
          ],
          "sections": {},
          "include": true
        },
        {
          "id": "start-here.layout-routes",
          "name": "layout-routes",
          "displayName": "Layout & routes",
          "type": "file",
          "order": 3,
          "path": "start-here.layout-routes",
          "urlPath": "/start-here/layout-routes",
          "content": "# Layout wire frame and route structure\n\nCreate page and layout files within the nested directory structure outlined below to implement your app's route and layout structure\n\n<!-- component-LayoutAndStructure -->\n",
          "components": [
            {
              "id": "component-LayoutAndStructure",
              "name": "LayoutAndStructure",
              "displayName": "LayoutAndStructure",
              "type": "component",
              "path": "layout-routes.component.LayoutAndStructure",
              "urlPath": "",
              "componentId": "LayoutAndStructure",
              "include": true
            }
          ],
          "sections": {},
          "include": true
        },
        {
          "id": "start-here.database",
          "name": "database",
          "displayName": "Database",
          "type": "file",
          "order": 4,
          "path": "start-here.database",
          "urlPath": "/start-here/database",
          "content": "---\n---\n\n# Database\n\nDefine your schema, client files and Row Level Security to configure your database.\n\n<!-- component-DatabaseConfiguration -->\n",
          "components": [
            {
              "id": "component-DatabaseConfiguration",
              "name": "DatabaseConfiguration",
              "displayName": "DatabaseConfiguration",
              "type": "component",
              "path": "database.component.DatabaseConfiguration",
              "urlPath": "",
              "componentId": "DatabaseConfiguration",
              "include": true
            }
          ],
          "sections": {},
          "include": true
        },
        {
          "id": "start-here.tests",
          "name": "tests",
          "displayName": "Tests",
          "type": "file",
          "order": 5,
          "path": "start-here.tests",
          "urlPath": "/start-here/tests",
          "content": "# Tests\n\nDescribe the expected behaviour of your app verify the functionality and stress-test the security.\n\n<!-- component-Tests -->\n",
          "components": [
            {
              "id": "component-Tests",
              "name": "Tests",
              "displayName": "Tests",
              "type": "component",
              "path": "tests.component.Tests",
              "urlPath": "",
              "componentId": "Tests",
              "include": true
            }
          ],
          "sections": {},
          "include": true
        },
        {
          "id": "start-here.next-steps",
          "name": "next-steps",
          "displayName": "Next Steps",
          "type": "file",
          "order": 6,
          "path": "start-here.next-steps",
          "urlPath": "/start-here/next-steps",
          "content": "# Next steps\n\n1. Download your Roadmap\n2. Run \\`npx create-next-app@latest\\` to create your project repository.\n3. Paste your Roadmap into your project repository.\n4. Refer your AI to the \\`ROBOT_README.md\\` file\n5. Start building!\n",
          "components": [],
          "sections": {},
          "include": true
        }
      ]
    },
    "start-here.tech-stack": {
      "id": "start-here.tech-stack",
      "name": "tech-stack",
      "displayName": "Tech Stack",
      "type": "file",
      "order": 1,
      "path": "start-here.tech-stack",
      "urlPath": "/start-here/tech-stack",
      "content": "# {{appName:Your app name}} development roadmap\n\nWelcome to the development roadmap for {{appName:Your app name}}!\n\nThis collection of documents provides comprehensive instructions for creating a custom full-stack web application.\n\n## Technology stack\n\n{{appName:Your app name}} is a progressive web app built with the technologies outlined below. Start by installing these technologies using their \\`npm install\\` commands.\n\n<!-- component-InitialConfiguration -->\n",
      "components": [
        {
          "id": "component-InitialConfiguration",
          "name": "InitialConfiguration",
          "displayName": "InitialConfiguration",
          "type": "component",
          "path": "tech-stack.component.InitialConfiguration",
          "urlPath": "",
          "componentId": "InitialConfiguration",
          "include": true
        }
      ],
      "sections": {},
      "include": true
    },
    "tech-stack.component.InitialConfiguration": {
      "id": "component-InitialConfiguration",
      "name": "InitialConfiguration",
      "displayName": "InitialConfiguration",
      "type": "component",
      "path": "tech-stack.component.InitialConfiguration",
      "urlPath": "",
      "componentId": "InitialConfiguration",
      "include": true
    },
    "start-here.theme": {
      "id": "start-here.theme",
      "name": "theme",
      "displayName": "Theme",
      "type": "file",
      "order": 2,
      "path": "start-here.theme",
      "urlPath": "/start-here/theme",
      "content": "# Theme configuration\n\nAdd the css below to your \\`styles/global.css\\` file and import the components from \\`components/ui\\` to apply your theme.\n\n<!-- component-ThemeConfiguration -->\n",
      "components": [
        {
          "id": "component-ThemeConfiguration",
          "name": "ThemeConfiguration",
          "displayName": "ThemeConfiguration",
          "type": "component",
          "path": "theme.component.ThemeConfiguration",
          "urlPath": "",
          "componentId": "ThemeConfiguration",
          "include": true
        }
      ],
      "sections": {},
      "include": true
    },
    "theme.component.ThemeConfiguration": {
      "id": "component-ThemeConfiguration",
      "name": "ThemeConfiguration",
      "displayName": "ThemeConfiguration",
      "type": "component",
      "path": "theme.component.ThemeConfiguration",
      "urlPath": "",
      "componentId": "ThemeConfiguration",
      "include": true
    },
    "start-here.layout-routes": {
      "id": "start-here.layout-routes",
      "name": "layout-routes",
      "displayName": "Layout & routes",
      "type": "file",
      "order": 3,
      "path": "start-here.layout-routes",
      "urlPath": "/start-here/layout-routes",
      "content": "# Layout wire frame and route structure\n\nCreate page and layout files within the nested directory structure outlined below to implement your app's route and layout structure\n\n<!-- component-LayoutAndStructure -->\n",
      "components": [
        {
          "id": "component-LayoutAndStructure",
          "name": "LayoutAndStructure",
          "displayName": "LayoutAndStructure",
          "type": "component",
          "path": "layout-routes.component.LayoutAndStructure",
          "urlPath": "",
          "componentId": "LayoutAndStructure",
          "include": true
        }
      ],
      "sections": {},
      "include": true
    },
    "layout-routes.component.LayoutAndStructure": {
      "id": "component-LayoutAndStructure",
      "name": "LayoutAndStructure",
      "displayName": "LayoutAndStructure",
      "type": "component",
      "path": "layout-routes.component.LayoutAndStructure",
      "urlPath": "",
      "componentId": "LayoutAndStructure",
      "include": true
    },
    "start-here.database": {
      "id": "start-here.database",
      "name": "database",
      "displayName": "Database",
      "type": "file",
      "order": 4,
      "path": "start-here.database",
      "urlPath": "/start-here/database",
      "content": "---\n---\n\n# Database\n\nDefine your schema, client files and Row Level Security to configure your database.\n\n<!-- component-DatabaseConfiguration -->\n",
      "components": [
        {
          "id": "component-DatabaseConfiguration",
          "name": "DatabaseConfiguration",
          "displayName": "DatabaseConfiguration",
          "type": "component",
          "path": "database.component.DatabaseConfiguration",
          "urlPath": "",
          "componentId": "DatabaseConfiguration",
          "include": true
        }
      ],
      "sections": {},
      "include": true
    },
    "database.component.DatabaseConfiguration": {
      "id": "component-DatabaseConfiguration",
      "name": "DatabaseConfiguration",
      "displayName": "DatabaseConfiguration",
      "type": "component",
      "path": "database.component.DatabaseConfiguration",
      "urlPath": "",
      "componentId": "DatabaseConfiguration",
      "include": true
    },
    "start-here.tests": {
      "id": "start-here.tests",
      "name": "tests",
      "displayName": "Tests",
      "type": "file",
      "order": 5,
      "path": "start-here.tests",
      "urlPath": "/start-here/tests",
      "content": "# Tests\n\nDescribe the expected behaviour of your app verify the functionality and stress-test the security.\n\n<!-- component-Tests -->\n",
      "components": [
        {
          "id": "component-Tests",
          "name": "Tests",
          "displayName": "Tests",
          "type": "component",
          "path": "tests.component.Tests",
          "urlPath": "",
          "componentId": "Tests",
          "include": true
        }
      ],
      "sections": {},
      "include": true
    },
    "tests.component.Tests": {
      "id": "component-Tests",
      "name": "Tests",
      "displayName": "Tests",
      "type": "component",
      "path": "tests.component.Tests",
      "urlPath": "",
      "componentId": "Tests",
      "include": true
    },
    "start-here.next-steps": {
      "id": "start-here.next-steps",
      "name": "next-steps",
      "displayName": "Next Steps",
      "type": "file",
      "order": 6,
      "path": "start-here.next-steps",
      "urlPath": "/start-here/next-steps",
      "content": "# Next steps\n\n1. Download your Roadmap\n2. Run \\`npx create-next-app@latest\\` to create your project repository.\n3. Paste your Roadmap into your project repository.\n4. Refer your AI to the \\`ROBOT_README.md\\` file\n5. Start building!\n",
      "components": [],
      "sections": {},
      "include": true
    },
    "components": {
      "id": "components",
      "name": "components",
      "displayName": "components",
      "type": "directory",
      "path": "components",
      "urlPath": "/components",
      "include": true,
      "previewOnly": true,
      "includeInToolbar": false,
      "visibleAfterPage": "start-here.theme",
      "children": [
        {
          "id": "components.ui",
          "name": "ui",
          "displayName": "ui",
          "type": "directory",
          "path": "components.ui",
          "urlPath": "/components/ui",
          "include": true,
          "previewOnly": true,
          "includeInToolbar": false,
          "children": [
            {
              "id": "components.ui.accordion",
              "name": "accordion",
              "displayName": "accordion",
              "type": "file",
              "path": "components.ui.accordion",
              "urlPath": "/components/ui/accordion",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b border-border\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline text-left [&[data-state=open]>svg]:rotate-180 font-sans tracking\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-5 w-5 shrink-0 transition-transform duration-200 text-muted-foreground\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down font-sans tracking\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n",
              "components": [],
              "sections": {},
              "include": true,
              "previewOnly": true,
              "includeInToolbar": false,
              "fileExtension": "tsx"
            },
            {
              "id": "components.ui.alert-dialog",
              "name": "alert-dialog",
              "displayName": "alert-dialog",
              "type": "file",
              "path": "components.ui.alert-dialog",
              "urlPath": "/components/ui/alert-dialog",
              "content": "\"use client\";\n\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\";\nimport * as React from \"react\";\n\nimport { buttonVariants } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\n\nconst AlertDialog = AlertDialogPrimitive.Root;\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger;\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal;\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n));\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName;\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border p-6 duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] bg-card text-card-foreground border-border shadow radius\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n));\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName;\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n);\nAlertDialogHeader.displayName = \"AlertDialogHeader\";\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n);\nAlertDialogFooter.displayName = \"AlertDialogFooter\";\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold font-sans tracking\", className)}\n    {...props}\n  />\n));\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName;\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\n      \"text-sm text-muted-foreground font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n));\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName;\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n));\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName;\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n));\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName;\n\nexport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogOverlay,\n  AlertDialogPortal,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n};\n",
              "components": [],
              "sections": {},
              "include": true,
              "previewOnly": true,
              "includeInToolbar": false,
              "fileExtension": "tsx"
            },
            {
              "id": "components.ui.alert",
              "name": "alert",
              "displayName": "alert",
              "type": "file",
              "path": "components.ui.alert",
              "urlPath": "/components/ui/alert",
              "content": "import { cva, type VariantProps } from \"class-variance-authority\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst alertVariants = cva(\n  \"relative w-full border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg~*]:pl-7 radius shadow font-sans tracking\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground border-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n);\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      role=\"alert\"\n      className={cn(alertVariants({ variant }), className)}\n      {...props}\n    />\n  );\n});\nAlert.displayName = \"Alert\";\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\n      \"mb-1 font-medium leading-none tracking-tight font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n));\nAlertTitle.displayName = \"AlertTitle\";\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-sm [&_p]:leading-relaxed font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n));\nAlertDescription.displayName = \"AlertDescription\";\n\nexport { Alert, AlertDescription, AlertTitle };\n",
              "components": [],
              "sections": {},
              "include": true,
              "previewOnly": true,
              "includeInToolbar": false,
              "fileExtension": "tsx"
            },
            {
              "id": "components.ui.aspect-ratio",
              "name": "aspect-ratio",
              "displayName": "aspect-ratio",
              "type": "file",
              "path": "components.ui.aspect-ratio",
              "urlPath": "/components/ui/aspect-ratio",
              "content": "\"use client\"\n\nimport * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n",
              "components": [],
              "sections": {},
              "include": true,
              "previewOnly": true,
              "includeInToolbar": false,
              "fileExtension": "tsx"
            },
            {
              "id": "components.ui.avatar",
              "name": "avatar",
              "displayName": "avatar",
              "type": "file",
              "path": "components.ui.avatar",
              "urlPath": "/components/ui/avatar",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted text-muted-foreground font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n",
              "components": [],
              "sections": {},
              "include": true,
              "previewOnly": true,
              "includeInToolbar": false,
              "fileExtension": "tsx"
            },
            {
              "id": "components.ui.badge",
              "name": "badge",
              "displayName": "badge",
              "type": "file",
              "path": "components.ui.badge",
              "urlPath": "/components/ui/badge",
              "content": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 radius border-ring font-sans tracking\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow hover:opacity-80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:opacity-80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow hover:opacity-80\",\n        outline: \"text-foreground border-border\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n",
              "components": [],
              "sections": {},
              "include": true,
              "previewOnly": true,
              "includeInToolbar": false,
              "fileExtension": "tsx"
            },
            {
              "id": "components.ui.breadcrumb",
              "name": "breadcrumb",
              "displayName": "breadcrumb",
              "type": "file",
              "path": "components.ui.breadcrumb",
              "urlPath": "/components/ui/breadcrumb",
              "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5 font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground font-sans tracking\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground font-sans tracking\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n",
              "components": [],
              "sections": {},
              "include": true,
              "previewOnly": true,
              "includeInToolbar": false,
              "fileExtension": "tsx"
            },
            {
              "id": "components.ui.button",
              "name": "button",
              "displayName": "button",
              "type": "file",
              "path": "components.ui.button",
              "urlPath": "/components/ui/button",
              "content": "import { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 radius font-sans tracking\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-2 bg-primary text-primary-foreground border-primary shadow hover:opacity-90\",\n        destructive:\n          \"border-2 bg-destructive text-destructive-foreground border-destructive shadow hover:opacity-90\",\n        outline:\n          \"border-2 border-input bg-background text-foreground shadow hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"border-2 bg-secondary text-secondary-foreground border-secondary shadow hover:opacity-80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 px-3 text-xs\",\n        lg: \"h-10 px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size }), className)}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n",
              "components": [],
              "sections": {},
              "include": true,
              "previewOnly": true,
              "includeInToolbar": false,
              "fileExtension": "tsx"
            },
            {
              "id": "components.ui.calendar",
              "name": "calendar",
              "displayName": "calendar",
              "type": "file",
              "path": "components.ui.calendar",
              "urlPath": "/components/ui/calendar",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport {\n  ChevronDownIcon,\n  ChevronLeftIcon,\n  ChevronRightIcon,\n} from \"lucide-react\"\nimport { DayButton, DayPicker, getDefaultClassNames } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button, buttonVariants } from \"@/components/ui/button\"\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  captionLayout = \"label\",\n  buttonVariant = \"ghost\",\n  formatters,\n  components,\n  ...props\n}: React.ComponentProps<typeof DayPicker> & {\n  buttonVariant?: React.ComponentProps<typeof Button>[\"variant\"]\n}) {\n  const defaultClassNames = getDefaultClassNames()\n\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\n        \"group/calendar [--cell-size:calc(var(--spacing)*9)] [[data-slot=card-content]_&]:bg-transparent [[data-slot=popover-content]_&]:bg-transparent\",\n        String.raw\\`rtl:**:[.rdp-button\\\\_next>svg]:rotate-180\\`,\n        String.raw\\`rtl:**:[.rdp-button\\\\_previous>svg]:rotate-180\\`,\n        className\n      )}\n      captionLayout={captionLayout}\n      formatters={{\n        formatMonthDropdown: (date) =>\n          date.toLocaleString(\"default\", { month: \"short\" }),\n        ...formatters,\n      }}\n      classNames={{\n        root: cn(\"w-fit\", defaultClassNames.root),\n        months: cn(\n          \"relative flex flex-col gap-4 md:flex-row\",\n          defaultClassNames.months\n        ),\n        month: cn(\"flex w-full flex-col gap-4\", defaultClassNames.month),\n        nav: cn(\n          \"absolute inset-x-0 top-0 flex w-full items-center justify-between gap-1\",\n          defaultClassNames.nav\n        ),\n        button_previous: cn(\n          buttonVariants({ variant: buttonVariant }),\n          \"h-[--cell-size] w-[--cell-size] select-none p-0 aria-disabled:opacity-50\",\n          defaultClassNames.button_previous\n        ),\n        button_next: cn(\n          buttonVariants({ variant: buttonVariant }),\n          \"h-[--cell-size] w-[--cell-size] select-none p-0 aria-disabled:opacity-50\",\n          defaultClassNames.button_next\n        ),\n        month_caption: cn(\n          \"flex h-[--cell-size] w-full items-center justify-center px-[--cell-size]\",\n          defaultClassNames.month_caption\n        ),\n        dropdowns: cn(\n          \"flex h-[--cell-size] w-full items-center justify-center gap-1.5 text-sm font-medium font-sans tracking\",\n          defaultClassNames.dropdowns\n        ),\n        dropdown_root: cn(\n          \"has-focus:border-ring border-input shadow-xs has-focus:focus-ring-color/50 has-focus:ring-[3px] relative rounded-md border\",\n          defaultClassNames.dropdown_root\n        ),\n        dropdown: cn(\n          \"bg-popover absolute inset-0 opacity-0\",\n          defaultClassNames.dropdown\n        ),\n        caption_label: cn(\n          \"select-none font-medium font-sans tracking\",\n          captionLayout === \"label\"\n            ? \"text-sm\"\n            : \"[&>svg]:text-muted-foreground flex h-8 items-center gap-1 rounded-md pl-2 pr-1 text-sm [&>svg]:size-3.5\",\n          defaultClassNames.caption_label\n        ),\n        table: \"w-full border-collapse\",\n        weekdays: cn(\"flex\", defaultClassNames.weekdays),\n        weekday: cn(\n          \"text-muted-foreground flex-1 select-none rounded-md text-[0.8rem] font-normal font-sans tracking\",\n          defaultClassNames.weekday\n        ),\n        week: cn(\"mt-2 flex w-full\", defaultClassNames.week),\n        week_number_header: cn(\n          \"w-[--cell-size] select-none\",\n          defaultClassNames.week_number_header\n        ),\n        week_number: cn(\n          \"text-muted-foreground select-none text-[0.8rem] font-sans tracking\",\n          defaultClassNames.week_number\n        ),\n        day: cn(\n          \"group/day relative aspect-square h-full w-full select-none p-0 text-center [&:first-child[data-selected=true]_button]:rounded-l-md [&:last-child[data-selected=true]_button]:rounded-r-md\",\n          defaultClassNames.day\n        ),\n        range_start: cn(\n          \"bg-accent rounded-l-md\",\n          defaultClassNames.range_start\n        ),\n        range_middle: cn(\"rounded-none\", defaultClassNames.range_middle),\n        range_end: cn(\"bg-accent rounded-r-md\", defaultClassNames.range_end),\n        today: cn(\n          \"bg-accent text-accent-foreground rounded-md data-[selected=true]:rounded-none\",\n          defaultClassNames.today\n        ),\n        outside: cn(\n          \"text-muted-foreground aria-selected:text-muted-foreground\",\n          defaultClassNames.outside\n        ),\n        disabled: cn(\n          \"text-muted-foreground opacity-50\",\n          defaultClassNames.disabled\n        ),\n        hidden: cn(\"invisible\", defaultClassNames.hidden),\n        ...classNames,\n      }}\n      components={{\n        Root: ({ className, rootRef, ...props }) => {\n          return (\n            <div\n              data-slot=\"calendar\"\n              ref={rootRef}\n              className={cn(className)}\n              {...props}\n            />\n          )\n        },\n        Chevron: ({ className, orientation, ...props }) => {\n          if (orientation === \"left\") {\n            return (\n              <ChevronLeftIcon className={cn(\"size-4\", className)} {...props} />\n            )\n          }\n\n          if (orientation === \"right\") {\n            return (\n              <ChevronRightIcon\n                className={cn(\"size-4\", className)}\n                {...props}\n              />\n            )\n          }\n\n          return (\n            <ChevronDownIcon className={cn(\"size-4\", className)} {...props} />\n          )\n        },\n        DayButton: CalendarDayButton,\n        WeekNumber: ({ children, ...props }) => {\n          return (\n            <td {...props}>\n              <div className=\"flex size-[--cell-size] items-center justify-center text-center\">\n                {children}\n              </div>\n            </td>\n          )\n        },\n        ...components,\n      }}\n      {...props}\n    />\n  )\n}\n\nfunction CalendarDayButton({\n  className,\n  day,\n  modifiers,\n  ...props\n}: React.ComponentProps<typeof DayButton>) {\n  const defaultClassNames = getDefaultClassNames()\n\n  const ref = React.useRef<HTMLButtonElement>(null)\n  React.useEffect(() => {\n    if (modifiers.focused) ref.current?.focus()\n  }, [modifiers.focused])\n\n  return (\n    <Button\n      ref={ref}\n      variant=\"ghost\"\n      size=\"icon\"\n      data-day={day.date.toLocaleDateString()}\n      data-selected-single={\n        modifiers.selected &&\n        !modifiers.range_start &&\n        !modifiers.range_end &&\n        !modifiers.range_middle\n      }\n      data-range-start={modifiers.range_start}\n      data-range-end={modifiers.range_end}\n      data-range-middle={modifiers.range_middle}\n      className={cn(\n        \"data-selected-single-bg-primary data-selected-single-text-primary-foreground data-range-middle-bg-accent data-range-middle-text-accent-foreground data-range-start-bg-primary data-range-start-text-primary-foreground data-range-end-bg-primary data-range-end-text-primary-foreground group-data-[focused=true]/day:border-ring group-data-[focused=true]/day:focus-ring-color/50 flex aspect-square h-auto w-full min-w-[--cell-size] flex-col gap-1 font-normal leading-none data-[range-end=true]:rounded-md data-[range-middle=true]:rounded-none data-[range-start=true]:rounded-md group-data-[focused=true]/day:relative group-data-[focused=true]/day:z-10 group-data-[focused=true]/day:ring-[3px] [&>span]:text-xs [&>span]:opacity-70 font-sans tracking\",\n        defaultClassNames.day,\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Calendar, CalendarDayButton }\n",
              "components": [],
              "sections": {},
              "include": true,
              "previewOnly": true,
              "includeInToolbar": false,
              "fileExtension": "tsx"
            },
            {
              "id": "components.ui.card",
              "name": "card",
              "displayName": "card",
              "type": "file",
              "path": "components.ui.card",
              "urlPath": "/components/ui/card",
              "content": "import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"border radius bg-card text-card-foreground border-border shadow\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\";\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex !rounded flex-col gap-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\";\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight font-sans tracking\", className)}\n    {...props}\n  />\n));\nCardTitle.displayName = \"CardTitle\";\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground font-sans tracking\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\";\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n));\nCardContent.displayName = \"CardContent\";\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n));\nCardFooter.displayName = \"CardFooter\";\n\nexport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n};\n",
              "components": [],
              "sections": {},
              "include": true,
              "previewOnly": true,
              "includeInToolbar": false,
              "fileExtension": "tsx"
            },
            {
              "id": "components.ui.checkbox",
              "name": "checkbox",
              "displayName": "checkbox",
              "type": "file",
              "path": "components.ui.checkbox",
              "urlPath": "/components/ui/checkbox",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 border border-primary radius shadow focus-visible:outline-none focus-visible:ring-1 border-ring disabled:cursor-not-allowed disabled:opacity-50 data-checked-bg-primary data-checked-text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n",
              "components": [],
              "sections": {},
              "include": true,
              "previewOnly": true,
              "includeInToolbar": false,
              "fileExtension": "tsx"
            },
            {
              "id": "components.ui.collapsible",
              "name": "collapsible",
              "displayName": "collapsible",
              "type": "file",
              "path": "components.ui.collapsible",
              "urlPath": "/components/ui/collapsible",
              "content": "\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n",
              "components": [],
              "sections": {},
              "include": true,
              "previewOnly": true,
              "includeInToolbar": false,
              "fileExtension": "tsx"
            },
            {
              "id": "components.ui.context-menu",
              "name": "context-menu",
              "displayName": "context-menu",
              "type": "file",
              "path": "components.ui.context-menu",
              "urlPath": "/components/ui/context-menu",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center radius px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground font-sans tracking\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden radius border bg-popover p-1 text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin] border-border font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden radius border bg-popover p-1 text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin] border-border font-sans tracking\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center radius px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 font-sans tracking\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center radius py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 font-sans tracking\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center radius py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 font-sans tracking\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-4 w-4 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground font-sans tracking\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground font-sans\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n",
              "components": [],
              "sections": {},
              "include": true,
              "previewOnly": true,
              "includeInToolbar": false,
              "fileExtension": "tsx"
            },
            {
              "id": "components.ui.dialog",
              "name": "dialog",
              "displayName": "dialog",
              "type": "file",
              "path": "components.ui.dialog",
              "urlPath": "/components/ui/dialog",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border p-6 duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] bg-card text-card-foreground border-border shadow radius\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 opacity-70 transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 border-ring focus:ring-offset-2 disabled:pointer-events-none radius text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground font-sans tracking\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogTrigger,\n  DialogClose,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n",
              "components": [],
              "sections": {},
              "include": true,
              "previewOnly": true,
              "includeInToolbar": false,
              "fileExtension": "tsx"
            },
            {
              "id": "components.ui.drawer",
              "name": "drawer",
              "displayName": "drawer",
              "type": "file",
              "path": "components.ui.drawer",
              "urlPath": "/components/ui/drawer",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background border-border font-sans tracking\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground font-sans tracking\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n",
              "components": [],
              "sections": {},
              "include": true,
              "previewOnly": true,
              "includeInToolbar": false,
              "fileExtension": "tsx"
            },
            {
              "id": "components.ui.dropdown-menu",
              "name": "dropdown-menu",
              "displayName": "dropdown-menu",
              "type": "file",
              "path": "components.ui.dropdown-menu",
              "urlPath": "/components/ui/dropdown-menu",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 radius px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 font-sans tracking\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden radius border bg-popover p-1 text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin] border-border font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden radius border bg-popover p-1 text-popover-foreground shadow border-border font-sans tracking\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 radius px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0 font-sans tracking\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center radius py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 font-sans tracking\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center radius py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 font-sans tracking\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold font-sans tracking\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60 font-sans\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n",
              "components": [],
              "sections": {},
              "include": true,
              "previewOnly": true,
              "includeInToolbar": false,
              "fileExtension": "tsx"
            },
            {
              "id": "components.ui.hover-card",
              "name": "hover-card",
              "displayName": "hover-card",
              "type": "file",
              "path": "components.ui.hover-card",
              "urlPath": "/components/ui/hover-card",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 radius border bg-popover p-4 text-popover-foreground shadow outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin] border-border font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n",
              "components": [],
              "sections": {},
              "include": true,
              "previewOnly": true,
              "includeInToolbar": false,
              "fileExtension": "tsx"
            },
            {
              "id": "components.ui.input-otp",
              "name": "input-otp",
              "displayName": "input-otp",
              "type": "file",
              "path": "components.ui.input-otp",
              "urlPath": "/components/ui/input-otp",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Minus } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-9 w-9 items-center justify-center border-y border-r border-input text-sm shadow transition-all first:rounded-l-md first:border-l last:rounded-r-md font-sans tracking\",\n        isActive && \"z-10 ring-1 border-ring\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Minus />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n",
              "components": [],
              "sections": {},
              "include": true,
              "previewOnly": true,
              "includeInToolbar": false,
              "fileExtension": "tsx"
            },
            {
              "id": "components.ui.input",
              "name": "input",
              "displayName": "input",
              "type": "file",
              "path": "components.ui.input",
              "urlPath": "/components/ui/input",
              "content": "import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full border-2 bg-transparent px-3 py-1 text-base transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium focus-visible:outline-none focus-visible:ring-1 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm border-input text-foreground shadow radius font-sans tracking\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nInput.displayName = \"Input\";\n\nexport { Input };\n",
              "components": [],
              "sections": {},
              "include": true,
              "previewOnly": true,
              "includeInToolbar": false,
              "fileExtension": "tsx"
            },
            {
              "id": "components.ui.label",
              "name": "label",
              "displayName": "label",
              "type": "file",
              "path": "components.ui.label",
              "urlPath": "/components/ui/label",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 font-sans tracking\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n",
              "components": [],
              "sections": {},
              "include": true,
              "previewOnly": true,
              "includeInToolbar": false,
              "fileExtension": "tsx"
            },
            {
              "id": "components.ui.menubar",
              "name": "menubar",
              "displayName": "menubar",
              "type": "file",
              "path": "components.ui.menubar",
              "urlPath": "/components/ui/menubar",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-9 items-center space-x-1 radius border bg-background p-1 shadow border-border font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center radius px-3 py-1 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center radius px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground font-sans tracking\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden radius border bg-popover p-1 text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin] border-border font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden radius border bg-popover p-1 text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin] border-border font-sans tracking\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center radius px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 font-sans tracking\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center radius py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 font-sans tracking\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center radius py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 font-sans tracking\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-4 w-4 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold font-sans tracking\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground font-sans\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n",
              "components": [],
              "sections": {},
              "include": true,
              "previewOnly": true,
              "includeInToolbar": false,
              "fileExtension": "tsx"
            },
            {
              "id": "components.ui.navigation-menu",
              "name": "navigation-menu",
              "displayName": "navigation-menu",
              "type": "file",
              "path": "components.ui.navigation-menu",
              "urlPath": "/components/ui/navigation-menu",
              "content": "import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-9 w-max items-center justify-center radius bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent font-sans tracking\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden radius border bg-popover text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)] border-border font-sans tracking\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n",
              "components": [],
              "sections": {},
              "include": true,
              "previewOnly": true,
              "includeInToolbar": false,
              "fileExtension": "tsx"
            },
            {
              "id": "components.ui.popover",
              "name": "popover",
              "displayName": "popover",
              "type": "file",
              "path": "components.ui.popover",
              "urlPath": "/components/ui/popover",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverAnchor = PopoverPrimitive.Anchor\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 border p-4 outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin] bg-popover text-popover-foreground border-border shadow radius font-sans tracking\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }\n",
              "components": [],
              "sections": {},
              "include": true,
              "previewOnly": true,
              "includeInToolbar": false,
              "fileExtension": "tsx"
            },
            {
              "id": "components.ui.progress",
              "name": "progress",
              "displayName": "progress",
              "type": "file",
              "path": "components.ui.progress",
              "urlPath": "/components/ui/progress",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-2 w-full overflow-hidden bg-secondary radius\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className={cn(\n        \"h-full w-full flex-1 transition-all bg-primary\",\n        \\`translate-x-[-\\${100 - (value || 0)}%]\\`\n      )}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n",
              "components": [],
              "sections": {},
              "include": true,
              "previewOnly": true,
              "includeInToolbar": false,
              "fileExtension": "tsx"
            },
            {
              "id": "components.ui.radio-group",
              "name": "radio-group",
              "displayName": "radio-group",
              "type": "file",
              "path": "components.ui.radio-group",
              "urlPath": "/components/ui/radio-group",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border focus:outline-none focus-visible:ring-1 disabled:cursor-not-allowed disabled:opacity-50 border-primary text-primary shadow border-ring\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-3.5 w-3.5 fill-current text-primary\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n",
              "components": [],
              "sections": {},
              "include": true,
              "previewOnly": true,
              "includeInToolbar": false,
              "fileExtension": "tsx"
            },
            {
              "id": "components.ui.resizable",
              "name": "resizable",
              "displayName": "resizable",
              "type": "file",
              "path": "components.ui.resizable",
              "urlPath": "/components/ui/resizable",
              "content": "\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border border-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n",
              "components": [],
              "sections": {},
              "include": true,
              "previewOnly": true,
              "includeInToolbar": false,
              "fileExtension": "tsx"
            },
            {
              "id": "components.ui.scroll-area",
              "name": "scroll-area",
              "displayName": "scroll-area",
              "type": "file",
              "path": "components.ui.scroll-area",
              "urlPath": "/components/ui/scroll-area",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n",
              "components": [],
              "sections": {},
              "include": true,
              "previewOnly": true,
              "includeInToolbar": false,
              "fileExtension": "tsx"
            },
            {
              "id": "components.ui.select",
              "name": "select",
              "displayName": "select",
              "type": "file",
              "path": "components.ui.select",
              "urlPath": "/components/ui/select",
              "content": "\"use client\";\n\nimport * as SelectPrimitive from \"@radix-ui/react-select\";\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Select = SelectPrimitive.Root;\n\nconst SelectGroup = SelectPrimitive.Group;\n\nconst SelectValue = SelectPrimitive.Value;\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between whitespace-nowrap border-2 bg-transparent px-3 py-2 text-sm focus:outline-none focus:ring-1 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1 border-input text-foreground shadow radius border-ring font-sans tracking\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n));\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName;\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n));\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName;\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n));\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName;\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden border data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin] bg-popover text-popover-foreground border-border shadow radius font-sans tracking\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n));\nSelectContent.displayName = SelectPrimitive.Content.displayName;\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n));\nSelectLabel.displayName = SelectPrimitive.Label.displayName;\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center py-1.5 pl-2 pr-8 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 radius focus:bg-accent focus:text-accent-foreground font-sans tracking\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute right-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n));\nSelectItem.displayName = SelectPrimitive.Item.displayName;\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n));\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName;\n\nexport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n};\n",
              "components": [],
              "sections": {},
              "include": true,
              "previewOnly": true,
              "includeInToolbar": false,
              "fileExtension": "tsx"
            },
            {
              "id": "components.ui.separator",
              "name": "separator",
              "displayName": "separator",
              "type": "file",
              "path": "components.ui.separator",
              "urlPath": "/components/ui/separator",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n",
              "components": [],
              "sections": {},
              "include": true,
              "previewOnly": true,
              "includeInToolbar": false,
              "fileExtension": "tsx"
            },
            {
              "id": "components.ui.sheet",
              "name": "sheet",
              "displayName": "sheet",
              "type": "file",
              "path": "components.ui.sheet",
              "urlPath": "/components/ui/sheet",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 p-6 transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out bg-card text-card-foreground shadow\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b border-border data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t border-border data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r border-border data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4 border-l border-border data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 opacity-70 transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 border-ring focus:ring-offset-2 disabled:pointer-events-none radius text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n      {children}\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground font-sans tracking\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground font-sans tracking\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n",
              "components": [],
              "sections": {},
              "include": true,
              "previewOnly": true,
              "includeInToolbar": false,
              "fileExtension": "tsx"
            },
            {
              "id": "components.ui.skeleton",
              "name": "skeleton",
              "displayName": "skeleton",
              "type": "file",
              "path": "components.ui.skeleton",
              "urlPath": "/components/ui/skeleton",
              "content": "import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse bg-muted radius\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n",
              "components": [],
              "sections": {},
              "include": true,
              "previewOnly": true,
              "includeInToolbar": false,
              "fileExtension": "tsx"
            },
            {
              "id": "components.ui.slider",
              "name": "slider",
              "displayName": "slider",
              "type": "file",
              "path": "components.ui.slider",
              "urlPath": "/components/ui/slider",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-1.5 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-4 w-4 rounded-full border transition-colors focus-visible:outline-none focus-visible:ring-1 disabled:pointer-events-none disabled:opacity-50 bg-background border-primary shadow border-ring\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n",
              "components": [],
              "sections": {},
              "include": true,
              "previewOnly": true,
              "includeInToolbar": false,
              "fileExtension": "tsx"
            },
            {
              "id": "components.ui.sonner",
              "name": "sonner",
              "displayName": "sonner",
              "type": "file",
              "path": "components.ui.sonner",
              "urlPath": "/components/ui/sonner",
              "content": "\"use client\"\n\nimport { useTheme } from \"next-themes\"\nimport { Toaster as Sonner } from \"sonner\"\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow group-[.toaster]:font-sans group-[.toaster]:tracking\",\n          description: \"group-[.toast]:text-muted-foreground group-[.toast]:font-sans group-[.toast]:tracking\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground group-[.toast]:font-sans group-[.toast]:tracking\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground group-[.toast]:font-sans group-[.toast]:tracking\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster }\n",
              "components": [],
              "sections": {},
              "include": true,
              "previewOnly": true,
              "includeInToolbar": false,
              "fileExtension": "tsx"
            },
            {
              "id": "components.ui.switch",
              "name": "switch",
              "displayName": "switch",
              "type": "file",
              "path": "components.ui.switch",
              "urlPath": "/components/ui/switch",
              "content": "\"use client\";\n\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\ninterface SwitchProps\n  extends React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root> {\n  size?: \"default\" | \"lg\";\n}\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  SwitchProps\n>(({ className, size = \"default\", ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex shrink-0 cursor-pointer items-center border transition-colors disabled:cursor-not-allowed disabled:opacity-50 rounded-full data-checked-bg-primary data-unchecked-bg-input focus-ring border-primary\",\n      size === \"default\" ? \"h-5 w-9\" : \"h-6 w-11\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block ring-0 transition-transform rounded-full bg-background shadow border border-primary \",\n        size === \"default\"\n          ? \"h-4 w-4 data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0\"\n          : \"h-5 w-5 data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    ></SwitchPrimitives.Thumb>\n  </SwitchPrimitives.Root>\n));\nSwitch.displayName = SwitchPrimitives.Root.displayName;\n\nexport { Switch };\n",
              "components": [],
              "sections": {},
              "include": true,
              "previewOnly": true,
              "includeInToolbar": false,
              "fileExtension": "tsx"
            },
            {
              "id": "components.ui.table",
              "name": "table",
              "displayName": "table",
              "type": "file",
              "path": "components.ui.table",
              "urlPath": "/components/ui/table",
              "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm font-sans tracking\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b [&_tr]:border-border\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t font-medium [&>tr]:last:border-b-0 border-border bg-muted text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors border-border hover:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-10 px-2 text-left align-middle font-medium [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px] text-muted-foreground font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\n      \"p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px] font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground font-sans tracking\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n",
              "components": [],
              "sections": {},
              "include": true,
              "previewOnly": true,
              "includeInToolbar": false,
              "fileExtension": "tsx"
            },
            {
              "id": "components.ui.tabs",
              "name": "tabs",
              "displayName": "tabs",
              "type": "file",
              "path": "components.ui.tabs",
              "urlPath": "/components/ui/tabs",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-9 items-center justify-center radius bg-muted p-1 text-muted-foreground font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap radius px-3 py-1 text-sm font-medium transition-all focus-visible:outline-none focus-visible:ring-ring focus-visible:ring-2 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 focus-visible:outline-none focus-visible:ring-ring focus-visible:ring-2 focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n",
              "components": [],
              "sections": {},
              "include": true,
              "previewOnly": true,
              "includeInToolbar": false,
              "fileExtension": "tsx"
            },
            {
              "id": "components.ui.textarea",
              "name": "textarea",
              "displayName": "textarea",
              "type": "file",
              "path": "components.ui.textarea",
              "urlPath": "/components/ui/textarea",
              "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[60px] w-full border-2 bg-transparent px-3 py-2 text-base focus-visible:outline-none focus-visible:ring-1 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm border-input text-foreground shadow radius border-ring font-sans tracking\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n",
              "components": [],
              "sections": {},
              "include": true,
              "previewOnly": true,
              "includeInToolbar": false,
              "fileExtension": "tsx"
            },
            {
              "id": "components.ui.toast",
              "name": "toast",
              "displayName": "toast",
              "type": "file",
              "path": "components.ui.toast",
              "urlPath": "/components/ui/toast",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-2 overflow-hidden radius border p-4 pr-6 shadow transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full font-sans tracking\",\n  {\n    variants: {\n      variant: {\n        default: \"border-border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center radius border bg-transparent px-3 text-sm font-medium transition-colors hover:bg-secondary focus:outline-none focus:ring-1 border-ring disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-1 top-1 radius p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-1 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold [&+div]:text-xs font-sans tracking\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90 font-sans tracking\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n",
              "components": [],
              "sections": {},
              "include": true,
              "previewOnly": true,
              "includeInToolbar": false,
              "fileExtension": "tsx"
            },
            {
              "id": "components.ui.toaster",
              "name": "toaster",
              "displayName": "toaster",
              "type": "file",
              "path": "components.ui.toaster",
              "urlPath": "/components/ui/toaster",
              "content": "\"use client\";\n\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport function Toaster() {\n  const { toasts } = useToast();\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        );\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  );\n}\n",
              "components": [],
              "sections": {},
              "include": true,
              "previewOnly": true,
              "includeInToolbar": false,
              "fileExtension": "tsx"
            },
            {
              "id": "components.ui.toggle",
              "name": "toggle",
              "displayName": "toggle",
              "type": "file",
              "path": "components.ui.toggle",
              "urlPath": "/components/ui/toggle",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center gap-2 radius text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 font-sans tracking\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent shadow hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-9 px-2 min-w-9\",\n        sm: \"h-8 px-1.5 min-w-8\",\n        lg: \"h-10 px-2.5 min-w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n",
              "components": [],
              "sections": {},
              "include": true,
              "previewOnly": true,
              "includeInToolbar": false,
              "fileExtension": "tsx"
            },
            {
              "id": "components.ui.tooltip",
              "name": "tooltip",
              "displayName": "tooltip",
              "type": "file",
              "path": "components.ui.tooltip",
              "urlPath": "/components/ui/tooltip",
              "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Portal>\n    <TooltipPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 overflow-hidden px-3 py-1.5 text-xs animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin] bg-popover text-popover-foreground border-border radius shadow font-sans tracking\",\n        className\n      )}\n      {...props}\n    />\n  </TooltipPrimitive.Portal>\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n",
              "components": [],
              "sections": {},
              "include": true,
              "previewOnly": true,
              "includeInToolbar": false,
              "fileExtension": "tsx"
            }
          ]
        }
      ]
    },
    "components.ui": {
      "id": "components.ui",
      "name": "ui",
      "displayName": "ui",
      "type": "directory",
      "path": "components.ui",
      "urlPath": "/components/ui",
      "include": true,
      "previewOnly": true,
      "includeInToolbar": false,
      "children": [
        {
          "id": "components.ui.accordion",
          "name": "accordion",
          "displayName": "accordion",
          "type": "file",
          "path": "components.ui.accordion",
          "urlPath": "/components/ui/accordion",
          "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b border-border\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline text-left [&[data-state=open]>svg]:rotate-180 font-sans tracking\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-5 w-5 shrink-0 transition-transform duration-200 text-muted-foreground\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down font-sans tracking\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n",
          "components": [],
          "sections": {},
          "include": true,
          "previewOnly": true,
          "includeInToolbar": false,
          "fileExtension": "tsx"
        },
        {
          "id": "components.ui.alert-dialog",
          "name": "alert-dialog",
          "displayName": "alert-dialog",
          "type": "file",
          "path": "components.ui.alert-dialog",
          "urlPath": "/components/ui/alert-dialog",
          "content": "\"use client\";\n\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\";\nimport * as React from \"react\";\n\nimport { buttonVariants } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\n\nconst AlertDialog = AlertDialogPrimitive.Root;\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger;\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal;\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n));\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName;\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border p-6 duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] bg-card text-card-foreground border-border shadow radius\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n));\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName;\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n);\nAlertDialogHeader.displayName = \"AlertDialogHeader\";\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n);\nAlertDialogFooter.displayName = \"AlertDialogFooter\";\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold font-sans tracking\", className)}\n    {...props}\n  />\n));\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName;\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\n      \"text-sm text-muted-foreground font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n));\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName;\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n));\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName;\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n));\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName;\n\nexport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogOverlay,\n  AlertDialogPortal,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n};\n",
          "components": [],
          "sections": {},
          "include": true,
          "previewOnly": true,
          "includeInToolbar": false,
          "fileExtension": "tsx"
        },
        {
          "id": "components.ui.alert",
          "name": "alert",
          "displayName": "alert",
          "type": "file",
          "path": "components.ui.alert",
          "urlPath": "/components/ui/alert",
          "content": "import { cva, type VariantProps } from \"class-variance-authority\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst alertVariants = cva(\n  \"relative w-full border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg~*]:pl-7 radius shadow font-sans tracking\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground border-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n);\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      role=\"alert\"\n      className={cn(alertVariants({ variant }), className)}\n      {...props}\n    />\n  );\n});\nAlert.displayName = \"Alert\";\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\n      \"mb-1 font-medium leading-none tracking-tight font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n));\nAlertTitle.displayName = \"AlertTitle\";\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-sm [&_p]:leading-relaxed font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n));\nAlertDescription.displayName = \"AlertDescription\";\n\nexport { Alert, AlertDescription, AlertTitle };\n",
          "components": [],
          "sections": {},
          "include": true,
          "previewOnly": true,
          "includeInToolbar": false,
          "fileExtension": "tsx"
        },
        {
          "id": "components.ui.aspect-ratio",
          "name": "aspect-ratio",
          "displayName": "aspect-ratio",
          "type": "file",
          "path": "components.ui.aspect-ratio",
          "urlPath": "/components/ui/aspect-ratio",
          "content": "\"use client\"\n\nimport * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n",
          "components": [],
          "sections": {},
          "include": true,
          "previewOnly": true,
          "includeInToolbar": false,
          "fileExtension": "tsx"
        },
        {
          "id": "components.ui.avatar",
          "name": "avatar",
          "displayName": "avatar",
          "type": "file",
          "path": "components.ui.avatar",
          "urlPath": "/components/ui/avatar",
          "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted text-muted-foreground font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n",
          "components": [],
          "sections": {},
          "include": true,
          "previewOnly": true,
          "includeInToolbar": false,
          "fileExtension": "tsx"
        },
        {
          "id": "components.ui.badge",
          "name": "badge",
          "displayName": "badge",
          "type": "file",
          "path": "components.ui.badge",
          "urlPath": "/components/ui/badge",
          "content": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 radius border-ring font-sans tracking\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow hover:opacity-80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:opacity-80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow hover:opacity-80\",\n        outline: \"text-foreground border-border\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n",
          "components": [],
          "sections": {},
          "include": true,
          "previewOnly": true,
          "includeInToolbar": false,
          "fileExtension": "tsx"
        },
        {
          "id": "components.ui.breadcrumb",
          "name": "breadcrumb",
          "displayName": "breadcrumb",
          "type": "file",
          "path": "components.ui.breadcrumb",
          "urlPath": "/components/ui/breadcrumb",
          "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5 font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground font-sans tracking\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground font-sans tracking\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n",
          "components": [],
          "sections": {},
          "include": true,
          "previewOnly": true,
          "includeInToolbar": false,
          "fileExtension": "tsx"
        },
        {
          "id": "components.ui.button",
          "name": "button",
          "displayName": "button",
          "type": "file",
          "path": "components.ui.button",
          "urlPath": "/components/ui/button",
          "content": "import { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 radius font-sans tracking\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-2 bg-primary text-primary-foreground border-primary shadow hover:opacity-90\",\n        destructive:\n          \"border-2 bg-destructive text-destructive-foreground border-destructive shadow hover:opacity-90\",\n        outline:\n          \"border-2 border-input bg-background text-foreground shadow hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"border-2 bg-secondary text-secondary-foreground border-secondary shadow hover:opacity-80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 px-3 text-xs\",\n        lg: \"h-10 px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size }), className)}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n",
          "components": [],
          "sections": {},
          "include": true,
          "previewOnly": true,
          "includeInToolbar": false,
          "fileExtension": "tsx"
        },
        {
          "id": "components.ui.calendar",
          "name": "calendar",
          "displayName": "calendar",
          "type": "file",
          "path": "components.ui.calendar",
          "urlPath": "/components/ui/calendar",
          "content": "\"use client\"\n\nimport * as React from \"react\"\nimport {\n  ChevronDownIcon,\n  ChevronLeftIcon,\n  ChevronRightIcon,\n} from \"lucide-react\"\nimport { DayButton, DayPicker, getDefaultClassNames } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button, buttonVariants } from \"@/components/ui/button\"\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  captionLayout = \"label\",\n  buttonVariant = \"ghost\",\n  formatters,\n  components,\n  ...props\n}: React.ComponentProps<typeof DayPicker> & {\n  buttonVariant?: React.ComponentProps<typeof Button>[\"variant\"]\n}) {\n  const defaultClassNames = getDefaultClassNames()\n\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\n        \"group/calendar [--cell-size:calc(var(--spacing)*9)] [[data-slot=card-content]_&]:bg-transparent [[data-slot=popover-content]_&]:bg-transparent\",\n        String.raw\\`rtl:**:[.rdp-button\\\\_next>svg]:rotate-180\\`,\n        String.raw\\`rtl:**:[.rdp-button\\\\_previous>svg]:rotate-180\\`,\n        className\n      )}\n      captionLayout={captionLayout}\n      formatters={{\n        formatMonthDropdown: (date) =>\n          date.toLocaleString(\"default\", { month: \"short\" }),\n        ...formatters,\n      }}\n      classNames={{\n        root: cn(\"w-fit\", defaultClassNames.root),\n        months: cn(\n          \"relative flex flex-col gap-4 md:flex-row\",\n          defaultClassNames.months\n        ),\n        month: cn(\"flex w-full flex-col gap-4\", defaultClassNames.month),\n        nav: cn(\n          \"absolute inset-x-0 top-0 flex w-full items-center justify-between gap-1\",\n          defaultClassNames.nav\n        ),\n        button_previous: cn(\n          buttonVariants({ variant: buttonVariant }),\n          \"h-[--cell-size] w-[--cell-size] select-none p-0 aria-disabled:opacity-50\",\n          defaultClassNames.button_previous\n        ),\n        button_next: cn(\n          buttonVariants({ variant: buttonVariant }),\n          \"h-[--cell-size] w-[--cell-size] select-none p-0 aria-disabled:opacity-50\",\n          defaultClassNames.button_next\n        ),\n        month_caption: cn(\n          \"flex h-[--cell-size] w-full items-center justify-center px-[--cell-size]\",\n          defaultClassNames.month_caption\n        ),\n        dropdowns: cn(\n          \"flex h-[--cell-size] w-full items-center justify-center gap-1.5 text-sm font-medium font-sans tracking\",\n          defaultClassNames.dropdowns\n        ),\n        dropdown_root: cn(\n          \"has-focus:border-ring border-input shadow-xs has-focus:focus-ring-color/50 has-focus:ring-[3px] relative rounded-md border\",\n          defaultClassNames.dropdown_root\n        ),\n        dropdown: cn(\n          \"bg-popover absolute inset-0 opacity-0\",\n          defaultClassNames.dropdown\n        ),\n        caption_label: cn(\n          \"select-none font-medium font-sans tracking\",\n          captionLayout === \"label\"\n            ? \"text-sm\"\n            : \"[&>svg]:text-muted-foreground flex h-8 items-center gap-1 rounded-md pl-2 pr-1 text-sm [&>svg]:size-3.5\",\n          defaultClassNames.caption_label\n        ),\n        table: \"w-full border-collapse\",\n        weekdays: cn(\"flex\", defaultClassNames.weekdays),\n        weekday: cn(\n          \"text-muted-foreground flex-1 select-none rounded-md text-[0.8rem] font-normal font-sans tracking\",\n          defaultClassNames.weekday\n        ),\n        week: cn(\"mt-2 flex w-full\", defaultClassNames.week),\n        week_number_header: cn(\n          \"w-[--cell-size] select-none\",\n          defaultClassNames.week_number_header\n        ),\n        week_number: cn(\n          \"text-muted-foreground select-none text-[0.8rem] font-sans tracking\",\n          defaultClassNames.week_number\n        ),\n        day: cn(\n          \"group/day relative aspect-square h-full w-full select-none p-0 text-center [&:first-child[data-selected=true]_button]:rounded-l-md [&:last-child[data-selected=true]_button]:rounded-r-md\",\n          defaultClassNames.day\n        ),\n        range_start: cn(\n          \"bg-accent rounded-l-md\",\n          defaultClassNames.range_start\n        ),\n        range_middle: cn(\"rounded-none\", defaultClassNames.range_middle),\n        range_end: cn(\"bg-accent rounded-r-md\", defaultClassNames.range_end),\n        today: cn(\n          \"bg-accent text-accent-foreground rounded-md data-[selected=true]:rounded-none\",\n          defaultClassNames.today\n        ),\n        outside: cn(\n          \"text-muted-foreground aria-selected:text-muted-foreground\",\n          defaultClassNames.outside\n        ),\n        disabled: cn(\n          \"text-muted-foreground opacity-50\",\n          defaultClassNames.disabled\n        ),\n        hidden: cn(\"invisible\", defaultClassNames.hidden),\n        ...classNames,\n      }}\n      components={{\n        Root: ({ className, rootRef, ...props }) => {\n          return (\n            <div\n              data-slot=\"calendar\"\n              ref={rootRef}\n              className={cn(className)}\n              {...props}\n            />\n          )\n        },\n        Chevron: ({ className, orientation, ...props }) => {\n          if (orientation === \"left\") {\n            return (\n              <ChevronLeftIcon className={cn(\"size-4\", className)} {...props} />\n            )\n          }\n\n          if (orientation === \"right\") {\n            return (\n              <ChevronRightIcon\n                className={cn(\"size-4\", className)}\n                {...props}\n              />\n            )\n          }\n\n          return (\n            <ChevronDownIcon className={cn(\"size-4\", className)} {...props} />\n          )\n        },\n        DayButton: CalendarDayButton,\n        WeekNumber: ({ children, ...props }) => {\n          return (\n            <td {...props}>\n              <div className=\"flex size-[--cell-size] items-center justify-center text-center\">\n                {children}\n              </div>\n            </td>\n          )\n        },\n        ...components,\n      }}\n      {...props}\n    />\n  )\n}\n\nfunction CalendarDayButton({\n  className,\n  day,\n  modifiers,\n  ...props\n}: React.ComponentProps<typeof DayButton>) {\n  const defaultClassNames = getDefaultClassNames()\n\n  const ref = React.useRef<HTMLButtonElement>(null)\n  React.useEffect(() => {\n    if (modifiers.focused) ref.current?.focus()\n  }, [modifiers.focused])\n\n  return (\n    <Button\n      ref={ref}\n      variant=\"ghost\"\n      size=\"icon\"\n      data-day={day.date.toLocaleDateString()}\n      data-selected-single={\n        modifiers.selected &&\n        !modifiers.range_start &&\n        !modifiers.range_end &&\n        !modifiers.range_middle\n      }\n      data-range-start={modifiers.range_start}\n      data-range-end={modifiers.range_end}\n      data-range-middle={modifiers.range_middle}\n      className={cn(\n        \"data-selected-single-bg-primary data-selected-single-text-primary-foreground data-range-middle-bg-accent data-range-middle-text-accent-foreground data-range-start-bg-primary data-range-start-text-primary-foreground data-range-end-bg-primary data-range-end-text-primary-foreground group-data-[focused=true]/day:border-ring group-data-[focused=true]/day:focus-ring-color/50 flex aspect-square h-auto w-full min-w-[--cell-size] flex-col gap-1 font-normal leading-none data-[range-end=true]:rounded-md data-[range-middle=true]:rounded-none data-[range-start=true]:rounded-md group-data-[focused=true]/day:relative group-data-[focused=true]/day:z-10 group-data-[focused=true]/day:ring-[3px] [&>span]:text-xs [&>span]:opacity-70 font-sans tracking\",\n        defaultClassNames.day,\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Calendar, CalendarDayButton }\n",
          "components": [],
          "sections": {},
          "include": true,
          "previewOnly": true,
          "includeInToolbar": false,
          "fileExtension": "tsx"
        },
        {
          "id": "components.ui.card",
          "name": "card",
          "displayName": "card",
          "type": "file",
          "path": "components.ui.card",
          "urlPath": "/components/ui/card",
          "content": "import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"border radius bg-card text-card-foreground border-border shadow\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\";\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex !rounded flex-col gap-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\";\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight font-sans tracking\", className)}\n    {...props}\n  />\n));\nCardTitle.displayName = \"CardTitle\";\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground font-sans tracking\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\";\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n));\nCardContent.displayName = \"CardContent\";\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n));\nCardFooter.displayName = \"CardFooter\";\n\nexport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n};\n",
          "components": [],
          "sections": {},
          "include": true,
          "previewOnly": true,
          "includeInToolbar": false,
          "fileExtension": "tsx"
        },
        {
          "id": "components.ui.checkbox",
          "name": "checkbox",
          "displayName": "checkbox",
          "type": "file",
          "path": "components.ui.checkbox",
          "urlPath": "/components/ui/checkbox",
          "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 border border-primary radius shadow focus-visible:outline-none focus-visible:ring-1 border-ring disabled:cursor-not-allowed disabled:opacity-50 data-checked-bg-primary data-checked-text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n",
          "components": [],
          "sections": {},
          "include": true,
          "previewOnly": true,
          "includeInToolbar": false,
          "fileExtension": "tsx"
        },
        {
          "id": "components.ui.collapsible",
          "name": "collapsible",
          "displayName": "collapsible",
          "type": "file",
          "path": "components.ui.collapsible",
          "urlPath": "/components/ui/collapsible",
          "content": "\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n",
          "components": [],
          "sections": {},
          "include": true,
          "previewOnly": true,
          "includeInToolbar": false,
          "fileExtension": "tsx"
        },
        {
          "id": "components.ui.context-menu",
          "name": "context-menu",
          "displayName": "context-menu",
          "type": "file",
          "path": "components.ui.context-menu",
          "urlPath": "/components/ui/context-menu",
          "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center radius px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground font-sans tracking\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden radius border bg-popover p-1 text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin] border-border font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden radius border bg-popover p-1 text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin] border-border font-sans tracking\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center radius px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 font-sans tracking\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center radius py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 font-sans tracking\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center radius py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 font-sans tracking\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-4 w-4 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground font-sans tracking\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground font-sans\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n",
          "components": [],
          "sections": {},
          "include": true,
          "previewOnly": true,
          "includeInToolbar": false,
          "fileExtension": "tsx"
        },
        {
          "id": "components.ui.dialog",
          "name": "dialog",
          "displayName": "dialog",
          "type": "file",
          "path": "components.ui.dialog",
          "urlPath": "/components/ui/dialog",
          "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border p-6 duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] bg-card text-card-foreground border-border shadow radius\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 opacity-70 transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 border-ring focus:ring-offset-2 disabled:pointer-events-none radius text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground font-sans tracking\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogTrigger,\n  DialogClose,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n",
          "components": [],
          "sections": {},
          "include": true,
          "previewOnly": true,
          "includeInToolbar": false,
          "fileExtension": "tsx"
        },
        {
          "id": "components.ui.drawer",
          "name": "drawer",
          "displayName": "drawer",
          "type": "file",
          "path": "components.ui.drawer",
          "urlPath": "/components/ui/drawer",
          "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background border-border font-sans tracking\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground font-sans tracking\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n",
          "components": [],
          "sections": {},
          "include": true,
          "previewOnly": true,
          "includeInToolbar": false,
          "fileExtension": "tsx"
        },
        {
          "id": "components.ui.dropdown-menu",
          "name": "dropdown-menu",
          "displayName": "dropdown-menu",
          "type": "file",
          "path": "components.ui.dropdown-menu",
          "urlPath": "/components/ui/dropdown-menu",
          "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 radius px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 font-sans tracking\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden radius border bg-popover p-1 text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin] border-border font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden radius border bg-popover p-1 text-popover-foreground shadow border-border font-sans tracking\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 radius px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0 font-sans tracking\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center radius py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 font-sans tracking\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center radius py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 font-sans tracking\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold font-sans tracking\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60 font-sans\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n",
          "components": [],
          "sections": {},
          "include": true,
          "previewOnly": true,
          "includeInToolbar": false,
          "fileExtension": "tsx"
        },
        {
          "id": "components.ui.hover-card",
          "name": "hover-card",
          "displayName": "hover-card",
          "type": "file",
          "path": "components.ui.hover-card",
          "urlPath": "/components/ui/hover-card",
          "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 radius border bg-popover p-4 text-popover-foreground shadow outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin] border-border font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n",
          "components": [],
          "sections": {},
          "include": true,
          "previewOnly": true,
          "includeInToolbar": false,
          "fileExtension": "tsx"
        },
        {
          "id": "components.ui.input-otp",
          "name": "input-otp",
          "displayName": "input-otp",
          "type": "file",
          "path": "components.ui.input-otp",
          "urlPath": "/components/ui/input-otp",
          "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Minus } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-9 w-9 items-center justify-center border-y border-r border-input text-sm shadow transition-all first:rounded-l-md first:border-l last:rounded-r-md font-sans tracking\",\n        isActive && \"z-10 ring-1 border-ring\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Minus />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n",
          "components": [],
          "sections": {},
          "include": true,
          "previewOnly": true,
          "includeInToolbar": false,
          "fileExtension": "tsx"
        },
        {
          "id": "components.ui.input",
          "name": "input",
          "displayName": "input",
          "type": "file",
          "path": "components.ui.input",
          "urlPath": "/components/ui/input",
          "content": "import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full border-2 bg-transparent px-3 py-1 text-base transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium focus-visible:outline-none focus-visible:ring-1 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm border-input text-foreground shadow radius font-sans tracking\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nInput.displayName = \"Input\";\n\nexport { Input };\n",
          "components": [],
          "sections": {},
          "include": true,
          "previewOnly": true,
          "includeInToolbar": false,
          "fileExtension": "tsx"
        },
        {
          "id": "components.ui.label",
          "name": "label",
          "displayName": "label",
          "type": "file",
          "path": "components.ui.label",
          "urlPath": "/components/ui/label",
          "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 font-sans tracking\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n",
          "components": [],
          "sections": {},
          "include": true,
          "previewOnly": true,
          "includeInToolbar": false,
          "fileExtension": "tsx"
        },
        {
          "id": "components.ui.menubar",
          "name": "menubar",
          "displayName": "menubar",
          "type": "file",
          "path": "components.ui.menubar",
          "urlPath": "/components/ui/menubar",
          "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-9 items-center space-x-1 radius border bg-background p-1 shadow border-border font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center radius px-3 py-1 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center radius px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground font-sans tracking\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden radius border bg-popover p-1 text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin] border-border font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden radius border bg-popover p-1 text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin] border-border font-sans tracking\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center radius px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 font-sans tracking\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center radius py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 font-sans tracking\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center radius py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 font-sans tracking\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-4 w-4 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold font-sans tracking\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground font-sans\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n",
          "components": [],
          "sections": {},
          "include": true,
          "previewOnly": true,
          "includeInToolbar": false,
          "fileExtension": "tsx"
        },
        {
          "id": "components.ui.navigation-menu",
          "name": "navigation-menu",
          "displayName": "navigation-menu",
          "type": "file",
          "path": "components.ui.navigation-menu",
          "urlPath": "/components/ui/navigation-menu",
          "content": "import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-9 w-max items-center justify-center radius bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent font-sans tracking\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden radius border bg-popover text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)] border-border font-sans tracking\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n",
          "components": [],
          "sections": {},
          "include": true,
          "previewOnly": true,
          "includeInToolbar": false,
          "fileExtension": "tsx"
        },
        {
          "id": "components.ui.popover",
          "name": "popover",
          "displayName": "popover",
          "type": "file",
          "path": "components.ui.popover",
          "urlPath": "/components/ui/popover",
          "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverAnchor = PopoverPrimitive.Anchor\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 border p-4 outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin] bg-popover text-popover-foreground border-border shadow radius font-sans tracking\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }\n",
          "components": [],
          "sections": {},
          "include": true,
          "previewOnly": true,
          "includeInToolbar": false,
          "fileExtension": "tsx"
        },
        {
          "id": "components.ui.progress",
          "name": "progress",
          "displayName": "progress",
          "type": "file",
          "path": "components.ui.progress",
          "urlPath": "/components/ui/progress",
          "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-2 w-full overflow-hidden bg-secondary radius\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className={cn(\n        \"h-full w-full flex-1 transition-all bg-primary\",\n        \\`translate-x-[-\\${100 - (value || 0)}%]\\`\n      )}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n",
          "components": [],
          "sections": {},
          "include": true,
          "previewOnly": true,
          "includeInToolbar": false,
          "fileExtension": "tsx"
        },
        {
          "id": "components.ui.radio-group",
          "name": "radio-group",
          "displayName": "radio-group",
          "type": "file",
          "path": "components.ui.radio-group",
          "urlPath": "/components/ui/radio-group",
          "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border focus:outline-none focus-visible:ring-1 disabled:cursor-not-allowed disabled:opacity-50 border-primary text-primary shadow border-ring\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-3.5 w-3.5 fill-current text-primary\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n",
          "components": [],
          "sections": {},
          "include": true,
          "previewOnly": true,
          "includeInToolbar": false,
          "fileExtension": "tsx"
        },
        {
          "id": "components.ui.resizable",
          "name": "resizable",
          "displayName": "resizable",
          "type": "file",
          "path": "components.ui.resizable",
          "urlPath": "/components/ui/resizable",
          "content": "\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border border-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n",
          "components": [],
          "sections": {},
          "include": true,
          "previewOnly": true,
          "includeInToolbar": false,
          "fileExtension": "tsx"
        },
        {
          "id": "components.ui.scroll-area",
          "name": "scroll-area",
          "displayName": "scroll-area",
          "type": "file",
          "path": "components.ui.scroll-area",
          "urlPath": "/components/ui/scroll-area",
          "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n",
          "components": [],
          "sections": {},
          "include": true,
          "previewOnly": true,
          "includeInToolbar": false,
          "fileExtension": "tsx"
        },
        {
          "id": "components.ui.select",
          "name": "select",
          "displayName": "select",
          "type": "file",
          "path": "components.ui.select",
          "urlPath": "/components/ui/select",
          "content": "\"use client\";\n\nimport * as SelectPrimitive from \"@radix-ui/react-select\";\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Select = SelectPrimitive.Root;\n\nconst SelectGroup = SelectPrimitive.Group;\n\nconst SelectValue = SelectPrimitive.Value;\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between whitespace-nowrap border-2 bg-transparent px-3 py-2 text-sm focus:outline-none focus:ring-1 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1 border-input text-foreground shadow radius border-ring font-sans tracking\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n));\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName;\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n));\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName;\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n));\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName;\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden border data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin] bg-popover text-popover-foreground border-border shadow radius font-sans tracking\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n));\nSelectContent.displayName = SelectPrimitive.Content.displayName;\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n));\nSelectLabel.displayName = SelectPrimitive.Label.displayName;\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center py-1.5 pl-2 pr-8 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 radius focus:bg-accent focus:text-accent-foreground font-sans tracking\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute right-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n));\nSelectItem.displayName = SelectPrimitive.Item.displayName;\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n));\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName;\n\nexport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n};\n",
          "components": [],
          "sections": {},
          "include": true,
          "previewOnly": true,
          "includeInToolbar": false,
          "fileExtension": "tsx"
        },
        {
          "id": "components.ui.separator",
          "name": "separator",
          "displayName": "separator",
          "type": "file",
          "path": "components.ui.separator",
          "urlPath": "/components/ui/separator",
          "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n",
          "components": [],
          "sections": {},
          "include": true,
          "previewOnly": true,
          "includeInToolbar": false,
          "fileExtension": "tsx"
        },
        {
          "id": "components.ui.sheet",
          "name": "sheet",
          "displayName": "sheet",
          "type": "file",
          "path": "components.ui.sheet",
          "urlPath": "/components/ui/sheet",
          "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 p-6 transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out bg-card text-card-foreground shadow\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b border-border data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t border-border data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r border-border data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4 border-l border-border data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 opacity-70 transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 border-ring focus:ring-offset-2 disabled:pointer-events-none radius text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n      {children}\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground font-sans tracking\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground font-sans tracking\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n",
          "components": [],
          "sections": {},
          "include": true,
          "previewOnly": true,
          "includeInToolbar": false,
          "fileExtension": "tsx"
        },
        {
          "id": "components.ui.skeleton",
          "name": "skeleton",
          "displayName": "skeleton",
          "type": "file",
          "path": "components.ui.skeleton",
          "urlPath": "/components/ui/skeleton",
          "content": "import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse bg-muted radius\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n",
          "components": [],
          "sections": {},
          "include": true,
          "previewOnly": true,
          "includeInToolbar": false,
          "fileExtension": "tsx"
        },
        {
          "id": "components.ui.slider",
          "name": "slider",
          "displayName": "slider",
          "type": "file",
          "path": "components.ui.slider",
          "urlPath": "/components/ui/slider",
          "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-1.5 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-4 w-4 rounded-full border transition-colors focus-visible:outline-none focus-visible:ring-1 disabled:pointer-events-none disabled:opacity-50 bg-background border-primary shadow border-ring\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n",
          "components": [],
          "sections": {},
          "include": true,
          "previewOnly": true,
          "includeInToolbar": false,
          "fileExtension": "tsx"
        },
        {
          "id": "components.ui.sonner",
          "name": "sonner",
          "displayName": "sonner",
          "type": "file",
          "path": "components.ui.sonner",
          "urlPath": "/components/ui/sonner",
          "content": "\"use client\"\n\nimport { useTheme } from \"next-themes\"\nimport { Toaster as Sonner } from \"sonner\"\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow group-[.toaster]:font-sans group-[.toaster]:tracking\",\n          description: \"group-[.toast]:text-muted-foreground group-[.toast]:font-sans group-[.toast]:tracking\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground group-[.toast]:font-sans group-[.toast]:tracking\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground group-[.toast]:font-sans group-[.toast]:tracking\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster }\n",
          "components": [],
          "sections": {},
          "include": true,
          "previewOnly": true,
          "includeInToolbar": false,
          "fileExtension": "tsx"
        },
        {
          "id": "components.ui.switch",
          "name": "switch",
          "displayName": "switch",
          "type": "file",
          "path": "components.ui.switch",
          "urlPath": "/components/ui/switch",
          "content": "\"use client\";\n\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\ninterface SwitchProps\n  extends React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root> {\n  size?: \"default\" | \"lg\";\n}\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  SwitchProps\n>(({ className, size = \"default\", ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex shrink-0 cursor-pointer items-center border transition-colors disabled:cursor-not-allowed disabled:opacity-50 rounded-full data-checked-bg-primary data-unchecked-bg-input focus-ring border-primary\",\n      size === \"default\" ? \"h-5 w-9\" : \"h-6 w-11\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block ring-0 transition-transform rounded-full bg-background shadow border border-primary \",\n        size === \"default\"\n          ? \"h-4 w-4 data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0\"\n          : \"h-5 w-5 data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    ></SwitchPrimitives.Thumb>\n  </SwitchPrimitives.Root>\n));\nSwitch.displayName = SwitchPrimitives.Root.displayName;\n\nexport { Switch };\n",
          "components": [],
          "sections": {},
          "include": true,
          "previewOnly": true,
          "includeInToolbar": false,
          "fileExtension": "tsx"
        },
        {
          "id": "components.ui.table",
          "name": "table",
          "displayName": "table",
          "type": "file",
          "path": "components.ui.table",
          "urlPath": "/components/ui/table",
          "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm font-sans tracking\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b [&_tr]:border-border\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t font-medium [&>tr]:last:border-b-0 border-border bg-muted text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors border-border hover:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-10 px-2 text-left align-middle font-medium [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px] text-muted-foreground font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\n      \"p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px] font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground font-sans tracking\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n",
          "components": [],
          "sections": {},
          "include": true,
          "previewOnly": true,
          "includeInToolbar": false,
          "fileExtension": "tsx"
        },
        {
          "id": "components.ui.tabs",
          "name": "tabs",
          "displayName": "tabs",
          "type": "file",
          "path": "components.ui.tabs",
          "urlPath": "/components/ui/tabs",
          "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-9 items-center justify-center radius bg-muted p-1 text-muted-foreground font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap radius px-3 py-1 text-sm font-medium transition-all focus-visible:outline-none focus-visible:ring-ring focus-visible:ring-2 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 focus-visible:outline-none focus-visible:ring-ring focus-visible:ring-2 focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n",
          "components": [],
          "sections": {},
          "include": true,
          "previewOnly": true,
          "includeInToolbar": false,
          "fileExtension": "tsx"
        },
        {
          "id": "components.ui.textarea",
          "name": "textarea",
          "displayName": "textarea",
          "type": "file",
          "path": "components.ui.textarea",
          "urlPath": "/components/ui/textarea",
          "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[60px] w-full border-2 bg-transparent px-3 py-2 text-base focus-visible:outline-none focus-visible:ring-1 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm border-input text-foreground shadow radius border-ring font-sans tracking\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n",
          "components": [],
          "sections": {},
          "include": true,
          "previewOnly": true,
          "includeInToolbar": false,
          "fileExtension": "tsx"
        },
        {
          "id": "components.ui.toast",
          "name": "toast",
          "displayName": "toast",
          "type": "file",
          "path": "components.ui.toast",
          "urlPath": "/components/ui/toast",
          "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-2 overflow-hidden radius border p-4 pr-6 shadow transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full font-sans tracking\",\n  {\n    variants: {\n      variant: {\n        default: \"border-border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center radius border bg-transparent px-3 text-sm font-medium transition-colors hover:bg-secondary focus:outline-none focus:ring-1 border-ring disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-1 top-1 radius p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-1 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold [&+div]:text-xs font-sans tracking\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90 font-sans tracking\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n",
          "components": [],
          "sections": {},
          "include": true,
          "previewOnly": true,
          "includeInToolbar": false,
          "fileExtension": "tsx"
        },
        {
          "id": "components.ui.toaster",
          "name": "toaster",
          "displayName": "toaster",
          "type": "file",
          "path": "components.ui.toaster",
          "urlPath": "/components/ui/toaster",
          "content": "\"use client\";\n\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport function Toaster() {\n  const { toasts } = useToast();\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        );\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  );\n}\n",
          "components": [],
          "sections": {},
          "include": true,
          "previewOnly": true,
          "includeInToolbar": false,
          "fileExtension": "tsx"
        },
        {
          "id": "components.ui.toggle",
          "name": "toggle",
          "displayName": "toggle",
          "type": "file",
          "path": "components.ui.toggle",
          "urlPath": "/components/ui/toggle",
          "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center gap-2 radius text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 font-sans tracking\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent shadow hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-9 px-2 min-w-9\",\n        sm: \"h-8 px-1.5 min-w-8\",\n        lg: \"h-10 px-2.5 min-w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n",
          "components": [],
          "sections": {},
          "include": true,
          "previewOnly": true,
          "includeInToolbar": false,
          "fileExtension": "tsx"
        },
        {
          "id": "components.ui.tooltip",
          "name": "tooltip",
          "displayName": "tooltip",
          "type": "file",
          "path": "components.ui.tooltip",
          "urlPath": "/components/ui/tooltip",
          "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Portal>\n    <TooltipPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 overflow-hidden px-3 py-1.5 text-xs animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin] bg-popover text-popover-foreground border-border radius shadow font-sans tracking\",\n        className\n      )}\n      {...props}\n    />\n  </TooltipPrimitive.Portal>\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n",
          "components": [],
          "sections": {},
          "include": true,
          "previewOnly": true,
          "includeInToolbar": false,
          "fileExtension": "tsx"
        }
      ]
    },
    "components.ui.accordion": {
      "id": "components.ui.accordion",
      "name": "accordion",
      "displayName": "accordion",
      "type": "file",
      "path": "components.ui.accordion",
      "urlPath": "/components/ui/accordion",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b border-border\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline text-left [&[data-state=open]>svg]:rotate-180 font-sans tracking\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-5 w-5 shrink-0 transition-transform duration-200 text-muted-foreground\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down font-sans tracking\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n",
      "components": [],
      "sections": {},
      "include": true,
      "previewOnly": true,
      "includeInToolbar": false,
      "fileExtension": "tsx"
    },
    "components.ui.alert-dialog": {
      "id": "components.ui.alert-dialog",
      "name": "alert-dialog",
      "displayName": "alert-dialog",
      "type": "file",
      "path": "components.ui.alert-dialog",
      "urlPath": "/components/ui/alert-dialog",
      "content": "\"use client\";\n\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\";\nimport * as React from \"react\";\n\nimport { buttonVariants } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\n\nconst AlertDialog = AlertDialogPrimitive.Root;\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger;\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal;\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n));\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName;\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border p-6 duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] bg-card text-card-foreground border-border shadow radius\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n));\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName;\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n);\nAlertDialogHeader.displayName = \"AlertDialogHeader\";\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n);\nAlertDialogFooter.displayName = \"AlertDialogFooter\";\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold font-sans tracking\", className)}\n    {...props}\n  />\n));\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName;\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\n      \"text-sm text-muted-foreground font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n));\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName;\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n));\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName;\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n));\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName;\n\nexport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogOverlay,\n  AlertDialogPortal,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n};\n",
      "components": [],
      "sections": {},
      "include": true,
      "previewOnly": true,
      "includeInToolbar": false,
      "fileExtension": "tsx"
    },
    "components.ui.alert": {
      "id": "components.ui.alert",
      "name": "alert",
      "displayName": "alert",
      "type": "file",
      "path": "components.ui.alert",
      "urlPath": "/components/ui/alert",
      "content": "import { cva, type VariantProps } from \"class-variance-authority\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst alertVariants = cva(\n  \"relative w-full border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg~*]:pl-7 radius shadow font-sans tracking\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground border-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n);\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      role=\"alert\"\n      className={cn(alertVariants({ variant }), className)}\n      {...props}\n    />\n  );\n});\nAlert.displayName = \"Alert\";\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\n      \"mb-1 font-medium leading-none tracking-tight font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n));\nAlertTitle.displayName = \"AlertTitle\";\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-sm [&_p]:leading-relaxed font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n));\nAlertDescription.displayName = \"AlertDescription\";\n\nexport { Alert, AlertDescription, AlertTitle };\n",
      "components": [],
      "sections": {},
      "include": true,
      "previewOnly": true,
      "includeInToolbar": false,
      "fileExtension": "tsx"
    },
    "components.ui.aspect-ratio": {
      "id": "components.ui.aspect-ratio",
      "name": "aspect-ratio",
      "displayName": "aspect-ratio",
      "type": "file",
      "path": "components.ui.aspect-ratio",
      "urlPath": "/components/ui/aspect-ratio",
      "content": "\"use client\"\n\nimport * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n",
      "components": [],
      "sections": {},
      "include": true,
      "previewOnly": true,
      "includeInToolbar": false,
      "fileExtension": "tsx"
    },
    "components.ui.avatar": {
      "id": "components.ui.avatar",
      "name": "avatar",
      "displayName": "avatar",
      "type": "file",
      "path": "components.ui.avatar",
      "urlPath": "/components/ui/avatar",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted text-muted-foreground font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n",
      "components": [],
      "sections": {},
      "include": true,
      "previewOnly": true,
      "includeInToolbar": false,
      "fileExtension": "tsx"
    },
    "components.ui.badge": {
      "id": "components.ui.badge",
      "name": "badge",
      "displayName": "badge",
      "type": "file",
      "path": "components.ui.badge",
      "urlPath": "/components/ui/badge",
      "content": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 radius border-ring font-sans tracking\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow hover:opacity-80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:opacity-80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow hover:opacity-80\",\n        outline: \"text-foreground border-border\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n",
      "components": [],
      "sections": {},
      "include": true,
      "previewOnly": true,
      "includeInToolbar": false,
      "fileExtension": "tsx"
    },
    "components.ui.breadcrumb": {
      "id": "components.ui.breadcrumb",
      "name": "breadcrumb",
      "displayName": "breadcrumb",
      "type": "file",
      "path": "components.ui.breadcrumb",
      "urlPath": "/components/ui/breadcrumb",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5 font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground font-sans tracking\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground font-sans tracking\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n",
      "components": [],
      "sections": {},
      "include": true,
      "previewOnly": true,
      "includeInToolbar": false,
      "fileExtension": "tsx"
    },
    "components.ui.button": {
      "id": "components.ui.button",
      "name": "button",
      "displayName": "button",
      "type": "file",
      "path": "components.ui.button",
      "urlPath": "/components/ui/button",
      "content": "import { Slot } from \"@radix-ui/react-slot\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 radius font-sans tracking\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-2 bg-primary text-primary-foreground border-primary shadow hover:opacity-90\",\n        destructive:\n          \"border-2 bg-destructive text-destructive-foreground border-destructive shadow hover:opacity-90\",\n        outline:\n          \"border-2 border-input bg-background text-foreground shadow hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"border-2 bg-secondary text-secondary-foreground border-secondary shadow hover:opacity-80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 px-3 text-xs\",\n        lg: \"h-10 px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size }), className)}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n",
      "components": [],
      "sections": {},
      "include": true,
      "previewOnly": true,
      "includeInToolbar": false,
      "fileExtension": "tsx"
    },
    "components.ui.calendar": {
      "id": "components.ui.calendar",
      "name": "calendar",
      "displayName": "calendar",
      "type": "file",
      "path": "components.ui.calendar",
      "urlPath": "/components/ui/calendar",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport {\n  ChevronDownIcon,\n  ChevronLeftIcon,\n  ChevronRightIcon,\n} from \"lucide-react\"\nimport { DayButton, DayPicker, getDefaultClassNames } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button, buttonVariants } from \"@/components/ui/button\"\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  captionLayout = \"label\",\n  buttonVariant = \"ghost\",\n  formatters,\n  components,\n  ...props\n}: React.ComponentProps<typeof DayPicker> & {\n  buttonVariant?: React.ComponentProps<typeof Button>[\"variant\"]\n}) {\n  const defaultClassNames = getDefaultClassNames()\n\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\n        \"group/calendar [--cell-size:calc(var(--spacing)*9)] [[data-slot=card-content]_&]:bg-transparent [[data-slot=popover-content]_&]:bg-transparent\",\n        String.raw\\`rtl:**:[.rdp-button\\\\_next>svg]:rotate-180\\`,\n        String.raw\\`rtl:**:[.rdp-button\\\\_previous>svg]:rotate-180\\`,\n        className\n      )}\n      captionLayout={captionLayout}\n      formatters={{\n        formatMonthDropdown: (date) =>\n          date.toLocaleString(\"default\", { month: \"short\" }),\n        ...formatters,\n      }}\n      classNames={{\n        root: cn(\"w-fit\", defaultClassNames.root),\n        months: cn(\n          \"relative flex flex-col gap-4 md:flex-row\",\n          defaultClassNames.months\n        ),\n        month: cn(\"flex w-full flex-col gap-4\", defaultClassNames.month),\n        nav: cn(\n          \"absolute inset-x-0 top-0 flex w-full items-center justify-between gap-1\",\n          defaultClassNames.nav\n        ),\n        button_previous: cn(\n          buttonVariants({ variant: buttonVariant }),\n          \"h-[--cell-size] w-[--cell-size] select-none p-0 aria-disabled:opacity-50\",\n          defaultClassNames.button_previous\n        ),\n        button_next: cn(\n          buttonVariants({ variant: buttonVariant }),\n          \"h-[--cell-size] w-[--cell-size] select-none p-0 aria-disabled:opacity-50\",\n          defaultClassNames.button_next\n        ),\n        month_caption: cn(\n          \"flex h-[--cell-size] w-full items-center justify-center px-[--cell-size]\",\n          defaultClassNames.month_caption\n        ),\n        dropdowns: cn(\n          \"flex h-[--cell-size] w-full items-center justify-center gap-1.5 text-sm font-medium font-sans tracking\",\n          defaultClassNames.dropdowns\n        ),\n        dropdown_root: cn(\n          \"has-focus:border-ring border-input shadow-xs has-focus:focus-ring-color/50 has-focus:ring-[3px] relative rounded-md border\",\n          defaultClassNames.dropdown_root\n        ),\n        dropdown: cn(\n          \"bg-popover absolute inset-0 opacity-0\",\n          defaultClassNames.dropdown\n        ),\n        caption_label: cn(\n          \"select-none font-medium font-sans tracking\",\n          captionLayout === \"label\"\n            ? \"text-sm\"\n            : \"[&>svg]:text-muted-foreground flex h-8 items-center gap-1 rounded-md pl-2 pr-1 text-sm [&>svg]:size-3.5\",\n          defaultClassNames.caption_label\n        ),\n        table: \"w-full border-collapse\",\n        weekdays: cn(\"flex\", defaultClassNames.weekdays),\n        weekday: cn(\n          \"text-muted-foreground flex-1 select-none rounded-md text-[0.8rem] font-normal font-sans tracking\",\n          defaultClassNames.weekday\n        ),\n        week: cn(\"mt-2 flex w-full\", defaultClassNames.week),\n        week_number_header: cn(\n          \"w-[--cell-size] select-none\",\n          defaultClassNames.week_number_header\n        ),\n        week_number: cn(\n          \"text-muted-foreground select-none text-[0.8rem] font-sans tracking\",\n          defaultClassNames.week_number\n        ),\n        day: cn(\n          \"group/day relative aspect-square h-full w-full select-none p-0 text-center [&:first-child[data-selected=true]_button]:rounded-l-md [&:last-child[data-selected=true]_button]:rounded-r-md\",\n          defaultClassNames.day\n        ),\n        range_start: cn(\n          \"bg-accent rounded-l-md\",\n          defaultClassNames.range_start\n        ),\n        range_middle: cn(\"rounded-none\", defaultClassNames.range_middle),\n        range_end: cn(\"bg-accent rounded-r-md\", defaultClassNames.range_end),\n        today: cn(\n          \"bg-accent text-accent-foreground rounded-md data-[selected=true]:rounded-none\",\n          defaultClassNames.today\n        ),\n        outside: cn(\n          \"text-muted-foreground aria-selected:text-muted-foreground\",\n          defaultClassNames.outside\n        ),\n        disabled: cn(\n          \"text-muted-foreground opacity-50\",\n          defaultClassNames.disabled\n        ),\n        hidden: cn(\"invisible\", defaultClassNames.hidden),\n        ...classNames,\n      }}\n      components={{\n        Root: ({ className, rootRef, ...props }) => {\n          return (\n            <div\n              data-slot=\"calendar\"\n              ref={rootRef}\n              className={cn(className)}\n              {...props}\n            />\n          )\n        },\n        Chevron: ({ className, orientation, ...props }) => {\n          if (orientation === \"left\") {\n            return (\n              <ChevronLeftIcon className={cn(\"size-4\", className)} {...props} />\n            )\n          }\n\n          if (orientation === \"right\") {\n            return (\n              <ChevronRightIcon\n                className={cn(\"size-4\", className)}\n                {...props}\n              />\n            )\n          }\n\n          return (\n            <ChevronDownIcon className={cn(\"size-4\", className)} {...props} />\n          )\n        },\n        DayButton: CalendarDayButton,\n        WeekNumber: ({ children, ...props }) => {\n          return (\n            <td {...props}>\n              <div className=\"flex size-[--cell-size] items-center justify-center text-center\">\n                {children}\n              </div>\n            </td>\n          )\n        },\n        ...components,\n      }}\n      {...props}\n    />\n  )\n}\n\nfunction CalendarDayButton({\n  className,\n  day,\n  modifiers,\n  ...props\n}: React.ComponentProps<typeof DayButton>) {\n  const defaultClassNames = getDefaultClassNames()\n\n  const ref = React.useRef<HTMLButtonElement>(null)\n  React.useEffect(() => {\n    if (modifiers.focused) ref.current?.focus()\n  }, [modifiers.focused])\n\n  return (\n    <Button\n      ref={ref}\n      variant=\"ghost\"\n      size=\"icon\"\n      data-day={day.date.toLocaleDateString()}\n      data-selected-single={\n        modifiers.selected &&\n        !modifiers.range_start &&\n        !modifiers.range_end &&\n        !modifiers.range_middle\n      }\n      data-range-start={modifiers.range_start}\n      data-range-end={modifiers.range_end}\n      data-range-middle={modifiers.range_middle}\n      className={cn(\n        \"data-selected-single-bg-primary data-selected-single-text-primary-foreground data-range-middle-bg-accent data-range-middle-text-accent-foreground data-range-start-bg-primary data-range-start-text-primary-foreground data-range-end-bg-primary data-range-end-text-primary-foreground group-data-[focused=true]/day:border-ring group-data-[focused=true]/day:focus-ring-color/50 flex aspect-square h-auto w-full min-w-[--cell-size] flex-col gap-1 font-normal leading-none data-[range-end=true]:rounded-md data-[range-middle=true]:rounded-none data-[range-start=true]:rounded-md group-data-[focused=true]/day:relative group-data-[focused=true]/day:z-10 group-data-[focused=true]/day:ring-[3px] [&>span]:text-xs [&>span]:opacity-70 font-sans tracking\",\n        defaultClassNames.day,\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport { Calendar, CalendarDayButton }\n",
      "components": [],
      "sections": {},
      "include": true,
      "previewOnly": true,
      "includeInToolbar": false,
      "fileExtension": "tsx"
    },
    "components.ui.card": {
      "id": "components.ui.card",
      "name": "card",
      "displayName": "card",
      "type": "file",
      "path": "components.ui.card",
      "urlPath": "/components/ui/card",
      "content": "import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"border radius bg-card text-card-foreground border-border shadow\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\";\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex !rounded flex-col gap-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\";\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight font-sans tracking\", className)}\n    {...props}\n  />\n));\nCardTitle.displayName = \"CardTitle\";\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground font-sans tracking\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\";\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n));\nCardContent.displayName = \"CardContent\";\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n));\nCardFooter.displayName = \"CardFooter\";\n\nexport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n};\n",
      "components": [],
      "sections": {},
      "include": true,
      "previewOnly": true,
      "includeInToolbar": false,
      "fileExtension": "tsx"
    },
    "components.ui.checkbox": {
      "id": "components.ui.checkbox",
      "name": "checkbox",
      "displayName": "checkbox",
      "type": "file",
      "path": "components.ui.checkbox",
      "urlPath": "/components/ui/checkbox",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 border border-primary radius shadow focus-visible:outline-none focus-visible:ring-1 border-ring disabled:cursor-not-allowed disabled:opacity-50 data-checked-bg-primary data-checked-text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n",
      "components": [],
      "sections": {},
      "include": true,
      "previewOnly": true,
      "includeInToolbar": false,
      "fileExtension": "tsx"
    },
    "components.ui.collapsible": {
      "id": "components.ui.collapsible",
      "name": "collapsible",
      "displayName": "collapsible",
      "type": "file",
      "path": "components.ui.collapsible",
      "urlPath": "/components/ui/collapsible",
      "content": "\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n",
      "components": [],
      "sections": {},
      "include": true,
      "previewOnly": true,
      "includeInToolbar": false,
      "fileExtension": "tsx"
    },
    "components.ui.context-menu": {
      "id": "components.ui.context-menu",
      "name": "context-menu",
      "displayName": "context-menu",
      "type": "file",
      "path": "components.ui.context-menu",
      "urlPath": "/components/ui/context-menu",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center radius px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground font-sans tracking\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden radius border bg-popover p-1 text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin] border-border font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden radius border bg-popover p-1 text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin] border-border font-sans tracking\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center radius px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 font-sans tracking\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center radius py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 font-sans tracking\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center radius py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 font-sans tracking\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-4 w-4 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground font-sans tracking\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground font-sans\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n",
      "components": [],
      "sections": {},
      "include": true,
      "previewOnly": true,
      "includeInToolbar": false,
      "fileExtension": "tsx"
    },
    "components.ui.dialog": {
      "id": "components.ui.dialog",
      "name": "dialog",
      "displayName": "dialog",
      "type": "file",
      "path": "components.ui.dialog",
      "urlPath": "/components/ui/dialog",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border p-6 duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] bg-card text-card-foreground border-border shadow radius\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 opacity-70 transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 border-ring focus:ring-offset-2 disabled:pointer-events-none radius text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground font-sans tracking\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogTrigger,\n  DialogClose,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n",
      "components": [],
      "sections": {},
      "include": true,
      "previewOnly": true,
      "includeInToolbar": false,
      "fileExtension": "tsx"
    },
    "components.ui.drawer": {
      "id": "components.ui.drawer",
      "name": "drawer",
      "displayName": "drawer",
      "type": "file",
      "path": "components.ui.drawer",
      "urlPath": "/components/ui/drawer",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background border-border font-sans tracking\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground font-sans tracking\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n",
      "components": [],
      "sections": {},
      "include": true,
      "previewOnly": true,
      "includeInToolbar": false,
      "fileExtension": "tsx"
    },
    "components.ui.dropdown-menu": {
      "id": "components.ui.dropdown-menu",
      "name": "dropdown-menu",
      "displayName": "dropdown-menu",
      "type": "file",
      "path": "components.ui.dropdown-menu",
      "urlPath": "/components/ui/dropdown-menu",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 radius px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 font-sans tracking\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden radius border bg-popover p-1 text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin] border-border font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden radius border bg-popover p-1 text-popover-foreground shadow border-border font-sans tracking\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 radius px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0 font-sans tracking\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center radius py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 font-sans tracking\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center radius py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 font-sans tracking\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold font-sans tracking\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60 font-sans\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n",
      "components": [],
      "sections": {},
      "include": true,
      "previewOnly": true,
      "includeInToolbar": false,
      "fileExtension": "tsx"
    },
    "components.ui.hover-card": {
      "id": "components.ui.hover-card",
      "name": "hover-card",
      "displayName": "hover-card",
      "type": "file",
      "path": "components.ui.hover-card",
      "urlPath": "/components/ui/hover-card",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 radius border bg-popover p-4 text-popover-foreground shadow outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin] border-border font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n",
      "components": [],
      "sections": {},
      "include": true,
      "previewOnly": true,
      "includeInToolbar": false,
      "fileExtension": "tsx"
    },
    "components.ui.input-otp": {
      "id": "components.ui.input-otp",
      "name": "input-otp",
      "displayName": "input-otp",
      "type": "file",
      "path": "components.ui.input-otp",
      "urlPath": "/components/ui/input-otp",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Minus } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-9 w-9 items-center justify-center border-y border-r border-input text-sm shadow transition-all first:rounded-l-md first:border-l last:rounded-r-md font-sans tracking\",\n        isActive && \"z-10 ring-1 border-ring\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Minus />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n",
      "components": [],
      "sections": {},
      "include": true,
      "previewOnly": true,
      "includeInToolbar": false,
      "fileExtension": "tsx"
    },
    "components.ui.input": {
      "id": "components.ui.input",
      "name": "input",
      "displayName": "input",
      "type": "file",
      "path": "components.ui.input",
      "urlPath": "/components/ui/input",
      "content": "import * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full border-2 bg-transparent px-3 py-1 text-base transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium focus-visible:outline-none focus-visible:ring-1 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm border-input text-foreground shadow radius font-sans tracking\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nInput.displayName = \"Input\";\n\nexport { Input };\n",
      "components": [],
      "sections": {},
      "include": true,
      "previewOnly": true,
      "includeInToolbar": false,
      "fileExtension": "tsx"
    },
    "components.ui.label": {
      "id": "components.ui.label",
      "name": "label",
      "displayName": "label",
      "type": "file",
      "path": "components.ui.label",
      "urlPath": "/components/ui/label",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 font-sans tracking\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n",
      "components": [],
      "sections": {},
      "include": true,
      "previewOnly": true,
      "includeInToolbar": false,
      "fileExtension": "tsx"
    },
    "components.ui.menubar": {
      "id": "components.ui.menubar",
      "name": "menubar",
      "displayName": "menubar",
      "type": "file",
      "path": "components.ui.menubar",
      "urlPath": "/components/ui/menubar",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-9 items-center space-x-1 radius border bg-background p-1 shadow border-border font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center radius px-3 py-1 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center radius px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground font-sans tracking\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden radius border bg-popover p-1 text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin] border-border font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden radius border bg-popover p-1 text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin] border-border font-sans tracking\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center radius px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 font-sans tracking\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center radius py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 font-sans tracking\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center radius py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 font-sans tracking\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-4 w-4 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold font-sans tracking\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground font-sans\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n",
      "components": [],
      "sections": {},
      "include": true,
      "previewOnly": true,
      "includeInToolbar": false,
      "fileExtension": "tsx"
    },
    "components.ui.navigation-menu": {
      "id": "components.ui.navigation-menu",
      "name": "navigation-menu",
      "displayName": "navigation-menu",
      "type": "file",
      "path": "components.ui.navigation-menu",
      "urlPath": "/components/ui/navigation-menu",
      "content": "import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-9 w-max items-center justify-center radius bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent font-sans tracking\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden radius border bg-popover text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)] border-border font-sans tracking\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n",
      "components": [],
      "sections": {},
      "include": true,
      "previewOnly": true,
      "includeInToolbar": false,
      "fileExtension": "tsx"
    },
    "components.ui.popover": {
      "id": "components.ui.popover",
      "name": "popover",
      "displayName": "popover",
      "type": "file",
      "path": "components.ui.popover",
      "urlPath": "/components/ui/popover",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverAnchor = PopoverPrimitive.Anchor\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 border p-4 outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin] bg-popover text-popover-foreground border-border shadow radius font-sans tracking\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }\n",
      "components": [],
      "sections": {},
      "include": true,
      "previewOnly": true,
      "includeInToolbar": false,
      "fileExtension": "tsx"
    },
    "components.ui.progress": {
      "id": "components.ui.progress",
      "name": "progress",
      "displayName": "progress",
      "type": "file",
      "path": "components.ui.progress",
      "urlPath": "/components/ui/progress",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-2 w-full overflow-hidden bg-secondary radius\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className={cn(\n        \"h-full w-full flex-1 transition-all bg-primary\",\n        \\`translate-x-[-\\${100 - (value || 0)}%]\\`\n      )}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n",
      "components": [],
      "sections": {},
      "include": true,
      "previewOnly": true,
      "includeInToolbar": false,
      "fileExtension": "tsx"
    },
    "components.ui.radio-group": {
      "id": "components.ui.radio-group",
      "name": "radio-group",
      "displayName": "radio-group",
      "type": "file",
      "path": "components.ui.radio-group",
      "urlPath": "/components/ui/radio-group",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border focus:outline-none focus-visible:ring-1 disabled:cursor-not-allowed disabled:opacity-50 border-primary text-primary shadow border-ring\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-3.5 w-3.5 fill-current text-primary\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n",
      "components": [],
      "sections": {},
      "include": true,
      "previewOnly": true,
      "includeInToolbar": false,
      "fileExtension": "tsx"
    },
    "components.ui.resizable": {
      "id": "components.ui.resizable",
      "name": "resizable",
      "displayName": "resizable",
      "type": "file",
      "path": "components.ui.resizable",
      "urlPath": "/components/ui/resizable",
      "content": "\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border border-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n",
      "components": [],
      "sections": {},
      "include": true,
      "previewOnly": true,
      "includeInToolbar": false,
      "fileExtension": "tsx"
    },
    "components.ui.scroll-area": {
      "id": "components.ui.scroll-area",
      "name": "scroll-area",
      "displayName": "scroll-area",
      "type": "file",
      "path": "components.ui.scroll-area",
      "urlPath": "/components/ui/scroll-area",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n",
      "components": [],
      "sections": {},
      "include": true,
      "previewOnly": true,
      "includeInToolbar": false,
      "fileExtension": "tsx"
    },
    "components.ui.select": {
      "id": "components.ui.select",
      "name": "select",
      "displayName": "select",
      "type": "file",
      "path": "components.ui.select",
      "urlPath": "/components/ui/select",
      "content": "\"use client\";\n\nimport * as SelectPrimitive from \"@radix-ui/react-select\";\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\nconst Select = SelectPrimitive.Root;\n\nconst SelectGroup = SelectPrimitive.Group;\n\nconst SelectValue = SelectPrimitive.Value;\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between whitespace-nowrap border-2 bg-transparent px-3 py-2 text-sm focus:outline-none focus:ring-1 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1 border-input text-foreground shadow radius border-ring font-sans tracking\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n));\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName;\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n));\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName;\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n));\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName;\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden border data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin] bg-popover text-popover-foreground border-border shadow radius font-sans tracking\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n));\nSelectContent.displayName = SelectPrimitive.Content.displayName;\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n));\nSelectLabel.displayName = SelectPrimitive.Label.displayName;\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center py-1.5 pl-2 pr-8 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 radius focus:bg-accent focus:text-accent-foreground font-sans tracking\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute right-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n));\nSelectItem.displayName = SelectPrimitive.Item.displayName;\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n));\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName;\n\nexport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectScrollDownButton,\n  SelectScrollUpButton,\n  SelectSeparator,\n  SelectTrigger,\n  SelectValue,\n};\n",
      "components": [],
      "sections": {},
      "include": true,
      "previewOnly": true,
      "includeInToolbar": false,
      "fileExtension": "tsx"
    },
    "components.ui.separator": {
      "id": "components.ui.separator",
      "name": "separator",
      "displayName": "separator",
      "type": "file",
      "path": "components.ui.separator",
      "urlPath": "/components/ui/separator",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n",
      "components": [],
      "sections": {},
      "include": true,
      "previewOnly": true,
      "includeInToolbar": false,
      "fileExtension": "tsx"
    },
    "components.ui.sheet": {
      "id": "components.ui.sheet",
      "name": "sheet",
      "displayName": "sheet",
      "type": "file",
      "path": "components.ui.sheet",
      "urlPath": "/components/ui/sheet",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 p-6 transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out bg-card text-card-foreground shadow\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b border-border data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t border-border data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r border-border data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4 border-l border-border data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 opacity-70 transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 border-ring focus:ring-offset-2 disabled:pointer-events-none radius text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n      {children}\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground font-sans tracking\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground font-sans tracking\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n",
      "components": [],
      "sections": {},
      "include": true,
      "previewOnly": true,
      "includeInToolbar": false,
      "fileExtension": "tsx"
    },
    "components.ui.skeleton": {
      "id": "components.ui.skeleton",
      "name": "skeleton",
      "displayName": "skeleton",
      "type": "file",
      "path": "components.ui.skeleton",
      "urlPath": "/components/ui/skeleton",
      "content": "import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse bg-muted radius\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n",
      "components": [],
      "sections": {},
      "include": true,
      "previewOnly": true,
      "includeInToolbar": false,
      "fileExtension": "tsx"
    },
    "components.ui.slider": {
      "id": "components.ui.slider",
      "name": "slider",
      "displayName": "slider",
      "type": "file",
      "path": "components.ui.slider",
      "urlPath": "/components/ui/slider",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-1.5 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-4 w-4 rounded-full border transition-colors focus-visible:outline-none focus-visible:ring-1 disabled:pointer-events-none disabled:opacity-50 bg-background border-primary shadow border-ring\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n",
      "components": [],
      "sections": {},
      "include": true,
      "previewOnly": true,
      "includeInToolbar": false,
      "fileExtension": "tsx"
    },
    "components.ui.sonner": {
      "id": "components.ui.sonner",
      "name": "sonner",
      "displayName": "sonner",
      "type": "file",
      "path": "components.ui.sonner",
      "urlPath": "/components/ui/sonner",
      "content": "\"use client\"\n\nimport { useTheme } from \"next-themes\"\nimport { Toaster as Sonner } from \"sonner\"\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow group-[.toaster]:font-sans group-[.toaster]:tracking\",\n          description: \"group-[.toast]:text-muted-foreground group-[.toast]:font-sans group-[.toast]:tracking\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground group-[.toast]:font-sans group-[.toast]:tracking\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground group-[.toast]:font-sans group-[.toast]:tracking\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster }\n",
      "components": [],
      "sections": {},
      "include": true,
      "previewOnly": true,
      "includeInToolbar": false,
      "fileExtension": "tsx"
    },
    "components.ui.switch": {
      "id": "components.ui.switch",
      "name": "switch",
      "displayName": "switch",
      "type": "file",
      "path": "components.ui.switch",
      "urlPath": "/components/ui/switch",
      "content": "\"use client\";\n\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\";\nimport * as React from \"react\";\n\nimport { cn } from \"@/lib/utils\";\n\ninterface SwitchProps\n  extends React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root> {\n  size?: \"default\" | \"lg\";\n}\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  SwitchProps\n>(({ className, size = \"default\", ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex shrink-0 cursor-pointer items-center border transition-colors disabled:cursor-not-allowed disabled:opacity-50 rounded-full data-checked-bg-primary data-unchecked-bg-input focus-ring border-primary\",\n      size === \"default\" ? \"h-5 w-9\" : \"h-6 w-11\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block ring-0 transition-transform rounded-full bg-background shadow border border-primary \",\n        size === \"default\"\n          ? \"h-4 w-4 data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0\"\n          : \"h-5 w-5 data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    ></SwitchPrimitives.Thumb>\n  </SwitchPrimitives.Root>\n));\nSwitch.displayName = SwitchPrimitives.Root.displayName;\n\nexport { Switch };\n",
      "components": [],
      "sections": {},
      "include": true,
      "previewOnly": true,
      "includeInToolbar": false,
      "fileExtension": "tsx"
    },
    "components.ui.table": {
      "id": "components.ui.table",
      "name": "table",
      "displayName": "table",
      "type": "file",
      "path": "components.ui.table",
      "urlPath": "/components/ui/table",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm font-sans tracking\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b [&_tr]:border-border\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t font-medium [&>tr]:last:border-b-0 border-border bg-muted text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors border-border hover:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-10 px-2 text-left align-middle font-medium [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px] text-muted-foreground font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\n      \"p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px] font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground font-sans tracking\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n",
      "components": [],
      "sections": {},
      "include": true,
      "previewOnly": true,
      "includeInToolbar": false,
      "fileExtension": "tsx"
    },
    "components.ui.tabs": {
      "id": "components.ui.tabs",
      "name": "tabs",
      "displayName": "tabs",
      "type": "file",
      "path": "components.ui.tabs",
      "urlPath": "/components/ui/tabs",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-9 items-center justify-center radius bg-muted p-1 text-muted-foreground font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap radius px-3 py-1 text-sm font-medium transition-all focus-visible:outline-none focus-visible:ring-ring focus-visible:ring-2 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 focus-visible:outline-none focus-visible:ring-ring focus-visible:ring-2 focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n",
      "components": [],
      "sections": {},
      "include": true,
      "previewOnly": true,
      "includeInToolbar": false,
      "fileExtension": "tsx"
    },
    "components.ui.textarea": {
      "id": "components.ui.textarea",
      "name": "textarea",
      "displayName": "textarea",
      "type": "file",
      "path": "components.ui.textarea",
      "urlPath": "/components/ui/textarea",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[60px] w-full border-2 bg-transparent px-3 py-2 text-base focus-visible:outline-none focus-visible:ring-1 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm border-input text-foreground shadow radius border-ring font-sans tracking\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n",
      "components": [],
      "sections": {},
      "include": true,
      "previewOnly": true,
      "includeInToolbar": false,
      "fileExtension": "tsx"
    },
    "components.ui.toast": {
      "id": "components.ui.toast",
      "name": "toast",
      "displayName": "toast",
      "type": "file",
      "path": "components.ui.toast",
      "urlPath": "/components/ui/toast",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-2 overflow-hidden radius border p-4 pr-6 shadow transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full font-sans tracking\",\n  {\n    variants: {\n      variant: {\n        default: \"border-border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center radius border bg-transparent px-3 text-sm font-medium transition-colors hover:bg-secondary focus:outline-none focus:ring-1 border-ring disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive font-sans tracking\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-1 top-1 radius p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-1 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold [&+div]:text-xs font-sans tracking\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90 font-sans tracking\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n",
      "components": [],
      "sections": {},
      "include": true,
      "previewOnly": true,
      "includeInToolbar": false,
      "fileExtension": "tsx"
    },
    "components.ui.toaster": {
      "id": "components.ui.toaster",
      "name": "toaster",
      "displayName": "toaster",
      "type": "file",
      "path": "components.ui.toaster",
      "urlPath": "/components/ui/toaster",
      "content": "\"use client\";\n\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport function Toaster() {\n  const { toasts } = useToast();\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        );\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  );\n}\n",
      "components": [],
      "sections": {},
      "include": true,
      "previewOnly": true,
      "includeInToolbar": false,
      "fileExtension": "tsx"
    },
    "components.ui.toggle": {
      "id": "components.ui.toggle",
      "name": "toggle",
      "displayName": "toggle",
      "type": "file",
      "path": "components.ui.toggle",
      "urlPath": "/components/ui/toggle",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center gap-2 radius text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 font-sans tracking\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent shadow hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-9 px-2 min-w-9\",\n        sm: \"h-8 px-1.5 min-w-8\",\n        lg: \"h-10 px-2.5 min-w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n",
      "components": [],
      "sections": {},
      "include": true,
      "previewOnly": true,
      "includeInToolbar": false,
      "fileExtension": "tsx"
    },
    "components.ui.tooltip": {
      "id": "components.ui.tooltip",
      "name": "tooltip",
      "displayName": "tooltip",
      "type": "file",
      "path": "components.ui.tooltip",
      "urlPath": "/components/ui/tooltip",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Portal>\n    <TooltipPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 overflow-hidden px-3 py-1.5 text-xs animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin] bg-popover text-popover-foreground border-border radius shadow font-sans tracking\",\n        className\n      )}\n      {...props}\n    />\n  </TooltipPrimitive.Portal>\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n",
      "components": [],
      "sections": {},
      "include": true,
      "previewOnly": true,
      "includeInToolbar": false,
      "fileExtension": "tsx"
    }
  },
  "contentVersion": 35
}