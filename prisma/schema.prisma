//-| File path: prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RefundStatus {
  pending
  approved
  denied
  completed
}

enum ProgressStatus {
  not_started
  in_progress
  completed
  cancelled
}

enum PaymentStatus {
  pending
  completed
  failed
  refunded
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String? 
  emailVerified Boolean
  image         String?
  role          String    @default("user")
  isDeleted     Boolean   @default(false)
  deletedAt     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sessions      Session[]
  accounts      Account[]
  profile       Profile?

  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@map("verification")
}

model Profile {
  id        String     @id @default(cuid())
  userId    String     @unique
  firstName String?
  lastName  String?
  email     String?
  phone     String?
  company   String?
  avatar    String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  contracts Contract[]

  @@map("profile")
}

model Conversation {
  id            String     @id @default(cuid())
  title         String?
  participants  String[]
  lastMessageAt DateTime
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  messages      Message[]
  contracts     Contract[]

  @@map("conversation")
}

model Message {
  id             String       @id @default(cuid())
  senderId       String
  content        String
  createdAt      DateTime     @default(now())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  files          FileUpload[]

  @@map("message")
}

model FileUpload {
  id        String   @id @default(cuid())
  messageId String
  filename  String
  url       String
  size      Int
  mimeType  String
  createdAt DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map("file_upload")
}

model Task {
  id             String          @id @default(cuid())
  title          String
  description    String
  price          Float
  progressStatus ProgressStatus?
  contractId     String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  contract       Contract        @relation(fields: [contractId], references: [id], onDelete: Cascade)

  @@map("task")
}

model Contract {
  id              String          @id @default(cuid())
  title           String
  description     String
  startDate       DateTime
  targetDate      DateTime
  dueDate         DateTime
  price           Float
  refundStatus    RefundStatus?
  progressStatus  ProgressStatus?
  profileId       String
  conversationIds String[]
  userApproved    Boolean
  adminApproved   Boolean
  isPaid          Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  profile         Profile         @relation(fields: [profileId], references: [id], onDelete: Cascade)
  conversations   Conversation[]
  tasks           Task[]
  payments        Payment[]

  @@map("contract")
}

model Payment {
  id                     String        @id @default(cuid())
  contractId             String
  stripeSessionId        String        @unique
  stripePaymentIntentId  String?
  amount                 Float
  currency               String        @default("usd")
  status                 PaymentStatus @default(pending)
  paidAt                 DateTime?
  refundedAt             DateTime?
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  contract               Contract      @relation(fields: [contractId], references: [id], onDelete: Cascade)

  @@map("payment")
}